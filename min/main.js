(()=>{var __webpack_modules__={7547:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.endOfToday=void 0;const i=n(o(2470));t.endOfToday=function(){return i.default().utc().add(8,"hours").endOf("day").subtract(8,"hours").toDate()}},2519:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.text2png=void 0;const i=new(n(o(4768)).default);t.text2png=async function(e,t){const o=`<pre style="font-family:'Source Code Pro', Consolas, 'Microsoft Yahei', HYShuaiXianTiW;font-size:14px;max-width:630px">${i.ansi_to_html(t)}</pre>`;let n,a;try{await e.setViewport({height:100,width:30}),await e.setContent(o);const t=await e.$("pre"),i=await e.evaluate((()=>{const e=document.getElementsByTagName("pre")[0];return{width:e.scrollWidth,height:e.scrollHeight}})),a=await t.boundingBox();await e.setViewport({width:Math.ceil(i.width+14),height:Math.ceil(a.height+14)}),n=await e.screenshot({})}catch(e){a=e}if(a)throw a;return(n||Buffer.from("")).toString("base64")}},9137:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.registerItem=t.Items=void 0,t.Items={fallback:{id:"fallback",weight:0,name:"未知物品",description:"未知物品"}},t.registerItem=function(e,o,n,i){t.Items[e]={id:e,weight:o,name:n,description:i}}},7286:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=o(3129);t.default=async function(e){let t;try{t=await new Promise(((t,o)=>{n.exec(e,((e,n,i)=>{e&&o(e),t(n+i)}))}))}catch(e){return e.toString()}return t.trim().length?t:"(execute success)"}},9063:function(module,__unused_webpack_exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};const path_1=__importDefault(__webpack_require__(5622)),koishi_core_1=__webpack_require__(8664),koishi_utils_1=__webpack_require__(280),fs_extra_1=__importDefault(__webpack_require__(4298)),koishi_plugin_mongo_1=__webpack_require__(9585);__webpack_require__(8573),__webpack_require__(9711),process.on("unhandledRejection",((e,t)=>{console.log("Unhandled Rejection:",t)})),koishi_utils_1.Logger.showDiff=!1,koishi_utils_1.Logger.showTime="MM-DD hh:mm:ss",koishi_core_1.Command.defaultConfig.checkArgCount=!0,String.prototype.decode=function(){return this.replace(/&#91;/gm,"[").replace(/&#93;/gm,"]").replace(/&amp;/gm,"&")},String.prototype.encode=function(){return this.replace(/&/gm,"&amp;").replace(/\[/gm,"&#91;").replace(/\]/gm,"&#93;")},koishi_core_1.Session.prototype.executeSilent=function(e,t){return this._silent=!0,this.send=koishi_utils_1.noop,this.sendQueued=koishi_utils_1.noop,this.execute(e,t)};class Main{constructor(e){this.logger=new koishi_utils_1.Logger("main"),this.config=e.config,this.app=new koishi_core_1.App({port:this.config.port,bots:this.config.bots,type:this.config.type,onebot:this.config.onebot,telegram:this.config.telegram,prefix:this.config.prompt,autoAuthorize:1,autoAssign:!0,minSimilarity:.7}),this.run()}async run(){fs_extra_1.default.ensureDirSync(path_1.default.resolve(__dirname,"..",".cache")),this.app.plugin(koishi_plugin_mongo_1.apply,this.config.db),this.app.on("connect",(async()=>{for(const e of this.config.admin){const t=e.split("&");let o;for(const e of t){const[t,n]=e.split(":");await this.app.database.getUser(t,n)&&(o=[t,n])}const n=Object.assign({},...t.map((e=>e.split(":"))).map((e=>({[e[0]]:e[1]}))));o&&this.app.database.setUser(o[0],o[1],{...n,authority:5,sudoer:!0}),this.logger.info(`Opped ${e}`)}})),await this.load(),await this.app.start()}async load(){for(const plugin of this.config.enabledplugins)try{"string"==typeof plugin?plugin.startsWith("~")?this.app.plugin(__webpack_require__(5305)(`./${plugin.split("~")[1]}`)):this.app.plugin(eval("require")(plugin).apply):plugin instanceof Array&&(plugin[0].startsWith("~")?this.app.plugin(__webpack_require__(5305)(`./${plugin[0].split("~")[1]}`),plugin[1]):this.app.plugin(eval("require")(plugin[0]).apply,plugin[1]))}catch(e){this.logger.error("Failed to load ",plugin,e)}}}global.Main=Main,module.exports=Main},6286:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=o(8664),a=o(3804),s=n(o(2470));i.Channel.extend((()=>({kick:0}))),t.apply=async function(e){e.select("platform","onebot").command("autokick <count>","",{hidden:!0,authority:4}).channelFields(["kick"]).action((async({session:e},t)=>(e.channel.kick=+t,`set to ${t}`))),e.app.on("connect",(()=>{const t=e.app.database.mongo.collection("autokick");e.select("platform","onebot").command("autokick.run","",{hidden:!0,authority:4}).channelFields(["kick"]).option("dry","dry run",{authority:2}).action((async({session:e,options:o})=>{const n=await e.bot.getGroup(e.groupId);let i=await e.bot.$getGroupMemberList(n.groupId);const r=(await t.find({groupId:e.groupId}).toArray()).map((e=>e.userId));if(i=a.filter(i,(e=>!r.includes(e.userId))),e.channel.kick&&e.channel.kick<i.length){let r;i=a.sortBy(i.map((e=>({...e,sort:Math.max(e.lastSentTime,e.joinTime)}))),"sort");for(const o of i){if(!await t.findOne({groupId:e.groupId,userId:o.userId})){r=o;break}}await e.send([`将 ${r.nickname||r.card} (${r.userId}) 移出群`,`（${s.default(1e3*r.joinTime||0).fromNow()}加入，上次发言 ${s.default(1e3*r.lastSentTime||0).fromNow()}）`].join("\n")),o.dry||await Promise.all([e.bot.$setGroupKick(n.groupId,r.userId),t.insertOne({groupId:e.groupId,userId:r.userId})])}}))}))}},1298:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(4515)),a={};for(let e=0;e<58;e++)a["fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF"[e]]=e;const s=[11,10,3,8,4,6],r=["B","V","1","","","4","","1","","7","",""];function c(e){if(12!==e.length||(e[0]+e[1]+e[2]+e[5]+e[7]+e[9]).toUpperCase()!==r.join(""))return null;let t=0;for(let o=0;o<6;o++)t+=a[e[s[o]]]*58**o;return t=t-8728348608^177451812,t>0&&t<1e9?t:null}const l=[[/(BV[0-9a-zA-Z]{10})/gim,e=>c(e[1])],[/av([0-9]+)/gim,e=>parseInt(e[1],10)],[/b23\.tv\/([a-zA-Z0-9]+)/gim,async e=>{const t=`https://b23.tv/${e[1]}`;return c((await new Promise((e=>{i.default.get(t).buffer(!1).end(((o,n)=>{e(n.redirects.length?n.redirects.pop():t)}))}))).split("video/")[1].split("?")[0])}]];t.apply=e=>{e.command("bilibili <avid>",{hidden:!0}).action((async({session:e},t)=>{const o=await i.default.get(`http://api.bilibili.com/x/web-interface/view?aid=${t}`);0===o.body.code&&await e.send(`bilibili.com/video/av${t}\n${o.body.data.title}\n[CQ:image,file=${o.body.data.pic}]`)})),e.middleware((async(e,t)=>{let o;await t();for(const t of l){const n=t[0].exec(e.content);if(n){const e=t[1](n);o=e instanceof Promise?await e:e;break}}o&&await e.execute(`bilibili ${o}`)}))}},2932:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;t.apply=e=>{e.on("connect",(async()=>{const t=e.database.mongo.collection("bottle");e.command("bottle.throw <content:text>","丢漂流瓶",{noRedirect:!0}).alias("丢漂流瓶").userFields(["id"]).action((async({session:e},o)=>`已丢出。(${(await t.insertOne({groupId:`${e.platform}:${e.groupId}`,userId:+e.user.id,content:o.trim(),pick:0})).insertedId})`)),e.command("bottle.pick","捡漂流瓶").alias("捡漂流瓶").action((async()=>{const e=await t.find({}).count();if(!e)return"没有捡到";const o=Math.floor(Math.random()*e),[n]=await t.find({}).skip(o).limit(1).toArray();return Math.random()>.5?await t.deleteOne({_id:n._id}):await t.updateOne({_id:n._id},{$inc:{pick:1}}),`被捡起 ${n.pick+1} 次\n时间：${new Date(1e3*n._id.generationTime).toLocaleString()}\n内容：${n.content}`})),e.command("bottle.del <query:text>",{authority:5,hidden:!0}).action((async(e,o)=>(await t.deleteMany(JSON.parse(o.decode()))).deletedCount.toString()))})),e.command("bottle","漂流瓶")}},4454:function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.apply=void 0;const child_process_1=__importDefault(__webpack_require__(3129)),util_1=__webpack_require__(1669),koishi_core_1=__webpack_require__(8664),koishi_plugin_common_1=__webpack_require__(4393),moment_1=__importDefault(__webpack_require__(2470)),graph_1=__webpack_require__(2519),shell_1=__importDefault(__webpack_require__(7286));koishi_core_1.Channel.extend((()=>({disallowedCommands:[]})));const groupMap={},userMap={};async function getGroupName(e){if("private"===e.subtype)return"私聊";const t=Date.now(),o=e.channelId;if(!groupMap[o]||t-groupMap[o][1]>=koishi_core_1.Time.hour){const n=e.bot.getGroup(o).then((e=>e.groupName),(()=>o));groupMap[o]=[n,t]}let n=await groupMap[o][0];return n!==`${o}`&&(n+=` (${o})`),n}async function formatMessage(e){const t=koishi_core_1.segment.parse(e.content);let o="";for(const n of t)if("string"==typeof n)o+=n;else if("text"===n.type)o+=n.data.content;else if("at"===n.type)if("all"===n.data.qq)o+="@全体成员";else{const t=n.data.qq,i=Date.now();if(!userMap[t]||i-userMap[t][1]>=koishi_core_1.Time.hour){const o=e.bot.getGroupMember(e.groupId,t).then((e=>e.nickname||e.username),(()=>t));userMap[t]=[o,i]}o+=`@${await userMap[t][0]}`}else"face"===n.type?o+=`[face ${n.data.id}]`:"image"===n.type?o+=`[image ${(n.data.url||"").split("?")[0]}]`:"reply"===n.type?o+=`[reply ${n.data.id}]`:o+=`[${n.type}]`;return o}const checkGroupAdmin=({session:e})=>e.user.authority>=4||e.author.roles.includes("admin")||e.author.roles.includes("owner")?null:"仅管理员可执行该操作。",apply=(ctx,config={})=>{var _a,_b;const logger=new koishi_core_1.Logger("busybox");koishi_core_1.Logger.levels.message=3,koishi_core_1.Time.setTimezoneOffset(null!==(_a=config.timezoneOffset)&&void 0!==_a?_a:-480),config.recordMessage=null===(_b=config.recordMessage)||void 0===_b||_b,ctx.plugin(koishi_plugin_common_1.apply,{}),ctx.command("help",{authority:1,hidden:!0}),ctx.command("tex",{authority:1}),ctx.command("_","管理工具"),ctx.select("groupId").command("_.assign","assign",{authority:4}).channelFields(["assignee"]).action((async({session:e})=>{e.channel.assignee=e.selfId.toString()})),ctx.command("_.echo <msg:text>","echo",{noRedirect:!0,authority:3}).action(((e,t)=>t.decode())),ctx.command("_.eval <expr:text>",{authority:5,noRedirect:!0,hidden:!0}).option("i","Output as image").userFields(koishi_core_1.User.fields).channelFields(koishi_core_1.Channel.fields).action((async({session,options},input)=>{let res;const expr=`        (async function f() {\n            return ${input.decode()}\n        })()`;try{res=await eval(expr)}catch(e){res=e}const output=util_1.inspect(res,!1,3);if(!options.i)return output;const page=await ctx.app.browser.newPage(),img=await graph_1.text2png(page,output);return page.close(),`[CQ: image, file = base64://${img}]`})),ctx.command("_.sh <command:text>","执行shell命令",{authority:5,noRedirect:!0}).option("i","Output as image").action((async({options:e},t)=>{const o=await shell_1.default(t.decode());if(!e.i)return o;const n=await ctx.app.browser.newPage(),i=await graph_1.text2png(n,o);return n.close(),`[CQ:image,file=base64://${i}]`})),ctx.command("_.shutdown","关闭机器人",{authority:5,noRedirect:!0}).action((()=>(setTimeout((()=>{process.env.pm_id?child_process_1.default.exec(`pm2 stop ${process.env.pm_id}`):process.exit(0)}),3e3),"Exiting in 3 secs..."))),ctx.command("_.restart","重启机器人",{authority:5,noRedirect:!0}).action((()=>process.env.pm_id?(setTimeout((()=>{child_process_1.default.exec(`pm2 restart ${process.env.pm_id}`)}),3e3),"Restarting in 3 secs..."):"Cannot restart: not pm2 environment")),ctx.select("platform").command("_.leave","退出该群",{noRedirect:!0}).userFields(["authority"]).check(checkGroupAdmin).action((async({session:e})=>{await e.bot.$setGroupLeave(e.groupId)})),ctx.command("_.setPriv <userId> <authority>","设置用户权限",{authority:5,noRedirect:!0}).action((async({session:e},t,o)=>("null"===o?(await ctx.database.setUser(e.platform,t,{flag:koishi_core_1.User.Flag.ignore}),o="0"):await ctx.database.setUser(e.platform,t,{flag:0}),await e.app.database.setUser(e.platform,t,{authority:+o}),`Set ${e.platform}:${t} to ${o}`))),ctx.command("_.boardcast <message:text>","全服广播",{authority:5,noRedirect:!0}).option("forced","-f 无视 silent 标签进行广播").action((async({options:e,session:t},o)=>{if(!o)return"请输入要发送的文本。";let n=await ctx.database.getAssignedChannels(["id","flag"]);e.forced||(n=n.filter((e=>!(e.flag&koishi_core_1.Channel.Flag.silent)))),n.forEach((e=>{t.bot.sendMessage(e.id,o)}))})),ctx.command("contextify <command:text>","在特定上下文中触发指令",{authority:4,noRedirect:!0}),ctx.command("_.deactivate","在群内禁用",{noRedirect:!0}).userFields(["authority"]).check(checkGroupAdmin).channelFields(["flag"]).action((({session:e})=>(e.channel.flag|=koishi_core_1.Channel.Flag.ignore,"Deactivated"))),ctx.command("_.activate","在群内启用",{noRedirect:!0}).userFields(["authority"]).check(checkGroupAdmin).channelFields(["flag"]).action((({session:e})=>(e.channel.flag&=~koishi_core_1.Channel.Flag.ignore,"Activated"))),ctx.command("_.switch <command>","启用/停用命令",{noRedirect:!0}).userFields(["authority"]).channelFields(["disallowedCommands"]).check(checkGroupAdmin).action((({session:e},t)=>{if(e.channel.disallowedCommands=e.channel.disallowedCommands||[],e.channel.disallowedCommands.includes(t)){const o=new Set(e.channel.disallowedCommands);return o.delete(t),e.channel.disallowedCommands=Array.from(o),`${t} 命令为启用状态。`}return e.channel.disallowedCommands.push(t),`${t} 命令为禁用状态。`})),ctx.command("_.mute <user> <periodSecs>","禁言用户",{noRedirect:!0}).userFields(["authority"]).check(checkGroupAdmin).action((({session:e},t,o="600000")=>e.bot.$setGroupBan(e.groupId,t,parseInt(o,10)))),ctx.on("message",(async e=>{const t=await getGroupName(e),o=`${e.username}(${e.userId})`,n=await formatMessage(e);if(logger.info(`[${t}] ${o}: ${n}`),e.groupId&&">_.activate"===e.content){if((await ctx.database.getUser(e.platform,e.userId)).authority>=4||e.author.roles.includes("admin")||e.author.roles.includes("owner")){const t=(await ctx.database.getChannel(e.platform,e.groupId)).flag&~koishi_core_1.Channel.Flag.ignore;await ctx.database.setChannel(e.platform,e.groupId,{flag:t}),await e.send("Activated")}else await e.send("您没有权限执行该操作")}})),ctx.on("before-send",(e=>{Promise.all([getGroupName(e),formatMessage(e)]).then((([t,o])=>logger.info(`send [${t}] ${e.selfId}: ${o}`)))})),ctx.on("group-member/ban",(e=>{e.userId.toString()===e.selfId.toString()&&console.log(e)})),ctx.on("group-member-added",(async e=>{const t=await e.app.database.getChannel(e.platform,e.groupId);logger.info("Event.Group_Increase",e,t),t.welcomeMsg&&await e.send(t.welcomeMsg.replace(/%@/gim,`[CQ:at,qq=${e.userId}`))})),ctx.on("group-member-deleted",(async e=>{const t=await ctx.database.getUser(e.platform,e.userId);logger.info("Event.Group_Decrease",e,t),e.send(`${e.username} 退出了群聊。`)})),ctx.on("before-command",(({session:e,command:t})=>{if(e.channel)return(e.channel.disallowedCommands||[]).includes(t.name)?"":void 0})),ctx.on("before-attach-user",((e,t)=>{t.add("id")})),ctx.on("before-attach-channel",((e,t)=>{t.add("disallowedCommands")})),ctx.app.on("friend-request",(e=>e.bot.setFriendAddRequest(e.flag,!0))),ctx.app.on("group-request",(async e=>{const t=await ctx.database.getUser(e.platform,e.userId);(config.public||[]).includes(`${e.platform}:${e.selfId}`)||5===(null==t?void 0:t.authority)?(logger.info("Approve Invite Request",e,t),e.bot.setGroupAddRequest(e.flag,e.subtype,!0)):(logger.info("Denied Invite Request",e,t),e.bot.setGroupAddRequest(e.flag,e.subtype,"此账号不对外开放，请使用其他账号。"))})),ctx.on("connect",(async()=>{const e=ctx.database.mongo.collection("message");logger.info("Ensuring index..."),await e.createIndex({time:-1,group:1,user:1}),logger.info("Done."),ctx.command("_.recall","撤回消息").userFields(["authority"]).check(checkGroupAdmin).option("count","-c <count> 数量",{fallback:1}).action((async({session:t,options:o})=>{const n=await t.app.database.getUser(t.platform,t.selfId.toString()),i=await e.find({group:t.groupId,sender:+n.id}).sort({time:-1}).limit(o.count).toArray();logger.info("deleting message: %o",i);for(const e of i)await t.bot.deleteMessage(t.groupId,e.id)})),ctx.command("_.stat [duration]","stat").option("total","-t Total").action((async({session:t,options:o},n="1day")=>{const[,i="1",a]=/(\d+)?(\w+)/.exec(n),s=`${t.platform}:${t.groupId}`,r=await t.app.database.getUser(t.platform,t.selfId.toString()),c=o.total?{}:{time:{$gt:moment_1.default().add(-i,a).toDate()}},l=await e.find({...c,sender:+r.id}).count(),u=await e.find({...c,group:s,sender:+r.id}).count(),d=await e.find({...c,sender:{$ne:+r.id}}).count(),p=await e.find({...c,group:s,sender:{$ne:+r.id}}).count();return`统计信息${o.total?"（总计）":`（${n}）`}\n发送消息${l}条，本群${u}条。\n收到消息${d}条，本群${p}条。`})),ctx.command("_.rank [duration]","rank").option("total","Total").action((async({session:t,options:o},n="1day")=>{var i;const[,a="1",s]=/(\d+)?(\w+)/.exec(n),r=`${t.platform}:${t.groupId}`,c=o.total?{group:r}:{time:{$gt:moment_1.default().add(-a,s).toDate()},group:r},l=await e.aggregate([{$match:c},{$group:{_id:"$sender",count:{$sum:1}}},{$sort:{count:-1}},{$limit:10}]).toArray(),u=await t.app.database.getUser("id",l.map((e=>e._id)),[t.platform,"name"]),d={};for(let e=0;e<l.length;e++){const o=l[e];try{d[o._id]=await t.bot.getGroupMember(t.groupId,u[e][t.platform])}catch(t){d[o._id]={username:(null===(i=u[e])||void 0===i?void 0:i.name)||o._id,nickname:""}}}return`群成员发言排行${o.total?"（共计）":`（${n}）`}\n${l.map((e=>`${d[e._id].nickname||d[e._id].username} ${e.count}条`)).join("\n")}`})),config.recordMessage&&(ctx.middleware(((t,o)=>{if(!t.groupId)return o();const n=`${t.platform}:${t.groupId}`;e.insertOne({group:n,message:t.content,sender:t.user.id,time:new Date,id:t.messageId})})),ctx.on("send",(async t=>{if(!t.groupId)return;const o=`${t.platform}:${t.groupId}`,n=await t.app.database.getUser(t.platform,t.selfId.toString(),["id"]);e.insertOne({time:new Date,sender:+n.id,group:o,message:t.content,id:t.messageId})})))}))};exports.apply=apply},8342:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(2376));t.apply=function(e){e.command("tools/calc <expr:text>","calc",{minInterval:2e3}).shortcut(/^\?([\s\S]+)$/,{args:["$1"]}).option("full","-f, --full full output").option("raw","-r, --raw raw input",{authority:5}).example("calc 1+1").example("calc Solve[x^2+1==0,{x}]").example("calc FactorInteger[233333]").action((async({session:e,options:t},o)=>{const{data:n}=await i.default.post("http://127.0.0.1:10378/",{raw:t.raw?"1":null,input:o.decode(),type:t.full?"Image":"Result"});if(!n.startsWith("<?xml"))return n;const a=await e.app.browser.newPage();await a.setContent(n);const s=await a.$("svg"),r=await a.screenshot({clip:await s.boundingBox()});return a.close(),`[CQ:image,file=base64://${r.toString("base64")}]`})),e.command("tools/calc.zebra <image:image>","Horse to Zebra",{minInterval:2e3})}},6134:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(4515)),a=o(3804);t.apply=function(e){e.command("oi","OI related"),e.command("oi/cf","Codeforces"),e.command("oi/cf.user <name>","Codeforces User",{minInterval:3e3}).action((async(e,t)=>{const o=await i.default.get(`https://codeforces.com/api/user.info?handles=${t}`).catch((()=>{}));if(!o)return"CF 挂了！";if("FAILED"===o.body.status)return"没这个人!";const n=o.body.result[0];return`${n.handle} ${n.firstName||""} ${n.lastName||""} ${n.organization||""}\n[CQ:image,file=https:${n.avatar}]\nRating: ${n.rating}\nRank: ${n.rank}\nMaxRating: ${n.maxRating}\nMaxRank: ${n.maxRank}`})),e.command("oi/cf.contest","Codeforces Contest",{minInterval:3e3}).action((async()=>{const e=await i.default.get("https://codeforces.com/api/contest.list").catch((()=>{}));if(!e||"OK"!==e.body.status)return"CF 挂了！";const t=(new Date).getTime(),o=a.filter(e.body.result,(e=>1e3*e.startTimeSeconds>t));let n="最近的比赛：\n";for(let e=o.length-1;e>=Math.max(o.length-5,0);e--){const t=o[e];n+=`${t.name} ${new Date(1e3*t.startTimeSeconds).toLocaleString()}\n`}return n}))}},1916:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(4515));t.apply=function(e){e.command("github/dress <path>","komeiji-satori/Dress").example("dress wuxianucw/001.jpg").action((async({session:e},t)=>{try{const o=await i.default.get(`https://cdn.jsdelivr.net/gh/komeiji-satori/Dress/${t}`).buffer();await e.send(`[CQ:image,file=base64://${o.body.toString("base64")}]`)}catch(e){return e.toString()}}))}},5282:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const n=o(8664),i=o(9137);function a(...e){let t=0;for(const o of e)t+=o;return t}n.User.extend((()=>({coin:0,backpack:[]}))),t.apply=function(e){e.command("property","财产系统"),e.command("property/backpack","背包").userFields(["backpack"]).action((({session:e})=>e.user.backpack.length?[`你的背包共${a(...e.user.backpack.map((e=>e.count)))}个物品。`,...e.user.backpack.map((e=>`${(i.Items[e.id]||i.Items.fallback).name} * ${e.count}`))].join("\n"):"你的背包是空的！")),e.command("property/checkin","签到",{maxUsage:1}).shortcut("签到",{prefix:!1}).userFields(["coin"]).action((async({session:e})=>{const t=20+Math.floor(10*Math.random());return e.user.coin+=t,`签到成功，获得${t}个硬币（共有${e.user.coin}个）`})),e.command("property/pay <targetUserId> <count>","转账",{noRedirect:!0}).userFields(["coin"]).action((async({session:t},o,i)=>{const a=parseInt(i,10);if(!(Number.isSafeInteger(a)&&a>0))return"不合法的数值。";if(t.user.coin<a)return"你没有足够的硬币。";if(!o)return"未指定目标。";const s=new n.Session(e,t);s.userId=o,s.author.userId=o,delete s.user;const r=await s.observeUser(["coin"]);return t.user.coin-=a,r.coin+=a,await s.user._update(),`已转账${a}个硬币。`}))}},7276:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const n=o(8664),i=o(9160),a=o(280);t.apply=function(e,t){e.plugin(i.apply,t),e.command("evaluate").option("i","Output as image",{hidden:!0}).userFields(n.User.fields).channelFields(n.Channel.fields).check((({session:e})=>{if(!e._sudo)return;const t=e.argv.args[0].replace("eval ","");return e.argv.options.i&&e.execute(`_.eval -i ${t}`),e.execute(`_.eval ${t}`),""})),e.command("@","utils",{hidden:!0}),e.command("@.silent <command:text>",{hidden:!0}).action((({session:e},t)=>e.executeSilent(t))),e.command("@.sleep <duration> <command:text>",{hidden:!0}).action((async({session:e},t,o)=>{let n=Math.min(1e4,+t);!Number.isNaN(n)&&n||(n=0),await a.sleep(n),await e.execute(o)}))}},8394:function(e,t,o){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,o,n){void 0===n&&(n=o),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,n){void 0===n&&(n=o),e[n]=t[o]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&n(t,e,o);return i(t,e),t},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const r=s(o(6417)),c=a(o(4515)),l=s(o(3680)),u=o(280);l.default(c);const d=new u.Logger("github");class p extends Error{}function m(e){return e.replace(/^```(.*)$/gm,"").replace(/^<!--(.*)-->$/gm,"").replace(/\n\s*\n/g,"\n").replace(/(\r?\n *)+/gim,"\n")}async function f(e,t,o,n){const i=await e.newPage();try{await i.goto(t,{waitUntil:"networkidle0"});const e=await i.$(o);let a=await e.boundingBox();await i.setViewport({height:Math.ceil(a.y+a.height+50),width:1080}),a=await e.boundingBox(),a={x:a.x-n[0],y:a.y-n[1],width:a.width+n[2],height:a.height+n[3]};const s=await i.screenshot({encoding:"base64",clip:a});return await i.close(),s}catch(e){throw await i.close(),e}}t.apply=(e,t)=>{function o(e){return c.post(e).proxy(t.proxy).set("Accept","application/vnd.github.v3+json").set("User-Agent","HydroBot")}function n(e){return c.put(e).proxy(t.proxy).set("Accept","application/vnd.github.v3+json").set("User-Agent","HydroBot")}e.on("connect",(()=>{const i=e.database.mongo.collection("github_watch"),a=e.database.mongo.collection("github_data"),s={push:{async hook(e){const o=e.ref.split("/")[2],n=e.head_commit?e.head_commit.author.username:e.sender.login;let i=0,a=0,s=0,r=`Recent commit to ${e.repository.full_name}${"master"===o?"":`:${o}`} by ${n}`;if(t.sourcegraph)try{const o=await c.post("https://sourcegraph.com/.api/graphql").set("Authorization",`token ${t.sourcegraph}`).send({query:`query{\nrepository(name:"github.com/${e.repository.full_name}"){\n  comparison(base:"${e.before}",head:"${e.after}"){\n    fileDiffs{nodes{stat{added changed deleted}}}\n  }\n}\n}`});if(o.body.data)if(o.body.data.repository){const e=o.body.data.repository.comparison.fileDiffs.nodes;for(const t of e)i+=t.stat.added||0,a+=t.stat.deleted||0,s+=t.stat.changed||0}else d.info("Repo not found: %s",e.repository.full_name);else d.info(o.body)}catch(e){d.error(e)}(i||a||s)&&(r+=`\n${i}+ ${a}- ${s}M`);for(const t of e.commits){const e=[];t.added.length&&e.push(`${t.added.length}+`),t.removed.length&&e.push(`${t.removed.length}-`),t.modified.length&&e.push(`${t.modified.length}M`),r+=`\n${t.id.substr(0,6)} ${m(t.message).replace(/\n/g,"\r\n")} (${e.join(" ")})`}return[r,{link:e.compare}]},async interact(t,o,n){if(t.includes("!!link"))return[n.link];if(t.includes("!!diff")){return[`[CQ:image,file=base64://${await f(e.browser,n.link,".files-bucket",[0,0,0,0])}]`]}return[]}},issues:{async hook(t){var o;let n;if("opened"===t.action||"edited"===t.action){n=`${t.sender.login} ${t.action} issue ${t.repository.full_name}#${t.issue.number}`;try{const o=await f(e.browser,t.issue.html_url,".js-discussion",[68,130,92,130]);n+=`\n${u.segment.image(`base64://${o}`)}`}catch(e){new u.Logger("puppeteer").warn(e),n+=`\n${m(t.issue.title)}\n${m(t.issue.body||"")}`}}else n="assigned"===t.action?`${t.repository.full_name}#${t.issue.number}: Assigned ${t.assignee.login}`:"unassigned"===t.action?`${t.repository.full_name}#${t.issue.number}: Unassigned ${t.assignee.login}`:"closed"===t.action?`${t.sender.login} closed ${t.repository.full_name}#${t.issue.number}.`:["reopened","locked","unlocked"].includes(t.action)?`${t.sender.login} ${t.action} Issue:${t.repository.full_name}#${t.issue.number}`:"labled"===t.action?`${t.sender.login} labled ${t.repository.full_name}#${t.issue.number} ${t.lable.name}`:`Unknown issue action: ${t.action}`;return[n,{link:(null===(o=t.comment)||void 0===o?void 0:o.html_url)||t.issue.html_url,reponame:t.repository.full_name,issueId:t.issue.number}]},async interact(e,o,n,i){if(e.includes("!!link"))return[n.link];const a=await i();var s;return console.log(e),await(s=`https://api.github.com/repos/${n.reponame}/issues/${n.issueId}/comments`,c.get(s).proxy(t.proxy).set("Accept","application/vnd.github.v3+json").set("User-Agent","HydroBot")).set("Authorization",`token ${a}`).send({body:e}),[]}},issue_comment:{async hook(t){let o;if("created"===t.action||"edited"===t.action){o=`${t.comment.user.login} ${"created"===t.action?"commented":"edited a comment"} on ${t.repository.full_name}#${t.issue.number}`;try{const n=await f(e.browser,t.issue.html_url,`#${t.comment.html_url.split("#")[1]}`,[86,14,92,20]);o+=`\n${u.segment.image(`base64://${n}`)}`}catch(e){new u.Logger("puppeteer").warn(e),o+=`\n${m(t.comment.body)}`}}return[o,{link:t.issue.html_url,reponame:t.repository.full_name,issueId:t.issue.number}]},async interact(t,i,a,s){if(t.includes("!!link"))return[a.link];const r=await s();if(t.includes("!!merge")){const e=t.split("!!merge")[1];return await n(`https://api.github.com/repos/${a.reponame}/pulls/${a.issueId}/merge`).set("Authorization",`token ${r}`).send({commit_title:e}),[]}if(t.includes("!!approve"))return await o(`https://api.github.com/repos/${a.reponame}/pulls/${a.issueId}/reviews`).set("Authorization",`token ${r}`).send({event:"APPROVE"}),[];if(t.includes("!!diff")){return[`[CQ:image,file=base64://${await f(e.browser,`${a.link}/files`,".files-bucket",[0,0,0,0])}]`]}return await o(`https://api.github.com/repos/${a.reponame}/issues/${a.issueId}/comments`).set("Authorization",`token ${r}`).send({body:t}),[]}},pull_request:{async hook(e){let t;const{full_name:o,owner:n}=e.repository,{user:i,html_url:a,title:s,base:r,head:c,number:l,merged:u}=e.pull_request,d=new RegExp(`^${n.login}:`),p=r.label.replace(d,""),m=c.label.replace(d,"");if("Bot"!==i.type){if("opened"===e.action)t=`${i.login} opened an pull request for ${o}#${l}(${p}<${m})`,t+=`\n${s}`,e.pull_request.body&&(t+=`\n${e.pull_request.body}`);else if("created"===e.action)t=`${i.login} commented on ${o}#${l}(${p}<${m})`,t+=`\n${e.comment.body}`;else if("assigned"===e.action)t=`${o}#${l}: Assigned ${e.assignee.login}`;else if("unassigned"===e.action)t=`${o}#${l}: Unassigned ${e.assignee.login}`;else if("review_requested"===e.action)t=`${o}#${l}: Request a review.`;else if("closed"===e.action){const n=u?"merged":"closed";t=`${e.sender.login} ${n} ${o}#${l}(${p}<${m})`}else t=["reopened","locked","unlocked"].includes(e.action)?`${e.sender.login} ${e.action} PR:${o}#${l}`:["synchronize"].includes(e.action)?"":"ready_for_review"===e.action?`${o}#${l} is ready for review.`:`Unknown pull request action: ${e.action}`;return[t,{link:a,reponame:o,issueId:l}]}},async interact(e,t,i,a){if(e.includes("!!link"))return[i.link];const s=await a();if(e.includes("!!merge")){const t=e.split("!!merge")[1];await n(`https://api.github.com/repos/${i.reponame}/pulls/${i.issueId}/merge`).set("Authorization",`token ${s}`).send({commit_title:t})}else e.includes("!!approve")?await o(`https://api.github.com/repos/${i.reponame}/pulls/${i.issueId}/reviews`).set("Authorization",`token ${s}`).send({event:"APPROVE"}):await o(`https://api.github.com/repos/${i.reponame}/issues/${i.issueId}/comments`).set("Authorization",`token ${s}`).send({body:e});return[]}},pull_request_review:{hook:async e=>"commented"===e.review.state?[]:"approved"===e.review.state?[`${e.sender.login} approved ${e.repository.full_name}#${e.pull_request.number}`]:[]},pull_request_review_comment:{async hook(e){let t="";return"created"===e.action&&(t=`${e.comment.user.login} commented on ${e.repository.full_name}#${e.pull_request.number}\n`,t+=m(e.comment.body)),[t,{link:e.pull_request.html_url,reponame:e.repository.full_name,issueId:e.pull_request.number}]},async interact(e,t,n,i){if(e.includes("!!link"))return[n.link];const a=await i();return await o(`https://api.github.com/repos/${n.reponame}/issues/${n.issueId}/comments`).set("Authorization",`token ${a}`).send({body:e}),[]}},star:{hook:async e=>"created"===e.action?await a.findOne({user:e.sender.login,repo:e.repository.full_name})?[]:[`${e.sender.login} starred ${e.repository.full_name} (total ${e.repository.stargazers_count} stargazers)`,{user:e.sender.login,repo:e.repository.full_name}]:[]},watch:{},project_card:{},project_column:{},check_run:{},check_suite:{},repository_vulnerability_alert:{},status:{},label:{}};e.router.post("/github",(async t=>{try{const n=t.request.headers["x-github-event"];let c;c="string"==typeof t.request.body.payload?JSON.parse(t.request.body.payload):t.request.body;const l=(o=JSON.stringify(c),r.default.createHash("sha256").update(o).digest("hex"));if(s[n]||(s[n]={hook:e=>Promise.resolve([`${e.repository.full_name} triggered an unknown event: ${n}`])}),s[n].hook){const o=c.repository.full_name,[r,u]=await s[n].hook(c);if(await a.findOne({_id:l}))t.body="Duplicate event";else{let s=[];if(r){const t=await i.findOne({_id:o.toLowerCase()});if(t)for(const o of t.target){const[t,n]=o.split(":"),i=await e.database.getChannel(t,n,["assignee"]);i.assignee&&e.bots[`${t}:${i.assignee}`]?s.push(e.bots[`${t}:${i.assignee}`].sendMessage(n,r)):d.warn("Cannot send message to %s:%d with assignee %d",t,o,i.assignee)}s=await Promise.all(s),await a.insertOne({_id:l,type:n,relativeIds:s,...u})}t.body=`Pushed to ${s.length} group(s)`}}else t.body="Event ignored."}catch(e){console.log(e),t.body=e.toString()}var o})),e.router.get("/github/authorize",(async o=>{const[n,i]=o.query.state.split(":"),a=o.query.code,s=await c.post("https://github.com/login/oauth/access_token").proxy(t.proxy).send({client_id:t.client_id,client_secret:t.client_secret,code:a,redirect_uri:t.redirect_uri,state:o.query.state});s.body.access_token?(await e.database.setUser(n,i,{GithubToken:s.body}),o.body="Done"):o.body="Error"})),e.middleware((async(o,n)=>{if(!o.quote)return n();const i=o.parsed.content.replace(/\[CQ:at,.*\]/g,"").replace(/\[CQ:image,file=(.*)\]/g,(e=>` ![](${/\[CQ:image,file=(.*)\]/g.exec(e)[1]}) `)).decode().trim();if(!i)return n();const[r,l]=await Promise.all([a.findOne({relativeIds:o.quote.messageId}),e.database.getUser(o.platform,o.userId,["GithubToken"])]);if(r&&s[r.type].interact){if(d.info(i),d.info("Reply: %s",r),i.startsWith("//"))return n();try{let n;try{n=await s[r.type].interact(i.trim(),o,r,(async function(){var n;if(!(null===(n=l.GithubToken)||void 0===n?void 0:n.access_token))throw new p;if(200!==(await c.get("https://api.github.com/").proxy(t.proxy).set("Authorization",`token ${l.GithubToken.access_token}`).set("User-Agent","HydroBot")).status){if(!l.GithubToken.refresh_token)throw new p;const n=await c.post("https://github.com/login/oauth/access_token").proxy(t.proxy).set("User-Agent","HydroBot").send({grant_type:"refresh_token",client_id:t.client_id,client_secret:t.client_secret,refresh_token:l.GithubToken.refresh_token});if(!n.body.access_token)throw new p;return await e.database.setUser(o.platform,o.userId,{GithubToken:n.body}),n.body.access_token}return l.GithubToken.access_token})),console.log(n)}catch(e){if(console.log("catch",e),e instanceof p){o.send("请输入Github用户名");const e=await o.prompt(6e4);return e?o.send(`请点击下面的链接继续操作：\nhttps://github.com/login/oauth/authorize?client_id=${t.client_id}&state=${o.platform}:${o.userId}&redirect_url=${t.redirect_uri}&scope=admin%3Arepo_hook%2Crepo&login=${e}`):o.send("输入超时")}throw e}const[u,d]=n;u&&await o.send(u),d&&await a.updateOne({_id:r._id},{$set:d})}catch(e){o.send(e.message)}return n()}})),e.select("groupId").command("github.listen <repo>","监听一个Repository的事件").action((async({session:e},t)=>{if(2!==(t=t.toLowerCase()).split("/").length)return"无效地址";return await i.findOne({_id:t})?(await i.updateOne({_id:t},{$addToSet:{target:`${e.platform}:${e.groupId}`}},{upsert:!0}),`Watching ${t}`):(await i.insertOne({_id:t,target:[`${e.platform}:${e.groupId}`]}),`Watching ${t}\n(请创建 webhook 投递至 https://github.undefined.moe/webhook ，格式 application/json )`)})),e.select("groupId").command("github.list","List repos").action((async({session:e})=>(await i.find({target:`${e.platform}:${e.groupId}`}).project({_id:1}).toArray()).map((e=>e._id)).join("\n"))),e.select("groupId").command("github.cancel <repo>","取消一个Repository的事件").action((async({session:e},t)=>(await i.updateOne({_id:t.toLowerCase()},{$pull:{target:`${e.platform}:${e.groupId}`}}),`Cancelled ${t}.`)))}))}},4819:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=o(3129),a=n(o(5622)),s=o(2087),r=o(280),c=o(4298);t.apply=e=>{e.command("glados <message:text>","Glados",{minInterval:3e4}).action((async({session:e},t)=>{const o=Math.random().toString(),n=a.default.resolve(s.tmpdir(),`${o}.wav`);if(await new Promise((e=>{i.exec(`wget --tries=50 -O ${n} https://glados.c-net.org/generate?text=${encodeURIComponent(t)}`,(t=>{t&&e(t),e(void 0)}))}))){e.send("请求正在处理中，请稍后（这可能需要数分钟）"),await r.sleep(1e5);if(await new Promise((e=>{i.exec(`wget --tries=50 -O ${n} https://glados.c-net.org/generate?text=${encodeURIComponent(t)}`,(t=>{t&&e(t),e(void 0)}))})))throw new Error("Service Error")}await e.send(`[CQ:record,file=file://${n}]`),await c.unlink(n)}))}},7780:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(5622)),a=n(o(4515)),s=o(4298),r={};try{const e=o(9802);for(const t of e)r[t.id]=t.id,r[t.name]=t.id}catch(e){}try{const e=o(2293);for(const t of e)r[t.name]=t.id}catch(e){}async function c({session:e},t){if(!t.trim())return await e.send("请输入要查看的Card ID/Name");if(!Object.keys(r).length){const e=await a.default.get("https://api.hearthstonejson.com/v1/latest/zhCN/cards.collectible.json");await s.writeFile(i.default.resolve(__dirname,"..","..",".cache","hs_card_zhCN.json"),JSON.stringify(e.body));for(const t of e.body)r[t.id]=t.id,r[t.name]=t.id;const t=await a.default.get("https://api.hearthstonejson.com/v1/latest/enUS/cards.collectible.json");await s.writeFile(i.default.resolve(__dirname,"..","..",".cache","hs_card_enUS.json"),JSON.stringify(t.body));for(const e of t.body)r[e.name]=e.id}return r[t]?e.send(`[CQ:image,file=https://art.hearthstonejson.com/v1/render/latest/zhCN/512x/${r[t]}.png]`):await e.send("NotFound")}t.apply=e=>{e.command("card <name/id:text>","Get a card").action(c)}},1263:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const o=["100","101","200","201","202","204","206","207","300","301","302","303","304","305","307","400","401","402","403","404","405","406","408","409","410","411","412","413","414","415","416","417","418","420","421","422","423","424","425","426","429","431","444","450","451","499","500","501","502","503","504","505","506","507","508","509","510","511","599"];t.apply=function(e){e.command("cat <id>","http.cat",{minInterval:1e3}).action((async(e,t)=>o.includes(t)?`[CQ:image,file=https://cdn.jsdelivr.net/gh/httpcats/http.cat/public/images/${t}.jpg]`:`你家http协议会返回${t}？`))}},5778:function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.apply=void 0;const path_1=__webpack_require__(5622),crypto_1=__webpack_require__(6417),koishi_core_1=__webpack_require__(8664),js_yaml_1=__importDefault(__webpack_require__(6675)),axios_1=__importDefault(__webpack_require__(2376)),fs_extra_1=__webpack_require__(4298),sharp_1=__importDefault(__webpack_require__(742)),logger=new koishi_core_1.Logger("imagetag"),imageRE=/(\[CQ:image,file=[^,]+,url=[^\]]+\])/,checkGroupAdmin=({session:e})=>e.user.authority>=4||e.author.roles.includes("admin")||e.author.roles.includes("owner")?null:"仅管理员可执行该操作。";function MD5(e){const t=crypto_1.createHash("md5");return t.update(e),t.digest("hex")}const apply=async(ctx,config={})=>{const transfile=await fs_extra_1.readFile(path_1.resolve(process.cwd(),"database","image.tags.translation.yaml")),trans=js_yaml_1.default.safeLoad(transfile.toString()),names=eval("require")(`${process.cwd()}/database/class_names_6000.json`);ctx.on("before-attach-channel",((e,t)=>{t.add("enableAutoTag")})),ctx.middleware((async(e,t)=>{const o=imageRE.exec(e.content);return o&&(2===e.channel.enableAutoTag?e.executeSilent(`tag ${o[1]}`):1===e.channel.enableAutoTag&&e.execute(`tag ${o[1]}`)),t()})),ctx.app.on("connect",(async()=>{const e=ctx.app.database.mongo.collection("image.tag");e.createIndex({md5:1},{unique:!0}),ctx.command("tag [image]","Get image tag",{hidden:!0,minInterval:2e3}).action((async({session:t},o)=>{try{let n;o||(await t.send("请发送图片。"),o=await t.prompt(3e4));let i=o;const a=koishi_core_1.segment.from(o);if(a){if("image"!==a.type)throw new Error("没有发现图片。");i=a.data.url,n=a.data.file}if(!i.startsWith("http"))throw new Error("没有发现图片。");n||(n=Buffer.from(i).toString("base64"));let s=await e.findOne({_id:n});if(s)return s.txt;const{data:r}=await axios_1.default.get(i,{responseType:"arraybuffer"}),c=Buffer.alloc(r.byteLength),l=new Uint8Array(r);for(let e=0;e<c.length;++e)c[e]=l[e];const u=MD5(c);if(s=await e.findOne({md5:u}),s)return s.txt;const d=(await sharp_1.default(c).png().toBuffer()).toString("base64");logger.info("downloaded");const{data:p}=await axios_1.default.post("http://127.0.0.1:10377/",{img:d});if("string"==typeof p){let t=p.split("HTTP")[0];throw(p.includes("output with shape")||p.includes("size of tensor"))&&(t="不支持的图片格式（请尝试截图发送）",await e.insertOne({_id:n,md5:u,txt:t})),new Error(t)}const m=[];let f="";for(const e of p)m.push(names[e[0]]),f+=`${trans[names[e[0]]]||names[e[0]]}:${Math.floor(100*e[1])}%  `;if(logger.info(f),config.url&&config.tags)for(const e of m)if(config.tags.includes(e)||m.length>7){axios_1.default.get(`${config.url}&source=${encodeURIComponent(i)}&format=json`);break}return await e.insertOne({_id:n,md5:u,txt:f}),f}catch(e){return e.toString().split("\n")[0]}})),ctx.command("tag.disable","在群内禁用",{noRedirect:!0}).userFields(["authority"]).check(checkGroupAdmin).channelFields(["enableAutoTag"]).action((({session:e})=>(e.channel.enableAutoTag=0,"Disabled"))),ctx.command("tag.enable","在群内启用",{noRedirect:!0}).option("silent","-s").userFields(["authority"]).check(checkGroupAdmin).channelFields(["enableAutoTag"]).action((({session:e,options:t})=>(e.channel.enableAutoTag=t.silent?2:1,"enabled")))}))};exports.apply=apply},1925:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0,t.apply=function(e){e.command("jjwz","绝句文章"),e.command("jjwz.add <content:text>","创建/添加").channelFields(["jjwz"]).userFields(["id"]).action((async({session:e},t)=>{if(t.length>7)return"你怎么写这么长";if(e.channel.jjwz){if((e.channel.jjwz[e.channel.jjwz.length-1]||[])[0]===+e.user.id)return"你不能连续添加"}else e.channel.jjwz=[];return e.channel.jjwz.push([+e.user.id,t]),`${e.channel.jjwz.map((e=>e[1])).join("")}...`})),e.command("jjwz.end","结束").channelFields(["jjwz"]).userFields(["id"]).action((async({session:e})=>e.channel.jjwz?(e.channel.jjwz=null,e.channel.jjwz.map((e=>e[1])).join("")):"还未开始")),e.command("jjwz.edit <content:text>","编辑").channelFields(["jjwz"]).userFields(["id"]).action((async({session:e},t)=>e.channel.jjwz?t.length>7?"你怎么写这么长":e.channel.jjwz[e.channel.jjwz.length-1][0]!==+e.user.id?"上一条不是你所编辑":(e.channel.jjwz[e.channel.jjwz.length-1][1]=t,`${e.channel.jjwz.map((e=>e[1])).join("")}...`):"还未开始")),e.command("jjwz.del","删除").channelFields(["jjwz"]).userFields(["id"]).action((async({session:e})=>e.channel.jjwz?e.channel.jjwz[e.channel.jjwz.length-1][0]!==+e.user.id?"上一条不是你所编辑":(e.channel.jjwz.pop(),`${e.channel.jjwz.map((e=>e[1])).join("")}...`):"还未开始"))}},2179:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=o(7548),a=n(o(2470)),s=o(7547);a.default.locale("zh-cn");const r={expireDays:7,serviceFee:.03,maxBuyPerDay:10};t.apply=(e,t)=>{t={...r,...t},e.on("connect",(()=>{const o=e.database.mongo.collection("kabu.price");o.createIndex("expire",{expireAfterSeconds:0});const n=e.database.mongo.collection("kabu.stock");async function r(e){const t=await o.findOne({_id:e});if(t)return[t.price,t.bought||0];const n=Math.floor(Math.random()<.5?10+Math.sqrt(400*Math.random()):50-Math.sqrt(400*Math.random()));return await o.insertOne({_id:e,price:n,expire:s.endOfToday(),bought:0}),[n,0]}n.createIndex({userId:1,expire:1}),n.createIndex("expire",{expireAfterSeconds:0}),e.command("kabu.query","查询自己的库存以及今日大头菜价格").shortcut("查询大头菜",{prefix:!1}).userFields(["coin","id"]).action((async({session:e})=>{const[o,i]=await Promise.all([n.find({userId:+e.user.id}).sort("expire",1).limit(10).toArray(),n.find({userId:+e.user.id}).count()]);let s="",c=0;for(const{number:e,buyPrice:t,expire:n}of o)c+=e,s+=`你有 ${e} 棵以 ${t} 个硬币每棵买入的大头菜，它们会在 ${a.default(n).fromNow()} 烂掉。\n`;const[l,u]=await r(+e.user.id),d=t.maxBuyPerDay-u;return e.user.coin||(e.user.coin=0),0===i?s="你现在手上还没有大头菜"+(e.user.coin>=l&&d?"，要来买点吗？":"。"):i>o.length&&(s+=`隐藏了 ${i-o.length} 个条目。`),`你现在共有 ${c} 棵大头菜和 ${e.user.coin} 个硬币。\n今天卖给 ${e.username} 的大头菜价格是每棵 ${l} 硬币。您今天还可购入${d}个大头菜。\n${s}`})),e.command("kabu.buy [number]",`购买大头菜。若不指定数量则尽量多地购买。手续费 ${100*t.serviceFee}%。`,{noRedirect:!0}).shortcut("购买大头菜",{prefix:!1,fuzzy:!0}).userFields(["coin","id"]).action((async({session:e},s)=>{const[c,l]=await r(+e.user.id);e.user.coin||(e.user.coin=0);const u=Math.floor(e.user.coin/c/(1+t.serviceFee)),d=Math.min(t.maxBuyPerDay-l,+(null!=s?s:u));if(!Number.isInteger(d)||d<=0||d>u)return`购买数量需要是 1~${u} 之间的正整数。`;const p=a.default();p.add(t.expireDays,"days"),await n.insertOne({_id:new i.ObjectID,userId:+e.user.id,number:d,buyPrice:c,expire:p.toDate()});const m=Math.ceil((1+t.serviceFee)*c*d);return e.user.coin-=m,await o.updateOne({_id:+e.user.id},{$set:{bought:d+l}}),`你花了 ${m} 个硬币（含 ${m-c*d} 个硬币的手续费）以 ${c} 每棵的价格购买了 ${d} 棵大头菜。\n要是你没有在 ${t.expireDays} 天内把大头菜卖掉，它们就会全部烂掉，害你大亏本！一定要注意这一点喔。`})),e.command("kabu.sell [number]",`卖出最早购买（最先烂掉）的大头菜。若不指定数量则全部卖出。手续费 ${100*t.serviceFee}%。`,{noRedirect:!0}).shortcut("卖出大头菜",{prefix:!1,fuzzy:!0}).userFields(["coin","id"]).action((async({session:e},o)=>{const i=+(null!=o?o:1/0);if(i!==1/0&&(!Number.isInteger(i)||i<=0))return"卖出的数量需要是一个正整数";const a=await n.find({userId:+e.user.id}).sort("expire",1).toArray();let s=0,c=null;const l=[];for(const e of a)if(s+e.number<=i)s+=e.number,l.push(e._id);else if(s<i){c={_id:e._id,newNumber:e.number-(i-s)},s=i;break}if(0===s||i!==1/0&&s!==i)return"你没有足够多的大头菜来卖出！";const[u]=await r(+e.user.id);e.user.coin||(e.user.coin=0);const d=Math.floor((1-t.serviceFee)*s*u);return e.user.coin+=d,l.length&&await n.deleteMany({_id:{$in:l}}),c&&await n.updateOne({_id:c._id},{$set:{number:c.newNumber}}),`你已成功卖出 ${s} 棵大头菜，获得了 ${d} 个硬币（已扣除 ${s*u-d} 个硬币的手续费）！`}))})),e.command("kabu","大头菜")}},1787:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(4515)),a=new(o(8664).Logger)("luogu");t.apply=e=>{e.command("oi","OI related"),e.command("oi/luogu","Luogu"),e.command("oi/luogu.problem <pid>","获取Luogu题目").action((async(t,o)=>{const n=await e.app.browser.newPage();try{await n.goto(`https://www.luogu.com.cn/problem/${o}`,{waitUntil:"networkidle0"})}catch(e){return n.close(),"请求超时。"}return(await n.$(".problem-card")).screenshot({}).then((async e=>(n.close(),`[CQ:image,file=base64://${e.toString("base64")}]`)),(e=>(n.close(),a.debug(e),"截图失败。")))})),e.command("oi/luogu.user <uid>","查询用户").action((async(e,t)=>{const o=await i.default.get(`https://www.luogu.com.cn/user/${t}?_contentOnly=1`).set("User-Agent","Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko");if("404"===o.body.code)return"没这个人!";const n=o.body.currentData.user,a=0===n.ccfLevel?"无/藏了以方便假":n.ccfLevel;return`${n.name}\n关注: ${n.followingCount}\n粉丝: ${n.followerCount}${n.passedProblemCount?`\nACs/Submits: ${n.passedProblemCount}/${n.submittedProblemCount}`:""}\n颜色: ${n.color}\nCCF评级:${a}`}))}},7750:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(2376));t.apply=e=>{e.middleware((async(e,t)=>{if(e.content.includes("https://bot-api.lxns.net/bot-message/")){const t=await i.default.get(`https://${e.content.split("https://")[1]}`);e.content=t.data.replace(/<.*?>/g,"")}await t()}),!0)}},1078:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=o(8664),a=n(o(4515));t.apply=function(e){e.command("tools","实用工具"),e.command("tools/ocr [image]",{minInterval:3e3}).action((async({session:e},t)=>{if(t||(await e.sendQueued("请发送图片。"),t=await e.prompt(3e4)),!t)return"没有检测到图片。";const o=i.segment.from(t),n=await a.default.get(`https://ai.qq.com/cgi-bin/appdemo_imagetranslate?image_url=${o.data.url}`);return 0!==n.body.ret?n.body.msg:n.body.data.image_records.map((e=>e.source_text)).join("")}))}},8140:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(4515)),a=o(3804),s={"-1":"女",0:"未知",1:"男"};t.apply=function(e){e.command("oi","OI Related"),e.command("oi/oier <query>","查询oier",{minInterval:3e4}).action((async(e,t)=>{const o=await i.default.get(`https://bytew.net/OIer/search.php?method=normal&q=${encodeURIComponent(t)}`),{result:n}=JSON.parse(o.text);let r="";for(const e of a.take(n,3)){const t=JSON.parse(e.awards.replace(/'/gim,'"'));r+=`姓名：${e.name}  生理性别：${s[e.sex]}\n`;for(const e of a.take(t,5))r+=`于${e.grade}时在${e.province}${e.school}参加${e.identity}，`,e.score&&(r+=`以${e.score}的成绩`),r+=`取得${e.award_type}，排名${e.rank}。\n`;t.length>5&&(r+=t.length-5+"个奖项被隐藏。\n")}return n.length>3&&(r+=n.length-3+"个搜索结果被隐藏。"),r}))}},5405:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const n=o(8664);t.apply=e=>{e.command("proxy <command:text>","Proxy a command",{hidden:!0,authority:4}).option("user","-u <userId>").option("self","-s <selfId>").option("group","-g <groupId>").option("length","-l <length>",{fallback:1}).action((async({session:t,options:o},i)=>{const a=new n.Session(e.app,t);if(delete a.groupId,o.group?(a.groupId=o.group,a.subtype="group"):(a.groupId=void 0,a.subtype="private"),o.self&&(a.selfId=o.self),o.user){const e=o.user;if(!e)return"未指定目标。";a.userId=e}await a.send(i);let s="";for(let e=1;e<=o.length;e++)s+=await a.prompt(3e4);return s}))}},8414:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=t.defaultConfig=void 0;const n=o(280),i=o(1703),a=o(904);t.defaultConfig={loadTimeout:1e4,idleTimeout:3e4,maxLength:1e6};const s=["http","https"],r=new n.Logger("puppeteer");t.apply=function(e,o){o={...t.defaultConfig,...o},e.plugin(a.apply,o),e.command("shot").dispose(),e.command("page <url:text>","Get page",{authority:3,minInterval:3e3}).alias("screenshot","shot").option("full","-f Full page").option("element","-e, --element <selector:string> Element Selector").option("viewport","<viewport> 指定Viewport",{fallback:"1600x900"}).action((async({session:t,options:a},c="")=>{let l=c.trim();if(!l)return"请输入网址。";const u=a.viewport.split("x");if(2!==u.length)return"Invalid viewport";const d=/^(\w+):\/\//.exec(l);if(d){if(!s.includes(d[1]))return"请输入正确的网址。"}else l=`http://${l}`;const p=await e.browser.newPage();let m=!1;p.on("load",(()=>m=!0)),await p.setViewport({width:parseInt(u[0],10),height:parseInt(u[1],10),deviceScaleFactor:1});try{await new Promise(((e,n)=>{const i=setTimeout((()=>m?t.send("正在加载中，请稍等片刻~"):n(new Error("navigation timeout"))),o.loadTimeout),a=()=>{clearTimeout(i),e(void 0)};p.goto(l,{waitUntil:"networkidle0",timeout:o.idleTimeout}).then(a,(()=>m?a():n(new Error("navigation timeout"))))}))}catch(e){return p.close(),r.debug(e),"无法打开页面。"}return(a.element?await p.$(a.element):p).screenshot({fullPage:a.full}).then((async e=>(p.close(),e.byteLength>o.maxLength&&await new Promise(((t,o)=>{(new i.PNG).parse(e,((e,n)=>e?o(e):t(n)))})).then((t=>{const n=t.width,a=t.height*o.maxLength/e.byteLength,s=new i.PNG({width:n,height:a});t.bitblt(s,0,0,n,a,0,0),e=i.PNG.sync.write(s)})).catch(n.noop),`[CQ:image,file=base64://${e.toString("base64")}]`)),(e=>(p.close(),r.debug(e),"截图失败。")))}))}},3372:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(2376)),a=o(2519),s={c:{type:"compiler",compile:["/usr/bin/gcc","-O2","-Wall","-std=c99","-o","code","foo.c","-lm","-fdiagnostics-color=always"],code_file:"foo.c",execute:["/w/code"]},cc:{type:"compiler",compile:["/usr/bin/g++-7","-O2","-Wall","-std=c++11","-o","code","foo.cc","-lm","-fdiagnostics-color=always"],code_file:"foo.cc",execute:["/w/code"]},pas:{type:"compiler",compile:["/usr/bin/fpc","-O2","-o/w/code","foo.pas"],code_file:"foo.pas",execute:["/w/code"]},py:{type:"interpreter",code_file:"foo.py",execute:["/usr/bin/python","foo.py"]},py2:{type:"interpreter",code_file:"foo.py",execute:["/usr/bin/python","foo.py"]},py3:{type:"interpreter",code_file:"foo.py",execute:["/usr/bin/python3","foo.py"]},java:{type:"compiler",compile:["/usr/bin/javac","-d","/w","-encoding","utf8","./Main.java"],code_file:"Main.java",copyOut:"Main.class",execute:["/usr/bin/java","Main"]},php:{type:"interpreter",code_file:"foo.php",execute:["/usr/bin/php","foo.php"]},js:{type:"interpreter",code_file:"foo.js",execute:["/usr/bin/jsc","/w/foo.js"]},go:{type:"compiler",compile:["/usr/bin/go","build","-o","foo","foo.go"],code_file:"foo.go",execute:["/w/foo"]},sh:{type:"interpreter",code_file:"foo.sh",execute:["/bin/bash","foo.sh"]},cs:{type:"compiler",compile:["/usr/bin/mcs","-optimize+","-out:/w/foo","/w/foo.cs"],code_file:"foo.cs",execute:["/usr/bin/mono","foo"]}},r=["PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin","HOME=/w"],c=i.default.create({baseURL:"http://localhost:5050"});async function l(e,{time_limit_ms:t=5e3,memory_limit_mb:o=256,process_limit:n=32,stdin:i="",copyIn:a={},copyOut:s=[],copyOutCached:l=null}={}){let u,d;try{d={cmd:[{args:e,env:r,files:[i?{content:i}:{content:""},{name:"stdout",max:20480},{name:"stderr",max:20480}],cpuLimit:1e3*t*1e3,readCpuLimit:1200*t*1e3,memoryLimit:1024*o*1024,procLimit:n,copyIn:a,copyOut:s,copyOutCached:l}]};u=(await c.post("/run",d)).data[0]}catch(e){throw console.log(e),e}const p={status:u.status,time_usage_ms:u.time/1e6,memory_usage_kb:u.memory/1024,files:u.files};return u.files=u.files||{},p.stdout=u.files.stdout||"",p.stderr=u.files.stderr||"",u.error&&(p.error=u.error),p.files=u.files,u.fileIds&&(p.fileIds=u.fileIds),p}async function u(e,t,o){const{status:n,stdout:i,stderr:a}=await async function(e,t,o){const n={},i=s[t];if(!s[t])return{status:"SystemError",stdout:"不支持的语言",stderr:"目前支持sh,c,cc,pas,py2,py3,js,cs,go,php,java"};if(n[i.code_file]={content:e},"compiler"===i.type){const{status:e,stdout:t,stderr:o,fileIds:a}=await l(i.compile,{copyIn:n,copyOutCached:[i.copyOut||"code"]});if("Accepted"!==e)return{status:`Compile Error:${e}`,stdout:t,stderr:o};const s=await l(i.execute,{copyIn:{[i.copyOut||"code"]:{fileId:a[i.copyOut||"code"]}}});return await c.delete(`/file/${a[i.copyOut||"code"]}`),s}return"interpreter"===i.type?await l(i.execute,{copyIn:n,stdin:o}):void 0}(e,t,o).catch((e=>({status:"SystemError",stdout:e.toString(),stderr:""})));return"Accepted"===n?`Execute result: \n${i}\n${a}`:`Error: ${n}\n${i}\n${a}`}t.apply=e=>{e.command("tools","实用工具"),e.command("tools/run <language> <code:text>","运行程序",{minInterval:1e3}).alias("code").option("input","启用stdin").action((async({session:t,options:o},n,i)=>{o.input&&t.send("Please input:");const s=o.input?await t.prompt(1e4):"",r=await u(i.replace(/\r/gim,"").decode(),n,s.decode());if(r.length>256||r.split("\n").length>10){const t=await e.browser.newPage();return`[CQ:image,file=base64://${await a.text2png(t,r)}]`}return r}))}},7088:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=o(2087),a=o(9176),s=n(o(2470));t.apply=async function(e,t){e.plugin(a.apply,{...t,format:["{{ bots }}","==========","用户数量：{{ activeUsers }}","群数量：{{ activeGroups }}","CPU 使用率：{{ (cpu[1] * 100).toFixed() }}%","内存使用量：{{ usedmem }}M / {{ totalmem }}M","今日收发消息量 {{ totalReceiveCount }}/{{ totalSendCount }}"].join("\n")}),e.app.on("connect",(()=>{const t=e.app.database.mongo.collection("message");a.extend((async o=>{const n=(await Promise.all(o.bots.map((t=>e.app.database.getUser(t.platform,t.selfId.toString()))))).map((e=>e.id)),a={time:{$gt:s.default().add(-1,"day").toDate()}};o.activeUsers=await e.app.database.mongo.user.find({}).count(),o.totalSendCount=await t.find({...a,sender:{$in:n.map(parseInt)}}).count(),o.totalReceiveCount=await t.find({...a,sender:{$nin:n.map(parseInt)}}).count(),o.usedmem=Math.floor((i.totalmem()-i.freemem())/1024/1024),o.totalmem=Math.floor(i.totalmem()/1024/1024)}))}))}},9891:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0,t.apply=function(e){e.command("sudo <command:text>",{hidden:!0,noRedirect:!0}).userFields(["sudoer","authority"]).action((async({session:e},t)=>{if(!e.user.sudoer)throw new Error("You are not in the sudoers file.");const o=e.user.authority;e.user.authority=5,e._sudo=!0,await e.execute(t),e.user.authority=o}))}},475:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=o(663),a=n(o(2376)),s=o(7548),r=/\[CQ:image,file=([^,]+),url=([^\]]+)\]/,c=/\[CQ:image,file=image:\/\/([^,]+)\]/;t.apply=(e,t)=>{const o=e.logger("teach");e.plugin(i.apply,t),e.command("teach",{checkArgCount:!1}),e.on("before-command",(async({session:t,command:o})=>{if(o.getConfig("noRedirect",t)&&t._redirected){const o=await e.app.database.getUser("id",t._dialogue.writer,["authority"]);if(o.authority<5&&!o.sudoer)return"不支持在插值中调用该命令。"}})),e.on("connect",(()=>{const t=e.app.database.mongo.collection("image"),n=async(e,o)=>{if(await t.findOne({_id:e}))return;const{data:n}=await a.default.get(o,{responseType:"arraybuffer"}),i=Buffer.alloc(n.byteLength),r=new Uint8Array(n);for(let e=0;e<i.length;++e)i[e]=r[e];await t.insertOne({_id:e,data:new s.Binary(i)})};e.on("dialogue/detail",(async(e,n)=>{try{for(const e in n){let o,i="";for(;o=c.exec(n[e]);){const[a,s]=o;i+=n[e].slice(0,o.index),n[e]=n[e].slice(o.index+a.length);i+=`[CQ:image,file=base64://${(await t.findOne({_id:s})).data.buffer.toString("base64")}]`}n[e]=i+n[e]}}catch(e){throw o.warn(e.message),new Error("下载图片时发生错误。")}})),e.on("dialogue/before-send",(async e=>{let{answer:n}=e;if(n)try{let o,i="";for(;o=c.exec(n);){const[e,a]=o;i+=n.slice(0,o.index),n=n.slice(o.index+e.length);i+=`[CQ:image,file=base64://${(await t.findOne({_id:a})).data.buffer.toString("base64")}]`}e.answer=i+n}catch(e){throw o.warn(e.message),new Error("下载图片时发生错误。")}})),e.on("dialogue/before-modify",(async({options:e})=>{let{answer:t}=e;if(t)try{let o,i="";for(;o=r.exec(t);){const[e,a,s]=o;i+=t.slice(0,o.index),t=t.slice(o.index+e.length),await n(a,s),i+=`[CQ:image,file=image://${a}]`}e.answer=i+t}catch(e){return o.warn(e.message),"上传图片时发生错误。"}}))}))}},8424:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(4515)),a=n(o(2376)),s=n(o(742)),r=o(3804),c=o(9636),l=o(9509),u=o(5747),d=o(2519),p=n(o(7286));t.apply=e=>{e.plugin(l.apply,{bilibili:!1,magi:!1,oeis:!1}),e.plugin(c.apply),e.command("search","",{maxUsage:5,minInterval:6e4}),e.command("tools/tex <code:text>","KaTeX 渲染",{minInterval:1e3}).alias("katex <code:text>").action((async({session:e},t)=>{let{data:o}=await a.default.get(`https://www.zhihu.com/equation?tex=${encodeURIComponent(t)}`);const n=o.match(/>([^<]+)<\/text>/);if(n)return e.send(n[1]);const i=o.match(/ viewBox="0 (-?\d*(.\d+)?) -?\d*(.\d+)? -?\d*(.\d+)?" /);i&&(o=o.replace("\n",`\n<rect x="0" y="${i[1]}" width="100%" height="100%" fill="white"></rect>\n`));const r=await s.default(Buffer.from(o)).png().toBuffer();return e.send(`[CQ:image,file=base64://${r.toString("base64")}]`)})),e.command("tools/ip <ip>","查询ip").action((async(e,t)=>{const o=`http://freeapi.ipip.net/${t}`;return(await i.default.get(o)).body.join(" ")})),e.command("tools/oeis <sequence>","使用 OEIS 进行数列查询",{maxUsage:10}).option("start","-s <start> 设置起始页码",{fallback:0}).usage("输入用逗号隔开的数作为要查询的数列的前几项，或者直接输入以 id:A 打头的数列编号。").example("oeis 1,2,3,6,11,23,47,106,235").example("oeis id:A000055").action((async({options:e,session:t},o)=>{const{body:n}=await i.default.get(`https://oeis.org/search?fmt=json&q=${o}&start=${e.start}`),a=r.filter(n.results,(e=>!e.name.startsWith("Duplicate")));for(const e of r.take(a,3))await t.sendQueued([`https://oeis.org/A${String(e.number).padStart(6,"0")}`,`${e.name}${e.id?` (${e.id})`:""}`,`${r.take(e.data.split(","),10).join(",")}`].join("\n"))})),e.command("tools/pornhub <text1> <text2>","生成PornHub风格Logo").action((async(t,o,n)=>{const i=await e.app.browser.newPage();await i.goto("https://www.dute.org/pornhub-logo"),await i.evaluate(((e,t)=>{document.getElementsByClassName("pornhub-prefix")[0].innerHTML=e,document.getElementsByClassName("pornhub-postfix")[0].innerHTML=t}),o,n);const a=await i.$(".screenshotable"),s=await a.screenshot({});return await i.close(),`[CQ:image,file=base64://${s.toString("base64")}]`})),u.existsSync("/usr/bin/wd")&&e.command("tools/dict <word>","使用无道词典查词").example("dict hello").alias("wd").action((async(t,o)=>{o=o.split("").filter((e=>/[-a-zA-Z0-9]/.test(e))).join("");const n=await p.default(`/usr/bin/wd ${o}`),i=await e.app.browser.newPage(),a=await d.text2png(i,n);return i.close(),`[CQ:image,file=base64://${a}]`}))}},7558:()=>{},2468:(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.apply=void 0;const getFirstPinyin=e=>(e.pinyin.split(/\s+/).shift()||"").replace(/[āáǎà]/g,"a").replace(/[ōóǒò]/g,"o").replace(/[ēéěèê]/g,"e").replace(/[īíǐì]/g,"i").replace(/[ūúǔù]/g,"u").replace(/[ǖǘǚǜü]/g,"v"),getLastPinyin=e=>(e.pinyin.split(/\s+/).pop()||"").replace(/[āáǎà]/g,"a").replace(/[ōóǒò]/g,"o").replace(/[ēéěèê]/g,"e").replace(/[īíǐì]/g,"i").replace(/[ūúǔù]/g,"u").replace(/[ǖǘǚǜü]/g,"v"),fix=e=>("味同嚼蜡"===e.word&&(e.pinyin=e.pinyin.replace("cù","là")),e.word.endsWith("俩")&&(e.pinyin=e.pinyin.replace("liǎng","liǎ")),e.pinyin=e.pinyin.replace(/yi([ēéěèêe])/g,"y$1"),e),indexed=e=>{const t={firstPinyin:{},lastPinyin:{},word:{}};for(const o of e)if(fix(o),4===o.word.length){const e=getLastPinyin(o),n=t.lastPinyin[e]||[];t.lastPinyin[e]=n,n.push(o);const i=getFirstPinyin(o),a=t.firstPinyin[i]||[];t.firstPinyin[i]=a,a.push(o),t.word[o.word]=o}let o=new Set(["yi"]);for(let e=1;o.size>0;++e){const n=new Set;o.forEach((o=>{for(const i of t.lastPinyin[o]||[])i.level||(i.level=e,n.add(getFirstPinyin(i)))})),o=n}return t},db=indexed(eval("require")(`${process.cwd()}/database/yiGeDingLia.json`)),handle=e=>{const t=[];let o=db.word[e];for(;o&&o.level;){const{level:e}=o;if(t.push(o),!(e>1))return t.push({word:"一个顶俩",pinyin:"yī gè dǐng liǎ"}),t;{const t=db.firstPinyin[getLastPinyin(o)].filter((t=>t.level&&t.level<e));o=t[Math.floor(Math.random()*t.length)]}}return t},apply=e=>{e.command("成语接龙 <成语>","成语接龙",{minInterval:1e3,checkArgCount:!1}).action(((e,t)=>{if(!t)return"请输入成语。";const o=handle(t);if(o.length){const e=[];for(const t in o)e.push(o[t].word," ");return e.join("")}}))};exports.apply=apply},5305:(e,t,o)=>{var n={"./autokick":6286,"./autokick.ts":6286,"./bilibili":1298,"./bilibili.ts":1298,"./bottle":2932,"./bottle.ts":2932,"./busybox":4454,"./busybox.ts":4454,"./calc":8342,"./calc.ts":8342,"./codeforces":6134,"./codeforces.ts":6134,"./dress":1916,"./dress.ts":1916,"./economy":5282,"./economy.ts":5282,"./eval":7276,"./eval.ts":7276,"./github":8394,"./github.ts":8394,"./glados":4819,"./glados.ts":4819,"./hearthstone":7780,"./hearthstone.ts":7780,"./httpcat":1263,"./httpcat.ts":1263,"./imagetag":5778,"./imagetag.ts":5778,"./jjwz":1925,"./jjwz.ts":1925,"./kabu":2179,"./kabu.ts":2179,"./luogu":1787,"./luogu.ts":1787,"./lxbot":7750,"./lxbot.ts":7750,"./ocr":1078,"./ocr.ts":1078,"./oier":8140,"./oier.ts":8140,"./proxy":5405,"./proxy.ts":5405,"./puppeteer":8414,"./puppeteer.ts":8414,"./run":3372,"./run.ts":3372,"./status":7088,"./status.ts":7088,"./sudo":9891,"./sudo.ts":9891,"./teach":475,"./teach.ts":475,"./tools":8424,"./tools.ts":8424,"./wordcloud":7558,"./wordcloud.ts":7558,"./ygdl":2468,"./ygdl.ts":2468};function i(e){var t=a(e);return o(t)}function a(e){if(!o.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}i.keys=function(){return Object.keys(n)},i.resolve=a,e.exports=i,i.id=5305},2293:e=>{"use strict";e.exports=require("../../.cache/hs_card_enUS.json")},9802:e=>{"use strict";e.exports=require("../../.cache/hs_card_zhCN.json")},4768:e=>{"use strict";e.exports=require("ansi_up")},2376:e=>{"use strict";e.exports=require("axios")},3129:e=>{"use strict";e.exports=require("child_process")},6417:e=>{"use strict";e.exports=require("crypto")},5747:e=>{"use strict";e.exports=require("fs")},4298:e=>{"use strict";e.exports=require("fs-extra")},6675:e=>{"use strict";e.exports=require("js-yaml")},8573:e=>{"use strict";e.exports=require("koishi-adapter-onebot")},9711:e=>{"use strict";e.exports=require("koishi-adapter-telegram")},8664:e=>{"use strict";e.exports=require("koishi-core")},4393:e=>{"use strict";e.exports=require("koishi-plugin-common")},9160:e=>{"use strict";e.exports=require("koishi-plugin-eval")},9636:e=>{"use strict";e.exports=require("koishi-plugin-image-search")},9585:e=>{"use strict";e.exports=require("koishi-plugin-mongo")},904:e=>{"use strict";e.exports=require("koishi-plugin-puppeteer")},9176:e=>{"use strict";e.exports=require("koishi-plugin-status")},663:e=>{"use strict";e.exports=require("koishi-plugin-teach")},9509:e=>{"use strict";e.exports=require("koishi-plugin-tools")},280:e=>{"use strict";e.exports=require("koishi-utils")},3804:e=>{"use strict";e.exports=require("lodash")},2470:e=>{"use strict";e.exports=require("moment")},7548:e=>{"use strict";e.exports=require("mongodb")},2087:e=>{"use strict";e.exports=require("os")},5622:e=>{"use strict";e.exports=require("path")},1703:e=>{"use strict";e.exports=require("pngjs")},742:e=>{"use strict";e.exports=require("sharp")},4515:e=>{"use strict";e.exports=require("superagent")},3680:e=>{"use strict";e.exports=require("superagent-proxy")},1669:e=>{"use strict";e.exports=require("util")}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var o=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(o.exports,o,o.exports,__webpack_require__),o.exports}__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var __webpack_exports__=__webpack_require__(9063)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,