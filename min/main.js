(()=>{var __webpack_modules__={7547:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.endOfToday=void 0;const i=n(o(2470));t.endOfToday=function(){return i.default().utc().add(8,"hours").endOf("day").subtract(8,"hours").toDate()}},2519:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.text2png=void 0;const i=new(n(o(4768)).default);t.text2png=async function(e,t){const o=`<pre style="font-family:'Source Code Pro', Consolas, 'Microsoft Yahei', HYShuaiXianTiW;font-size:14px;max-width:630px">${i.ansi_to_html(t)}</pre>`;let n,a;try{await e.setViewport({height:100,width:30}),await e.setContent(o);const t=await e.$("pre"),i=await e.evaluate((()=>{const e=document.getElementsByTagName("pre")[0];return{width:e.scrollWidth,height:e.scrollHeight}})),a=await t.boundingBox();await e.setViewport({width:Math.ceil(i.width+14),height:Math.ceil(a.height+14)}),n=await e.screenshot({})}catch(e){a=e}if(a)throw a;return(n||Buffer.from("")).toString("base64")}},9137:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.registerItem=t.Items=void 0,t.Items={fallback:{id:"fallback",weight:0,name:"未知物品",description:"未知物品"}},t.registerItem=function(e,o,n,i){t.Items[e]={id:e,weight:o,name:n,description:i}}},7286:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=o(3129);t.default=async function(e){let t;try{t=await new Promise(((t,o)=>{n.exec(e,((e,n,i)=>{e&&o(e),t(n+i)}))}))}catch(e){return e.toString()}return t.trim().length?t:"(execute success)"}},9063:function(module,__unused_webpack_exports,__webpack_require__){"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,o,n){void 0===n&&(n=o),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,n){void 0===n&&(n=o),e[n]=t[o]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&__createBinding(t,e,o);return __setModuleDefault(t,e),t},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};const path_1=__importDefault(__webpack_require__(5622)),koishi_core_1=__webpack_require__(8664),koishi_utils_1=__webpack_require__(280),fs_extra_1=__importDefault(__webpack_require__(4298)),KoishiPluginMongo=__importStar(__webpack_require__(9585));__webpack_require__(8573),__webpack_require__(9711),process.on("unhandledRejection",((e,t)=>{console.log("Unhandled Rejection:",t)})),koishi_utils_1.Logger.showDiff=!1,koishi_utils_1.Logger.showTime="MM-DD hh:mm:ss",koishi_core_1.Command.defaultConfig.checkArgCount=!0,String.prototype.decode=function(){return this.replace(/&#91;/gm,"[").replace(/&#93;/gm,"]").replace(/&amp;/gm,"&")},String.prototype.encode=function(){return this.replace(/&/gm,"&amp;").replace(/\[/gm,"&#91;").replace(/\]/gm,"&#93;")},koishi_core_1.Session.prototype.executeSilent=function(e,t){return this._silent=!0,this.send=koishi_utils_1.noop,this.sendQueued=koishi_utils_1.noop,this.execute(e,t)};class Main{constructor(e){this.logger=new koishi_utils_1.Logger("main"),this.config=e.config,this.app=new koishi_core_1.App({port:this.config.port,bots:this.config.bots,type:this.config.type,onebot:this.config.onebot,telegram:this.config.telegram,prefix:this.config.prompt,autoAuthorize:1,autoAssign:!0,minSimilarity:.7}),this.run()}async run(){fs_extra_1.default.ensureDirSync(path_1.default.resolve(__dirname,"..",".cache")),this.app.plugin(KoishiPluginMongo,this.config.db),this.app.on("connect",(async()=>{for(const e of this.config.admin){const t=e.split("&");let o;for(const e of t){const[t,n]=e.split(":");await this.app.database.getUser(t,n)&&(o=[t,n])}const n=Object.assign({},...t.map((e=>e.split(":"))).map((e=>({[e[0]]:e[1]}))));o&&this.app.database.setUser(o[0],o[1],{...n,authority:5,sudoer:!0}),this.logger.info(`Opped ${e}`)}})),await this.load(),await this.app.start()}async load(){for(const plugin of this.config.enabledplugins)try{if("string"==typeof plugin)if(plugin.startsWith("~")){let e=__webpack_require__(5305)(`./${plugin.split("~")[1]}`);e.name||(e.apply?e.name=plugin.split("~")[1]:e={name:plugin.split("~")[1],apply:e}),this.app.plugin(e)}else this.app.plugin(eval("require")(plugin).apply);else if(plugin instanceof Array)if(plugin[0].startsWith("~")){let e=__webpack_require__(5305)(`./${plugin[0].split("~")[1]}`);e.name||(e.apply?e.name=plugin[0].split("~")[1]:e={name:plugin[0].split("~")[1],apply:e}),this.app.plugin(e,plugin[1])}else this.app.plugin(eval("require")(plugin[0]),plugin[1])}catch(e){this.logger.error("Failed to load ",plugin,e)}}}global.Main=Main,module.exports=Main},6286:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=o(8664),a=o(3804),r=n(o(2470));i.Channel.extend((()=>({kick:0}))),t.apply=async function(e){e.select("platform","onebot").command("autokick <count>","",{hidden:!0,authority:4}).channelFields(["kick"]).action((async({session:e},t)=>(e.channel.kick=+t,`set to ${t}`))),e.app.on("connect",(()=>{const t=e.app.database.mongo.collection("autokick");e.select("platform","onebot").command("autokick.run","",{hidden:!0,authority:4}).channelFields(["kick"]).option("dry","dry run",{authority:2}).action((async({session:e,options:o})=>{const n=await e.bot.getGroup(e.groupId);let i=await e.bot.$getGroupMemberList(n.groupId);const s=(await t.find({groupId:e.groupId}).toArray()).map((e=>e.userId));if(i=a.filter(i,(e=>!s.includes(e.userId))),e.channel.kick&&e.channel.kick<i.length){let s;i=a.sortBy(i.map((e=>({...e,sort:Math.max(e.lastSentTime,e.joinTime)}))),"sort");for(const o of i){if(!await t.findOne({groupId:e.groupId,userId:o.userId})){s=o;break}}await e.send([`将 ${s.nickname||s.card} (${s.userId}) 移出群`,`（${r.default(1e3*s.joinTime||0).fromNow()}加入，上次发言 ${r.default(1e3*s.lastSentTime||0).fromNow()}）`].join("\n")),o.dry||await Promise.all([e.bot.$setGroupKick(n.groupId,s.userId),t.insertOne({groupId:e.groupId,userId:s.userId})])}}))}))}},1298:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(4515)),a={};for(let e=0;e<58;e++)a["fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF"[e]]=e;const r=[11,10,3,8,4,6],s=["B","V","1","","","4","","1","","7","",""];function c(e){if(12!==e.length||(e[0]+e[1]+e[2]+e[5]+e[7]+e[9]).toUpperCase()!==s.join(""))return null;let t=0;for(let o=0;o<6;o++)t+=a[e[r[o]]]*58**o;return t=t-8728348608^177451812,t>0&&t<1e9?t:null}const u=[[/(BV[0-9a-zA-Z]{10})/gim,e=>c(e[1])],[/av([0-9]+)/gim,e=>parseInt(e[1],10)],[/b23\.tv\/([a-zA-Z0-9]+)/gim,async e=>{const t=`https://b23.tv/${e[1]}`;return c((await new Promise((e=>{i.default.get(t).buffer(!1).end(((o,n)=>{e(n.redirects.length?n.redirects.pop():t)}))}))).split("video/")[1].split("?")[0])}]];t.apply=e=>{e.command("bilibili <avid>",{hidden:!0}).action((async({session:e},t)=>{const o=await i.default.get(`http://api.bilibili.com/x/web-interface/view?aid=${t}`);0===o.body.code&&await e.send(`bilibili.com/video/av${t}\n${o.body.data.title}\n[CQ:image,file=${o.body.data.pic}]`)})),e.middleware((async(e,t)=>{let o;await t();for(const t of u){const n=t[0].exec(e.content);if(n){const e=t[1](n);o=e instanceof Promise?await e:e;break}}o&&await e.execute(`bilibili ${o}`)}))}},2932:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;t.apply=e=>{e.on("connect",(async()=>{const t=e.database.mongo.collection("bottle");e.command("bottle.throw <content:text>","丢漂流瓶",{noRedirect:!0}).alias("丢漂流瓶").userFields(["id"]).action((async({session:e},o)=>`已丢出。(${(await t.insertOne({groupId:`${e.platform}:${e.groupId}`,userId:+e.user.id,content:o.trim(),pick:0})).insertedId})`)),e.command("bottle.pick","捡漂流瓶").alias("捡漂流瓶").action((async()=>{const e=await t.find({}).count();if(!e)return"没有捡到";const o=Math.floor(Math.random()*e),[n]=await t.find({}).skip(o).limit(1).toArray();return Math.random()>.5?await t.deleteOne({_id:n._id}):await t.updateOne({_id:n._id},{$inc:{pick:1}}),`被捡起 ${n.pick+1} 次\n时间：${new Date(1e3*n._id.generationTime).toLocaleString()}\n内容：${n.content}`})),e.command("bottle.del <query:text>",{authority:5,hidden:!0}).action((async(e,o)=>(await t.deleteMany(JSON.parse(o.decode()))).deletedCount.toString()))})),e.command("bottle","漂流瓶")}},4454:function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,o,n){void 0===n&&(n=o),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,n){void 0===n&&(n=o),e[n]=t[o]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&__createBinding(t,e,o);return __setModuleDefault(t,e),t},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.apply=void 0;const child_process_1=__importDefault(__webpack_require__(3129)),util_1=__webpack_require__(1669),koishi_core_1=__webpack_require__(8664),KoishiPluginCommon=__importStar(__webpack_require__(4393)),moment_1=__importDefault(__webpack_require__(2470)),graph_1=__webpack_require__(2519),shell_1=__importDefault(__webpack_require__(7286));koishi_core_1.Channel.extend((()=>({disallowedCommands:[]})));const groupMap={},userMap={};async function getGroupName(e){if("private"===e.subtype)return"私聊";const t=Date.now(),o=e.channelId;if(!groupMap[o]||t-groupMap[o][1]>=koishi_core_1.Time.hour){const n=e.bot.getGroup(o).then((e=>e.groupName),(()=>o));groupMap[o]=[n,t]}let n=await groupMap[o][0];return n!==`${o}`&&(n+=` (${o})`),n}async function formatMessage(e){const t=koishi_core_1.segment.parse(e.content);let o="";for(const n of t)if("string"==typeof n)o+=n;else if("text"===n.type)o+=n.data.content;else if("at"===n.type)if("all"===n.data.qq)o+="@全体成员";else{const t=n.data.qq,i=Date.now();if(!userMap[t]||i-userMap[t][1]>=koishi_core_1.Time.hour){const o=e.bot.getGroupMember(e.groupId,t).then((e=>e.nickname||e.username),(()=>t));userMap[t]=[o,i]}o+=`@${await userMap[t][0]}`}else"face"===n.type?o+=`[face ${n.data.id}]`:"image"===n.type?o+=`[image ${(n.data.url||"").split("?")[0]}]`:"reply"===n.type?o+=`[reply ${n.data.id}]`:o+=`[${n.type}]`;return o}const checkGroupAdmin=async({session:e})=>{var t,o;return e.user.authority>=4||(null===(t=e.author.roles)||void 0===t?void 0:t.includes("admin"))||(null===(o=e.author.roles)||void 0===o?void 0:o.includes("owner"))?null:"仅管理员可执行该操作。"},apply=(ctx,config={})=>{var _a,_b;const logger=new koishi_core_1.Logger("busybox");koishi_core_1.Logger.levels.message=3,koishi_core_1.Time.setTimezoneOffset(null!==(_a=config.timezoneOffset)&&void 0!==_a?_a:-480),config.recordMessage=null===(_b=config.recordMessage)||void 0===_b||_b,ctx.plugin(KoishiPluginCommon,{}),ctx.command("help",{authority:1,hidden:!0}),ctx.command("tex",{authority:1}),ctx.command("_","管理工具"),ctx.select("groupId").command("_.assign","assign",{authority:4}).channelFields(["assignee"]).action((async({session:e})=>{e.channel.assignee=e.selfId.toString()})),ctx.command("_.echo <msg:text>","echo",{noRedirect:!0,authority:3}).action(((e,t)=>t.decode())),ctx.command("_.eval <expr:text>",{authority:5,noRedirect:!0,hidden:!0}).option("i","Output as image").userFields(koishi_core_1.User.fields).channelFields(koishi_core_1.Channel.fields).action((async({session,options},input)=>{let res;const expr=`        (async function f() {\n            return ${input.decode()}\n        })()`;try{res=await eval(expr)}catch(e){res=e}const output=util_1.inspect(res,!1,3);if(!options.i)return output;const page=await ctx.app.puppeteer.page(),img=await graph_1.text2png(page,output);return page.close(),`[CQ:image,file=base64://${img}]`})),ctx.command("_.sh <command:text>","执行shell命令",{authority:5,noRedirect:!0}).option("i","Output as image").action((async({options:e},t)=>{const o=await shell_1.default(t.decode());if(!e.i)return o;const n=await ctx.app.puppeteer.page(),i=await graph_1.text2png(n,o);return n.close(),`[CQ:image,file=base64://${i}]`})),ctx.command("_.shutdown","关闭机器人",{authority:5,noRedirect:!0}).action((()=>(setTimeout((()=>{process.env.pm_id?child_process_1.default.exec(`pm2 stop ${process.env.pm_id}`):process.exit(0)}),3e3),"Exiting in 3 secs..."))),ctx.command("_.restart","重启机器人",{authority:5,noRedirect:!0}).action((()=>process.env.pm_id?(setTimeout((()=>{child_process_1.default.exec(`pm2 restart ${process.env.pm_id}`)}),3e3),"Restarting in 3 secs..."):"Cannot restart: not pm2 environment")),ctx.select("platform").command("_.leave","退出该群",{noRedirect:!0}).userFields(["authority"]).check(checkGroupAdmin).action((async({session:e})=>{await e.bot.$setGroupLeave(e.groupId)})),ctx.command("_.boardcast <message:text>","全服广播",{authority:5,noRedirect:!0}).option("forced","-f 无视 silent 标签进行广播").action((async({options:e,session:t},o)=>{if(!o)return"请输入要发送的文本。";let n=await ctx.database.getAssignedChannels(["id","flag"]);e.forced||(n=n.filter((e=>!(e.flag&koishi_core_1.Channel.Flag.silent)))),n.forEach((e=>{t.bot.sendMessage(e.id,o)}))})),ctx.command("contextify <command:text>","在特定上下文中触发指令",{authority:4,noRedirect:!0}),ctx.command("_.deactivate","在群内禁用",{noRedirect:!0}).userFields(["authority"]).check(checkGroupAdmin).channelFields(["flag"]).action((({session:e})=>(e.channel.flag|=koishi_core_1.Channel.Flag.ignore,"Deactivated"))),ctx.command("_.activate","在群内启用",{noRedirect:!0}).userFields(["authority"]).check(checkGroupAdmin).channelFields(["flag"]).action((({session:e})=>(e.channel.flag&=~koishi_core_1.Channel.Flag.ignore,"Activated"))),ctx.command("switch",{authority:1}).check(checkGroupAdmin),ctx.command("_.mute <user> <periodSecs>","禁言用户",{noRedirect:!0}).userFields(["authority"]).check(checkGroupAdmin).action((({session:e},t,o="600000")=>e.bot.$setGroupBan(e.groupId,t,parseInt(o,10)))),ctx.on("message",(async e=>{const t=await getGroupName(e),o=`${e.username}(${e.userId})`,n=await formatMessage(e);if(logger.info(`[${t}] ${o}: ${n}`),e.groupId&&">_.activate"===e.content){if((await ctx.database.getUser(e.platform,e.userId)).authority>=4||e.author.roles.includes("admin")||e.author.roles.includes("owner")){const t=(await ctx.database.getChannel(e.platform,e.groupId)).flag&~koishi_core_1.Channel.Flag.ignore;await ctx.database.setChannel(e.platform,e.groupId,{flag:t}),await e.send("Activated")}else await e.send("您没有权限执行该操作")}})),ctx.on("before-send",(e=>{Promise.all([getGroupName(e),formatMessage(e)]).then((([t,o])=>logger.info(`send [${t}] ${e.selfId}: ${o}`)))})),ctx.on("group-member/ban",(e=>{e.userId.toString()===e.selfId.toString()&&console.log(e)})),ctx.on("group-member-added",(async e=>{const t=await e.app.database.getChannel(e.platform,e.groupId);logger.info("Event.Group_Increase",e,t),t.welcomeMsg&&await e.send(t.welcomeMsg.replace(/%@/gim,`[CQ:at,qq=${e.userId}`))})),ctx.on("group-member-deleted",(async e=>{const t=await ctx.database.getUser(e.platform,e.userId);logger.info("Event.Group_Decrease",e,t),e.send(`${e.username} 退出了群聊。`)})),ctx.on("before-attach-user",((e,t)=>{t.add("id")})),ctx.app.on("friend-request",(e=>e.bot.$setFriendAddRequest(e.messageId,!0))),ctx.app.on("group-request",(async e=>{const t=await ctx.database.getUser(e.platform,e.userId);(config.public||[]).includes(`${e.platform}:${e.selfId}`)||5===(null==t?void 0:t.authority)?(logger.info("Approve Invite Request",e,t),e.bot.$setGroupAddRequest(e.messageId,e.subtype,!0)):(logger.info("Denied Invite Request",e,t),e.bot.$setGroupAddRequest(e.messageId,e.subtype,!1,"此账号不对外开放，请使用其他账号。"))})),ctx.on("connect",(async()=>{const e=ctx.database.mongo.collection("message");logger.info("Ensuring index..."),await e.createIndex({time:-1,group:1,user:1}),logger.info("Done."),ctx.command("_.recall","撤回消息").userFields(["authority"]).check(checkGroupAdmin).option("count","-c <count> 数量",{fallback:1}).action((async({session:t,options:o})=>{const n=await t.app.database.getUser(t.platform,t.selfId.toString()),i=await e.find({group:t.groupId,sender:+n.id}).sort({time:-1}).limit(o.count).toArray();logger.info("deleting message: %o",i);for(const e of i)await t.bot.deleteMessage(t.groupId,e.id)})),ctx.command("_.stat [duration]","stat").option("total","-t Total").action((async({session:t,options:o},n="1day")=>{const[,i="1",a]=/(\d+)?(\w+)/.exec(n),r=`${t.platform}:${t.groupId}`,s=await t.app.database.getUser(t.platform,t.selfId.toString()),c=o.total?{}:{time:{$gt:moment_1.default().add(-i,a).toDate()}},u=await e.find({...c,sender:+s.id}).count(),l=await e.find({...c,group:r,sender:+s.id}).count(),d=await e.find({...c,sender:{$ne:+s.id}}).count(),p=await e.find({...c,group:r,sender:{$ne:+s.id}}).count();return`统计信息${o.total?"（总计）":`（${n}）`}\n发送消息${u}条，本群${l}条。\n收到消息${d}条，本群${p}条。`})),ctx.command("_.rank [duration]","rank").option("total","Total").action((async({session:t,options:o},n="1day")=>{var i;const[,a="1",r]=/(\d+)?(\w+)/.exec(n),s=`${t.platform}:${t.groupId}`,c=o.total?{group:s}:{time:{$gt:moment_1.default().add(-a,r).toDate()},group:s},u=await e.aggregate([{$match:c},{$group:{_id:"$sender",count:{$sum:1}}},{$sort:{count:-1}},{$limit:10}]).toArray(),l=await t.app.database.getUser("id",u.map((e=>e._id)),[t.platform,"name"]),d={};for(let e=0;e<u.length;e++){const o=u[e];try{d[o._id]=await t.bot.getGroupMember(t.groupId,l[e][t.platform])}catch(t){d[o._id]={username:(null===(i=l[e])||void 0===i?void 0:i.name)||o._id,nickname:""}}}return`群成员发言排行${o.total?"（共计）":`（${n}）`}\n${u.map((e=>`${d[e._id].nickname||d[e._id].username} ${e.count}条`)).join("\n")}`})),config.recordMessage&&(ctx.middleware(((t,o)=>{if(!t.groupId)return o();const n=`${t.platform}:${t.groupId}`;e.insertOne({group:n,message:t.content,sender:+t.user.id,time:new Date,id:t.messageId})})),ctx.on("send",(async t=>{if(!t.groupId)return;const o=`${t.platform}:${t.groupId}`,n=await t.app.database.getUser(t.platform,t.selfId.toString(),["id"]);e.insertOne({time:new Date,sender:+n.id,group:o,message:t.content,id:t.messageId})})))}))};exports.apply=apply},8342:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(2376));t.apply=function(e){e.command("tools/calc <expr:text>","calc",{minInterval:2e3}).shortcut(/^\?([\s\S]+)$/,{args:["$1"]}).option("full","-f, --full full output").option("raw","-r, --raw raw input",{authority:5}).example("calc 1+1").example("calc Solve[x^2+1==0,{x}]").example("calc FactorInteger[233333]").action((async({session:e,options:t},o)=>{const{data:n}=await i.default.post("http://127.0.0.1:10378/",{raw:t.raw?"1":null,input:o.decode(),type:t.full?"Image":"Result"});if(!n.startsWith("<?xml"))return n;const a=await e.app.puppeteer.page();await a.setContent(n);const r=await a.$("svg"),s=await a.screenshot({clip:await r.boundingBox()});return a.close(),`[CQ:image,file=base64://${s.toString("base64")}]`})),e.command("tools/calc.zebra <image:image>","Horse to Zebra",{minInterval:2e3})}},6134:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(4515)),a=o(3804);t.apply=function(e){e.command("oi","OI related"),e.command("oi/cf","Codeforces"),e.command("oi/cf.user <name>","Codeforces User",{minInterval:3e3}).action((async(e,t)=>{const o=await i.default.get(`https://codeforces.com/api/user.info?handles=${t}`).catch((()=>{}));if(!o)return"CF 挂了！";if("FAILED"===o.body.status)return"没这个人!";const n=o.body.result[0];return`${n.handle} ${n.firstName||""} ${n.lastName||""} ${n.organization||""}\n[CQ:image,file=https:${n.avatar}]\nRating: ${n.rating}\nRank: ${n.rank}\nMaxRating: ${n.maxRating}\nMaxRank: ${n.maxRank}`})),e.command("oi/cf.contest","Codeforces Contest",{minInterval:3e3}).action((async()=>{const e=await i.default.get("https://codeforces.com/api/contest.list").catch((()=>{}));if(!e||"OK"!==e.body.status)return"CF 挂了！";const t=(new Date).getTime(),o=a.filter(e.body.result,(e=>1e3*e.startTimeSeconds>t));let n="最近的比赛：\n";for(let e=o.length-1;e>=Math.max(o.length-5,0);e--){const t=o[e];n+=`${t.name} ${new Date(1e3*t.startTimeSeconds).toLocaleString()}\n`}return n}))}},1916:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(4515));t.apply=function(e){e.command("github/dress <path>","komeiji-satori/Dress").example("dress wuxianucw/001.jpg").action((async({session:e},t)=>{try{const o=await i.default.get(`https://cdn.jsdelivr.net/gh/komeiji-satori/Dress/${t}`).buffer();await e.send(`[CQ:image,file=base64://${o.body.toString("base64")}]`)}catch(e){return e.toString()}}))}},5282:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const n=o(8664),i=o(9137);function a(...e){let t=0;for(const o of e)t+=o;return t}n.User.extend((()=>({coin:0,backpack:[]}))),t.apply=function(e){e.command("property","财产系统"),e.command("property/backpack","背包").userFields(["backpack"]).action((({session:e})=>e.user.backpack.length?[`你的背包共${a(...e.user.backpack.map((e=>e.count)))}个物品。`,...e.user.backpack.map((e=>`${(i.Items[e.id]||i.Items.fallback).name} * ${e.count}`))].join("\n"):"你的背包是空的！")),e.command("property/checkin","签到",{maxUsage:1}).shortcut("签到",{prefix:!1}).userFields(["coin"]).action((async({session:e})=>{const t=20+Math.floor(10*Math.random());return e.user.coin+=t,`签到成功，获得${t}个硬币（共有${e.user.coin}个）`})),e.command("property/pay <targetUserId> <count>","转账",{noRedirect:!0}).userFields(["coin"]).action((async({session:t},o,i)=>{const a=parseInt(i,10);if(!(Number.isSafeInteger(a)&&a>0))return"不合法的数值。";if(t.user.coin<a)return"你没有足够的硬币。";if(!o)return"未指定目标。";const r=new n.Session(e,t);r.userId=o,r.author.userId=o,delete r.user;const s=await r.observeUser(["coin"]);return t.user.coin-=a,s.coin+=a,await r.user._update(),`已转账${a}个硬币。`}))}},7276:function(e,t,o){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,o,n){void 0===n&&(n=o),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,n){void 0===n&&(n=o),e[n]=t[o]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&n(t,e,o);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const r=o(8664),s=a(o(9160)),c=o(280),u=o(2519);t.apply=function(e,t){e.plugin(s,t),e.on("eval/before-send",(async(t,o)=>{if(o.__sendCount=(o.__sendCount||0)+1,o.__sendCount>3)return"";if(c.segment.parse(t).filter((e=>"text"===e.type)).map((e=>e.data.content)).join("").length>512){const o=await e.puppeteer.page(),n=await u.text2png(o,t);return c.s("image",{file:`base64://${n}`})}return t})),e.command("evaluate").option("i","Output as image",{hidden:!0}).userFields(r.User.fields).channelFields(r.Channel.fields).check((({session:e})=>{if(!e._sudo)return;const t=e.argv.args[0].replace("eval ","");return e.argv.options.i&&e.execute(`_.eval -i ${t}`),e.execute(`_.eval ${t}`),""})),e.command("API <name> [arg0] [arg1] [arg2] [arg3]",{authority:5}).action((async({session:e},t,...o)=>{const n=await e.bot[t](...o);return JSON.stringify(n)})),e.command("@","utils",{hidden:!0}),e.command("@.silent <command:text>",{hidden:!0}).action((({session:e},t)=>e.executeSilent(t))),e.command("@.sleep <duration> <command:text>",{hidden:!0}).action((async({session:e},t,o)=>{let n=Math.min(1e4,+t);!Number.isNaN(n)&&n||(n=0),await c.sleep(n),await e.execute(o)}))}},8394:function(e,t,o){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,o,n){void 0===n&&(n=o),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,n){void 0===n&&(n=o),e[n]=t[o]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&n(t,e,o);return i(t,e),t},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const s=r(o(6417)),c=a(o(4515)),u=r(o(3680)),l=o(280);u.default(c);const d=new l.Logger("github");class p extends Error{}function m(e){return e.replace(/^```(.*)$/gm,"").replace(/^<!--(.*)-->$/gm,"").replace(/\n\s*\n/g,"\n").replace(/(\r?\n *)+/gim,"\n")}async function f(e,t,o,n){const i=await e.page();try{await i.goto(t,{waitUntil:"networkidle0"});const e=await i.$(o);let a=await e.boundingBox();await i.setViewport({height:Math.ceil(a.y+a.height+50),width:1080}),a=await e.boundingBox(),a={x:a.x-n[0],y:a.y-n[1],width:a.width+n[2],height:a.height+n[3]};const r=await i.screenshot({encoding:"base64",clip:a});return await i.close(),r}catch(e){throw await i.close(),e}}t.apply=(e,t)=>{function o(e){return c.post(e).proxy(t.proxy).set("Accept","application/vnd.github.v3+json").set("User-Agent","HydroBot")}async function n(n,i,a,r){if(n.includes("!!link"))return[a.link];const s=await r();if(n.includes("!!merge")){const e=n.split("!!merge")[1];return await(u=`https://api.github.com/repos/${a.reponame}/pulls/${a.issueId}/merge`,c.put(u).proxy(t.proxy).set("Accept","application/vnd.github.v3+json").set("User-Agent","HydroBot")).set("Authorization",`token ${s}`).send({commit_title:e.trim()}),[]}var u;if(n.includes("!!approve"))return await o(`https://api.github.com/repos/${a.reponame}/pulls/${a.issueId}/reviews`).set("Authorization",`token ${s}`).send({event:"APPROVE"}),[];if(n.includes("!!diff")){return[`[CQ:image,file=base64://${await f(e.puppeteer,`${a.link}/files`,".files-bucket",[0,0,0,0])}]`]}return await o(`https://api.github.com/repos/${a.reponame}/issues/${a.issueId}/comments`).set("Authorization",`token ${s}`).send({body:n}),[]}e.on("connect",(()=>{const o=e.database.mongo.collection("github_watch"),i=e.database.mongo.collection("github_data"),a={push:{async hook(e){const o=e.ref.split("/")[2],n=e.head_commit?e.head_commit.author.username:e.sender.login;let i=0,a=0,r=0,s=`Recent commit to ${e.repository.full_name}${"master"===o?"":`:${o}`} by ${n}`;if(t.sourcegraph)try{const o=await c.post("https://sourcegraph.com/.api/graphql").set("Authorization",`token ${t.sourcegraph}`).send({query:`query{\nrepository(name:"github.com/${e.repository.full_name}"){\n  comparison(base:"${e.before}",head:"${e.after}"){\n    fileDiffs{nodes{stat{added changed deleted}}}\n  }\n}\n}`});if(o.body.data)if(o.body.data.repository){const e=o.body.data.repository.comparison.fileDiffs.nodes;for(const t of e)i+=t.stat.added||0,a+=t.stat.deleted||0,r+=t.stat.changed||0}else d.info("Repo not found: %s",e.repository.full_name);else d.info(o.body)}catch(e){d.error(e)}if((i||a||r)&&(s+=`\n${i}+ ${a}- ${r}M`),e.commits.length<5)for(const t of e.commits){const e=[];t.added.length&&e.push(`${t.added.length}+`),t.removed.length&&e.push(`${t.removed.length}-`),t.modified.length&&e.push(`${t.modified.length}M`),s+=`\n${t.id.substr(0,6)} ${m(t.message).replace(/\n/g,"\r\n")} (${e.join(" ")})`}else{let t=e.commits[0],o=[];t.added.length&&o.push(`${t.added.length}+`),t.removed.length&&o.push(`${t.removed.length}-`),t.modified.length&&o.push(`${t.modified.length}M`),s+=`\n${t.id.substr(0,6)} ${m(t.message).replace(/\n/g,"\r\n")} (${o.join(" ")})`,s+=`\n...${e.commits.length-2} commits omitted...`,t=e.commits[e.commits.length-1],o=[],t.added.length&&o.push(`${t.added.length}+`),t.removed.length&&o.push(`${t.removed.length}-`),t.modified.length&&o.push(`${t.modified.length}M`),s+=`\n${t.id.substr(0,6)} ${m(t.message).replace(/\n/g,"\r\n")} (${o.join(" ")})`}return[s,{link:e.compare}]},async interact(t,o,n){if(t.includes("!!link"))return[n.link];if(t.includes("!!diff")){return[`[CQ:image,file=base64://${await f(e.puppeteer,n.link,".files-bucket",[0,0,0,0])}]`]}return[]}},fork:{merge:!0,hook:async e=>"created"===e.action?[`${e.sender.login} forked ${e.repository.full_name}`]:[]},issues:{merge:e=>`${e.repository.full_name}/${e.issue.number}`,async hook(t){var o;let n;if("opened"===t.action||"edited"===t.action){n=`${t.sender.login} ${t.action} issue ${t.repository.full_name}#${t.issue.number}`;try{const o=await f(e.puppeteer,t.issue.html_url,".js-discussion",[68,130,92,130]);n+=`\n${l.segment.image(`base64://${o}`)}`}catch(e){new l.Logger("puppeteer").warn(e),n+=`\n${m(t.issue.title)}\n${m(t.issue.body||"")}`}}else if("assigned"===t.action)n=`${t.repository.full_name}#${t.issue.number}: Assigned ${t.assignee.login}`;else if("unassigned"===t.action)n=`${t.repository.full_name}#${t.issue.number}: Unassigned ${t.assignee.login}`;else if("closed"===t.action)n=`${t.sender.login} closed ${t.repository.full_name}#${t.issue.number}.`;else if(["reopened","locked","unlocked"].includes(t.action))n=`${t.sender.login} ${t.action} Issue:${t.repository.full_name}#${t.issue.number}`;else{if("labeled"===t.action)return[];n=`Unknown issue action: ${t.action}`}return[n,{link:(null===(o=t.comment)||void 0===o?void 0:o.html_url)||t.issue.html_url,reponame:t.repository.full_name,issueId:t.issue.number}]},async interact(e,o,n,i){if(e.includes("!!link"))return[n.link];const a=await i();var r;return await(r=`https://api.github.com/repos/${n.reponame}/issues/${n.issueId}/comments`,c.get(r).proxy(t.proxy).set("Accept","application/vnd.github.v3+json").set("User-Agent","HydroBot")).set("Authorization",`token ${a}`).send({body:e}),[]}},issue_comment:{merge:e=>`${e.repository.full_name}/${e.issue.number}`,async hook(t){let o;if("created"===t.action||"edited"===t.action){if("codecov[bot]"===t.comment.user.login)return[];o=`${t.comment.user.login} ${"created"===t.action?"commented":"edited a comment"} on ${t.repository.full_name}#${t.issue.number}\n${t.issue.title}`;try{const n=await f(e.puppeteer,t.issue.html_url,`#${t.comment.html_url.split("#")[1]}`,[86,14,92,20]);o+=`\n${l.segment.image(`base64://${n}`)}`}catch(e){new l.Logger("puppeteer").warn(e),o+=`\n${m(t.comment.body)}`}}return[o,{link:t.issue.html_url,reponame:t.repository.full_name,issueId:t.issue.number}]},interact:n},pull_request:{merge:e=>`${e.repository.full_name}/${e.pull_request.number}`,async hook(t){let o;const{full_name:n,owner:i}=t.repository,{user:a,html_url:r,title:s,base:c,head:u,number:d,merged:p}=t.pull_request,g=new RegExp(`^${i.login}:`),h=c.label.replace(g,""),_=u.label.replace(g,"");if("opened"===t.action){o=`${a.login} opened an pull request for ${n}#${d}(${h}<${_})`;try{const t=await f(e.puppeteer,r,".js-discussion",[68,160,92,160]);o+=`\n${l.segment.image(`base64://${t}`)}`}catch(e){new l.Logger("puppeteer").warn(e),o+=`\n${s}`,o+=`\n${m(t.pull_request.body||"")}`}}else if("created"===t.action)o=`${a.login} commented on ${n}#${d}(${h}<${_})`,o+=`\n${t.comment.body}`;else if("assigned"===t.action)o=`${n}#${d}: Assigned ${t.assignee.login}`;else if("unassigned"===t.action)o=`${n}#${d}: Unassigned ${t.assignee.login}`;else if("review_requested"===t.action)o=`${n}#${d}: Request a review.`;else if("closed"===t.action){const e=p?"merged":"closed";o=`${t.sender.login} ${e} ${n}#${d}(${h}<${_})`}else o=["reopened","locked","unlocked"].includes(t.action)?`${t.sender.login} ${t.action} PR:${n}#${d}`:["synchronize"].includes(t.action)?"":"ready_for_review"===t.action?`${n}#${d} is ready for review.`:`Unknown pull request action: ${t.action}`;return[o,{link:r,reponame:n,issueId:d}]},interact:n},pull_request_review:{merge:!0,hook:async e=>"commented"===e.review.state?[]:"approved"===e.review.state?[`${e.sender.login} approved ${e.repository.full_name}#${e.pull_request.number}`]:[void 0,{link:e.pull_request.html_url,reponame:e.repository.full_name,issueId:e.pull_request.number}],interact:n},pull_request_review_comment:{merge:!0,async hook(e){let t="";return"created"===e.action&&(t=`${e.comment.user.login} commented on ${e.repository.full_name}#${e.pull_request.number}\n`,t+=m(e.comment.body)),[t,{link:e.pull_request.html_url,reponame:e.repository.full_name,issueId:e.pull_request.number}]},interact:n},star:{merge:!0,hook:async e=>"created"===e.action?await i.findOne({type:"star",user:e.sender.login,repo:e.repository.full_name})?[]:[`${e.sender.login} starred ${e.repository.full_name} (total ${e.repository.stargazers_count} stargazers)`,{user:e.sender.login,repo:e.repository.full_name}]:[]},watch:{merge:!0,hook:async e=>"created"===e.action?await i.findOne({type:"watch",user:e.sender.login,repo:e.repository.full_name})?[]:[`${e.sender.login} is watching ${e.repository.full_name} (total ${e.repository.watchers_count} watchers)`,{user:e.sender.login,repo:e.repository.full_name}]:[]},project_card:{},project_column:{},check_run:{},check_suite:{},repository_vulnerability_alert:{},status:{},label:{},deployment_status:{},deployment:{},page_build:{}};e.router.post("/github",(async t=>{try{const r=t.request.headers["x-github-event"];let c;c="string"==typeof t.request.body.payload?JSON.parse(t.request.body.payload):t.request.body;const u=(n=JSON.stringify(c),s.default.createHash("sha256").update(n).digest("hex"));if(a[r]||(a[r]={hook:e=>Promise.resolve([`${e.repository.full_name} triggered an unknown event: ${r}`])}),a[r].hook){const n=c.repository.full_name,[s,l]=await a[r].hook(c);if(await i.findOne({_id:u}))t.body="Duplicate event";else{let a=[];if(s){const t=await o.findOne({_id:n.toLowerCase()});if(t)for(const o of t.target){const[t,n]=o.split(":"),i=await e.database.getChannel(t,n,["assignee"]);i.assignee&&e.bots[`${t}:${i.assignee}`]?a.push(e.bots[`${t}:${i.assignee}`].sendMessage(n,s)):d.warn("Cannot send message to %s:%d with assignee %d",t,o,i.assignee)}a=await Promise.all(a),await i.insertOne({_id:u,type:r,relativeIds:a,...l})}t.body=`Pushed to ${a.length} group(s)`}}else t.body="Event ignored."}catch(e){console.log(e),t.body=e.toString()}var n})),e.router.get("/github/authorize",(async o=>{const[n,i]=o.query.state.split(":"),a=o.query.code,r=await c.post("https://github.com/login/oauth/access_token").proxy(t.proxy).send({client_id:t.client_id,client_secret:t.client_secret,code:a,redirect_uri:t.redirect_uri,state:o.query.state});r.body.access_token?(await e.database.setUser(n,i,{GithubToken:r.body}),o.body="Done"):o.body="Error"})),e.middleware((async(o,n)=>{if(!o.quote)return n();const r=o.parsed.content.replace(/\[CQ:at,.*\]/g,"").replace(/\[CQ:image,file=(.*)\]/g,(e=>` ![](${/\[CQ:image,file=(.*)\]/g.exec(e)[1]}) `)).decode().trim();if(!r)return n();const[s,u]=await Promise.all([i.findOne({relativeIds:o.quote.messageId}),e.database.getUser(o.platform,o.userId,["GithubToken"])]);if(s&&a[s.type].interact){if(d.info(r),d.info("Reply: %s",s),r.startsWith("//"))return n();try{let n;try{n=await a[s.type].interact(r.trim(),o,s,(async function(){var n;if(!(null===(n=u.GithubToken)||void 0===n?void 0:n.access_token))throw new p;if(200!==(await c.get("https://api.github.com/").proxy(t.proxy).set("Authorization",`token ${u.GithubToken.access_token}`).set("User-Agent","HydroBot")).status){if(!u.GithubToken.refresh_token)throw new p;const n=await c.post("https://github.com/login/oauth/access_token").proxy(t.proxy).set("User-Agent","HydroBot").send({grant_type:"refresh_token",client_id:t.client_id,client_secret:t.client_secret,refresh_token:u.GithubToken.refresh_token});if(!n.body.access_token)throw new p;return await e.database.setUser(o.platform,o.userId,{GithubToken:n.body}),n.body.access_token}return u.GithubToken.access_token})),console.log(n)}catch(e){if(console.log("catch",e),e instanceof p)return o.send("请先使用 github.auth <username> 或 github.token <token> 设置凭据。");throw e}const[l,d]=n;l&&await o.send(l),d&&await i.updateOne({_id:s._id},{$set:d})}catch(e){o.send(e.message)}return n()}})),e.select("groupId").command("github.listen <repo>","监听一个Repository的事件").action((async({session:e},t)=>{if(2!==(t=t.toLowerCase()).split("/").length)return"无效地址";return await o.findOne({_id:t})?(await o.updateOne({_id:t},{$addToSet:{target:`${e.platform}:${e.groupId}`}},{upsert:!0}),`Watching ${t}`):(await o.insertOne({_id:t,target:[`${e.platform}:${e.groupId}`]}),`Watching ${t}\n(请创建 webhook 投递至 https://github.undefined.moe/webhook ，格式 application/json )`)})),e.select("groupId").command("github.list","List repos").action((async({session:e})=>(await o.find({target:`${e.platform}:${e.groupId}`}).project({_id:1}).toArray()).map((e=>e._id)).join("\n"))),e.select("groupId").command("github.cancel <repo>","取消一个Repository的事件").action((async({session:e},t)=>(await o.updateOne({_id:t.toLowerCase()},{$pull:{target:`${e.platform}:${e.groupId}`}}),`Cancelled ${t}.`))),e.command("github.token <token>","设置token").userFields(["GithubToken"]).action((async({session:e},t)=>(e.user.GithubToken={access_token:t,refresh_token:""},"设置成功"))),e.command("github.auth <username>","登录账号").userFields(["GithubToken"]).action((async({session:e},o)=>`请点击下面的链接继续操作：\nhttps://github.com/login/oauth/authorize?client_id=${t.client_id}&state=${e.platform}:${e.userId}&redirect_url=${t.redirect_uri}&scope=admin%3Arepo_hook%2Crepo&login=${o}`))}))}},4819:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=o(3129),a=n(o(5622)),r=o(2087),s=o(280),c=o(4298);t.apply=e=>{e.command("glados <message:text>","Glados",{minInterval:3e4}).action((async({session:e},t)=>{const o=Math.random().toString(),n=a.default.resolve(r.tmpdir(),`${o}.wav`);if(await new Promise((e=>{i.exec(`wget --tries=50 -O ${n} https://glados.c-net.org/generate?text=${encodeURIComponent(t)}`,(t=>{t&&e(t),e(void 0)}))}))){e.send("请求正在处理中，请稍后（这可能需要数分钟）"),await s.sleep(1e5);if(await new Promise((e=>{i.exec(`wget --tries=50 -O ${n} https://glados.c-net.org/generate?text=${encodeURIComponent(t)}`,(t=>{t&&e(t),e(void 0)}))})))throw new Error("Service Error")}await e.send(`[CQ:record,file=file://${n}]`),await c.unlink(n)}))}},7780:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(5622)),a=n(o(4515)),r=o(4298),s={};try{const e=o(9802);for(const t of e)s[t.id]=t.id,s[t.name]=t.id}catch(e){}try{const e=o(2293);for(const t of e)s[t.name]=t.id}catch(e){}async function c({session:e},t){if(!t.trim())return await e.send("请输入要查看的Card ID/Name");if(!Object.keys(s).length){const e=await a.default.get("https://api.hearthstonejson.com/v1/latest/zhCN/cards.collectible.json");await r.writeFile(i.default.resolve(__dirname,"..","..",".cache","hs_card_zhCN.json"),JSON.stringify(e.body));for(const t of e.body)s[t.id]=t.id,s[t.name]=t.id;const t=await a.default.get("https://api.hearthstonejson.com/v1/latest/enUS/cards.collectible.json");await r.writeFile(i.default.resolve(__dirname,"..","..",".cache","hs_card_enUS.json"),JSON.stringify(t.body));for(const e of t.body)s[e.name]=e.id}return s[t]?e.send(`[CQ:image,file=https://art.hearthstonejson.com/v1/render/latest/zhCN/512x/${s[t]}.png]`):await e.send("NotFound")}t.apply=e=>{e.command("card <name/id:text>","Get a card").action(c)}},1263:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const o=["100","101","200","201","202","204","206","207","300","301","302","303","304","305","307","400","401","402","403","404","405","406","408","409","410","411","412","413","414","415","416","417","418","420","421","422","423","424","425","426","429","431","444","450","451","499","500","501","502","503","504","505","506","507","508","509","510","511","599"];t.apply=function(e){e.command("cat <id>","http.cat",{minInterval:1e3}).action((async(e,t)=>o.includes(t)?`[CQ:image,file=https://cdn.jsdelivr.net/gh/httpcats/http.cat/public/images/${t}.jpg]`:`你家http协议会返回${t}？`))}},5778:function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.apply=void 0;const path_1=__webpack_require__(5622),superagent_1=__importDefault(__webpack_require__(4515)),crypto_1=__webpack_require__(6417),koishi_core_1=__webpack_require__(8664),js_yaml_1=__importDefault(__webpack_require__(6675)),axios_1=__importDefault(__webpack_require__(2376)),fs_extra_1=__webpack_require__(4298),sharp_1=__importDefault(__webpack_require__(742)),logger=new koishi_core_1.Logger("imagetag"),imageRE=/(\[CQ:image,file=[^,]+,url=[^\]]+\])/,checkGroupAdmin=({session:e})=>e.user.authority>=4||e.author.roles.includes("admin")||e.author.roles.includes("owner")?null:"仅管理员可执行该操作。";function MD5(e){const t=crypto_1.createHash("md5");return t.update(e),t.digest("hex")}const apply=async(ctx,config={})=>{const transfile=await fs_extra_1.readFile(path_1.resolve(process.cwd(),"database","image.tags.translation.yaml")),trans=js_yaml_1.default.safeLoad(transfile.toString()),names=eval("require")(`${process.cwd()}/database/class_names_6000.json`);ctx.on("before-attach-channel",((e,t)=>{t.add("enableAutoTag")})),ctx.middleware((async(e,t)=>{const o=imageRE.exec(e.content);return o&&(2===e.channel.enableAutoTag?e.executeSilent(`tag ${o[1]}`):1===e.channel.enableAutoTag&&e.execute(`tag ${o[1]}`)),t()})),ctx.app.on("connect",(async()=>{const e=ctx.app.database.mongo.collection("image.tag");e.createIndex({md5:1},{unique:!0}),ctx.command("tag [image]","Get image tag",{hidden:!0,minInterval:2e3}).action((async({session:t},o)=>{try{let n;o||(await t.send("请发送图片。"),o=await t.prompt(3e4));let i=o;const a=koishi_core_1.segment.from(o);if(a){if("image"!==a.type)throw new Error("没有发现图片。");i=a.data.url,n=a.data.file}if(!i.startsWith("http"))throw new Error("没有发现图片。");n||(n=Buffer.from(i).toString("base64"));let r=await e.findOne({_id:n});if(r)return r.txt;const{data:s}=await axios_1.default.get(i,{responseType:"arraybuffer"}),c=Buffer.alloc(s.byteLength),u=new Uint8Array(s);for(let e=0;e<c.length;++e)c[e]=u[e];const l=MD5(c);if(r=await e.findOne({md5:l}),r)return r.txt;const d=(await sharp_1.default(c).png().toBuffer()).toString("base64");logger.info("downloaded");const{data:p}=await axios_1.default.post("http://127.0.0.1:10377/",{img:d});if("string"==typeof p){let t=p.split("HTTP")[0];throw(p.includes("output with shape")||p.includes("size of tensor"))&&(t="不支持的图片格式（请尝试截图发送）",await e.insertOne({_id:n,md5:l,txt:t})),new Error(t)}const m=[];let f="";for(const e of p)m.push(names[e[0]]),f+=`${trans[names[e[0]]]||names[e[0]]}:${Math.floor(100*e[1])}%  `;if(logger.info(f),config.url&&config.tags)for(const e of m)if(config.tags.includes(e)||m.length>7){superagent_1.default.get(`${config.url}&source=${encodeURIComponent(i)}&format=json`).end();break}return await e.insertOne({_id:n,md5:l,txt:f}),f}catch(e){return e.toString().split("\n")[0]}})),ctx.command("tag.disable","在群内禁用",{noRedirect:!0}).userFields(["authority"]).check(checkGroupAdmin).channelFields(["enableAutoTag"]).action((({session:e})=>(e.channel.enableAutoTag=0,"Disabled"))),ctx.command("tag.enable","在群内启用",{noRedirect:!0}).option("silent","-s").userFields(["authority"]).check(checkGroupAdmin).channelFields(["enableAutoTag"]).action((({session:e,options:t})=>(e.channel.enableAutoTag=t.silent?2:1,"enabled")))}))};exports.apply=apply},1925:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0,t.apply=function(e){e.command("jjwz","绝句文章"),e.command("jjwz.add <content:text>","创建/添加").channelFields(["jjwz"]).userFields(["id"]).action((async({session:e},t)=>{if(t.length>7)return"你怎么写这么长";if(e.channel.jjwz){if((e.channel.jjwz[e.channel.jjwz.length-1]||[])[0]===+e.user.id)return"你不能连续添加"}else e.channel.jjwz=[];return e.channel.jjwz.push([+e.user.id,t]),`${e.channel.jjwz.map((e=>e[1])).join("")}...`})),e.command("jjwz.end","结束").channelFields(["jjwz"]).userFields(["id"]).action((async({session:e})=>e.channel.jjwz?(e.channel.jjwz=null,e.channel.jjwz.map((e=>e[1])).join("")):"还未开始")),e.command("jjwz.edit <content:text>","编辑").channelFields(["jjwz"]).userFields(["id"]).action((async({session:e},t)=>e.channel.jjwz?t.length>7?"你怎么写这么长":e.channel.jjwz[e.channel.jjwz.length-1][0]!==+e.user.id?"上一条不是你所编辑":(e.channel.jjwz[e.channel.jjwz.length-1][1]=t,`${e.channel.jjwz.map((e=>e[1])).join("")}...`):"还未开始")),e.command("jjwz.del","删除").channelFields(["jjwz"]).userFields(["id"]).action((async({session:e})=>e.channel.jjwz?e.channel.jjwz[e.channel.jjwz.length-1][0]!==+e.user.id?"上一条不是你所编辑":(e.channel.jjwz.pop(),`${e.channel.jjwz.map((e=>e[1])).join("")}...`):"还未开始"))}},2179:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=o(7548),a=n(o(2470)),r=o(7547);a.default.locale("zh-cn");const s={expireDays:7,serviceFee:.03,maxBuyPerDay:10};t.apply=(e,t)=>{t={...s,...t},e.on("connect",(()=>{const o=e.database.mongo.collection("kabu.price");o.createIndex("expire",{expireAfterSeconds:0});const n=e.database.mongo.collection("kabu.stock");async function s(e){const t=await o.findOne({_id:e});if(t)return[t.price,t.bought||0];const n=Math.floor(Math.random()<.5?10+Math.sqrt(400*Math.random()):50-Math.sqrt(400*Math.random()));return await o.insertOne({_id:e,price:n,expire:r.endOfToday(),bought:0}),[n,0]}n.createIndex({userId:1,expire:1}),n.createIndex("expire",{expireAfterSeconds:0}),e.command("kabu.query","查询自己的库存以及今日大头菜价格").shortcut("查询大头菜",{prefix:!1}).userFields(["coin","id"]).action((async({session:e})=>{const[o,i]=await Promise.all([n.find({userId:+e.user.id}).sort("expire",1).limit(10).toArray(),n.find({userId:+e.user.id}).count()]);let r="",c=0;for(const{number:e,buyPrice:t,expire:n}of o)c+=e,r+=`你有 ${e} 棵以 ${t} 个硬币每棵买入的大头菜，它们会在 ${a.default(n).fromNow()} 烂掉。\n`;const[u,l]=await s(+e.user.id),d=t.maxBuyPerDay-l;return e.user.coin||(e.user.coin=0),0===i?r="你现在手上还没有大头菜"+(e.user.coin>=u&&d?"，要来买点吗？":"。"):i>o.length&&(r+=`隐藏了 ${i-o.length} 个条目。`),`你现在共有 ${c} 棵大头菜和 ${e.user.coin} 个硬币。\n今天卖给 ${e.username} 的大头菜价格是每棵 ${u} 硬币。您今天还可购入${d}个大头菜。\n${r}`})),e.command("kabu.buy [number]",`购买大头菜。若不指定数量则尽量多地购买。手续费 ${100*t.serviceFee}%。`,{noRedirect:!0}).shortcut("购买大头菜",{prefix:!1,fuzzy:!0}).userFields(["coin","id"]).action((async({session:e},r)=>{const[c,u]=await s(+e.user.id);e.user.coin||(e.user.coin=0);const l=Math.floor(e.user.coin/c/(1+t.serviceFee)),d=Math.min(t.maxBuyPerDay-u,+(null!=r?r:l));if(!Number.isInteger(d)||d<=0||d>l)return`购买数量需要是 1~${l} 之间的正整数。`;const p=a.default();p.add(t.expireDays,"days"),await n.insertOne({_id:new i.ObjectID,userId:+e.user.id,number:d,buyPrice:c,expire:p.toDate()});const m=Math.ceil((1+t.serviceFee)*c*d);return e.user.coin-=m,await o.updateOne({_id:+e.user.id},{$set:{bought:d+u}}),`你花了 ${m} 个硬币（含 ${m-c*d} 个硬币的手续费）以 ${c} 每棵的价格购买了 ${d} 棵大头菜。\n要是你没有在 ${t.expireDays} 天内把大头菜卖掉，它们就会全部烂掉，害你大亏本！一定要注意这一点喔。`})),e.command("kabu.sell [number]",`卖出最早购买（最先烂掉）的大头菜。若不指定数量则全部卖出。手续费 ${100*t.serviceFee}%。`,{noRedirect:!0}).shortcut("卖出大头菜",{prefix:!1,fuzzy:!0}).userFields(["coin","id"]).action((async({session:e},o)=>{const i=+(null!=o?o:1/0);if(i!==1/0&&(!Number.isInteger(i)||i<=0))return"卖出的数量需要是一个正整数";const a=await n.find({userId:+e.user.id}).sort("expire",1).toArray();let r=0,c=null;const u=[];for(const e of a)if(r+e.number<=i)r+=e.number,u.push(e._id);else if(r<i){c={_id:e._id,newNumber:e.number-(i-r)},r=i;break}if(0===r||i!==1/0&&r!==i)return"你没有足够多的大头菜来卖出！";const[l]=await s(+e.user.id);e.user.coin||(e.user.coin=0);const d=Math.floor((1-t.serviceFee)*r*l);return e.user.coin+=d,u.length&&await n.deleteMany({_id:{$in:u}}),c&&await n.updateOne({_id:c._id},{$set:{number:c.newNumber}}),`你已成功卖出 ${r} 棵大头菜，获得了 ${d} 个硬币（已扣除 ${r*l-d} 个硬币的手续费）！`}))})),e.command("kabu","大头菜")}},1787:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(4515)),a=new(o(8664).Logger)("luogu");t.apply=e=>{e.command("oi","OI related"),e.command("oi/luogu","Luogu"),e.command("oi/luogu.problem <pid>","获取Luogu题目").action((async(t,o)=>{const n=await e.app.puppeteer.page();try{await n.goto(`https://www.luogu.com.cn/problem/${o}`,{waitUntil:"networkidle0"})}catch(e){return n.close(),"请求超时。"}return(await n.$(".problem-card")).screenshot({}).then((async e=>(n.close(),`[CQ:image,file=base64://${e.toString("base64")}]`)),(e=>(n.close(),a.debug(e),"截图失败。")))})),e.command("oi/luogu.user <uid>","查询用户").action((async(e,t)=>{const o=await i.default.get(`https://www.luogu.com.cn/user/${t}?_contentOnly=1`).set("User-Agent","Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko");if("404"===o.body.code)return"没这个人!";const n=o.body.currentData.user,a=0===n.ccfLevel?"无/藏了以方便假":n.ccfLevel;return`${n.name}\n关注: ${n.followingCount}\n粉丝: ${n.followerCount}${n.passedProblemCount?`\nACs/Submits: ${n.passedProblemCount}/${n.submittedProblemCount}`:""}\n颜色: ${n.color}\nCCF评级:${a}`}))}},7750:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(2376));t.apply=e=>{e.middleware((async(e,t)=>{if(e.content.includes("https://bot-api.lxns.net/bot-message/")){const t=await i.default.get(`https://${e.content.split("https://")[1]}`);e.content=t.data.replace(/<.*?>/g,"")}await t()}),!0)}},1078:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=o(8664),a=n(o(4515));t.apply=function(e){e.command("tools","实用工具"),e.command("tools/ocr [image]",{minInterval:3e3}).action((async({session:e},t)=>{if(t||(await e.sendQueued("请发送图片。"),t=await e.prompt(3e4)),!t)return"没有检测到图片。";const o=i.segment.from(t),n=await a.default.get(`https://ai.qq.com/cgi-bin/appdemo_imagetranslate?image_url=${o.data.url}`);return 0!==n.body.ret?n.body.msg:n.body.data.image_records.map((e=>e.source_text)).join("")}))}},8140:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(4515)),a=o(3804),r={"-1":"女",0:"未知",1:"男"};t.apply=function(e){e.command("oi","OI Related"),e.command("oi/oier <query>","查询oier",{minInterval:3e4}).action((async(e,t)=>{const o=await i.default.get(`https://bytew.net/OIer/search.php?method=normal&q=${encodeURIComponent(t)}`),{result:n}=JSON.parse(o.text);let s="";for(const e of a.take(n,3)){const t=JSON.parse(e.awards.replace(/'/gim,'"'));s+=`姓名：${e.name}  生理性别：${r[e.sex]}\n`;for(const e of a.take(t,5))s+=`于${e.grade}时在${e.province}${e.school}参加${e.identity}，`,e.score&&(s+=`以${e.score}的成绩`),s+=`取得${e.award_type}，排名${e.rank}。\n`;t.length>5&&(s+=t.length-5+"个奖项被隐藏。\n")}return n.length>3&&(s+=n.length-3+"个搜索结果被隐藏。"),s}))}},5405:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const n=o(8664);t.apply=e=>{e.command("proxy <command:text>","Proxy a command",{hidden:!0,authority:4}).option("user","-u <userId>").option("self","-s <selfId>").option("group","-g <groupId>").option("length","-l <length>",{fallback:1}).action((async({session:t,options:o},i)=>{const a=new n.Session(e.app,t);if(delete a.groupId,o.group?(a.groupId=o.group,a.subtype="group"):(a.groupId=void 0,a.subtype="private"),o.self&&(a.selfId=o.self),o.user){const e=o.user;if(!e)return"未指定目标。";a.userId=e}await a.send(i);let r="";for(let e=1;e<=o.length;e++)r+=await a.prompt(3e4);return r}))}},3372:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(2376)),a=o(2519),r={c:{type:"compiler",compile:["/usr/bin/gcc","-O2","-Wall","-std=c99","-o","code","foo.c","-lm","-fdiagnostics-color=always"],code_file:"foo.c",execute:["/w/code"]},cc:{type:"compiler",compile:["/usr/bin/g++-7","-O2","-Wall","-std=c++11","-o","code","foo.cc","-lm","-fdiagnostics-color=always"],code_file:"foo.cc",execute:["/w/code"]},pas:{type:"compiler",compile:["/usr/bin/fpc","-O2","-o/w/code","foo.pas"],code_file:"foo.pas",execute:["/w/code"]},py:{type:"interpreter",code_file:"foo.py",execute:["/usr/bin/python","foo.py"]},py2:{type:"interpreter",code_file:"foo.py",execute:["/usr/bin/python","foo.py"]},py3:{type:"interpreter",code_file:"foo.py",execute:["/usr/bin/python3","foo.py"]},java:{type:"compiler",compile:["/usr/bin/javac","-d","/w","-encoding","utf8","./Main.java"],code_file:"Main.java",copyOut:"Main.class",execute:["/usr/bin/java","Main"]},php:{type:"interpreter",code_file:"foo.php",execute:["/usr/bin/php","foo.php"]},js:{type:"interpreter",code_file:"foo.js",execute:["/usr/bin/jsc","/w/foo.js"]},go:{type:"compiler",compile:["/usr/bin/go","build","-o","foo","foo.go"],code_file:"foo.go",execute:["/w/foo"]},sh:{type:"interpreter",code_file:"foo.sh",execute:["/bin/bash","foo.sh"]},cs:{type:"compiler",compile:["/usr/bin/mcs","-optimize+","-out:/w/foo","/w/foo.cs"],code_file:"foo.cs",execute:["/usr/bin/mono","foo"]}},s=["PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin","HOME=/w"],c=i.default.create({baseURL:"http://localhost:5050"});async function u(e,{time_limit_ms:t=5e3,memory_limit_mb:o=256,process_limit:n=32,stdin:i="",copyIn:a={},copyOut:r=[],copyOutCached:u=null}={}){let l,d;try{d={cmd:[{args:e,env:s,files:[i?{content:i}:{content:""},{name:"stdout",max:20480},{name:"stderr",max:20480}],cpuLimit:1e3*t*1e3,readCpuLimit:1200*t*1e3,memoryLimit:1024*o*1024,procLimit:n,copyIn:a,copyOut:r,copyOutCached:u}]};l=(await c.post("/run",d)).data[0]}catch(e){throw console.log(e),e}const p={status:l.status,time_usage_ms:l.time/1e6,memory_usage_kb:l.memory/1024,files:l.files};return l.files=l.files||{},p.stdout=l.files.stdout||"",p.stderr=l.files.stderr||"",l.error&&(p.error=l.error),p.files=l.files,l.fileIds&&(p.fileIds=l.fileIds),p}async function l(e,t,o){const{status:n,stdout:i,stderr:a}=await async function(e,t,o){const n={},i=r[t];if(!r[t])return{status:"SystemError",stdout:"不支持的语言",stderr:"目前支持sh,c,cc,pas,py2,py3,js,cs,go,php,java"};if(n[i.code_file]={content:e},"compiler"===i.type){const{status:e,stdout:t,stderr:o,fileIds:a}=await u(i.compile,{copyIn:n,copyOutCached:[i.copyOut||"code"]});if("Accepted"!==e)return{status:`Compile Error:${e}`,stdout:t,stderr:o};const r=await u(i.execute,{copyIn:{[i.copyOut||"code"]:{fileId:a[i.copyOut||"code"]}}});return await c.delete(`/file/${a[i.copyOut||"code"]}`),r}return"interpreter"===i.type?await u(i.execute,{copyIn:n,stdin:o}):void 0}(e,t,o).catch((e=>({status:"SystemError",stdout:e.toString(),stderr:""})));return"Accepted"===n?`Execute result: \n${i}\n${a}`:`Error: ${n}\n${i}\n${a}`}t.apply=e=>{e.command("tools","实用工具"),e.command("tools/run <language> <code:text>","运行程序",{minInterval:1e3}).alias("code").option("input","启用stdin").action((async({session:t,options:o},n,i)=>{o.input&&t.send("Please input:");const r=o.input?await t.prompt(1e4):"",s=await l(i.replace(/\r/gim,"").decode(),n,r.decode());if(s.length>256||s.split("\n").length>10){const t=await e.puppeteer.page();return`[CQ:image,file=base64://${await a.text2png(t,s)}]`}return s}))}},7088:function(e,t,o){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,o,n){void 0===n&&(n=o),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,n){void 0===n&&(n=o),e[n]=t[o]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&n(t,e,o);return i(t,e),t},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const s=o(2087),c=o(8664),u=a(o(6957)),l=r(o(2470));t.apply=async function(e,t){t.title="Bot::Console",e.plugin(u,t),c.template.set("status",{bot:"{{ username }}：{{ code ? `无法连接` : `工作中（${currentRate[0]}/min）` }}",output:["{{ bots }}","==========","活跃用户数量：{{ activeUsers }}","活跃群数量：{{ activeGroups }}","CPU 使用率：{{ (cpu[0] * 100).toFixed() }}% / {{ (cpu[1] * 100).toFixed() }}%","内存使用率：{{ (memory[0] * 100).toFixed() }}% / {{ (memory[1] * 100).toFixed() }}%"].join("\n")}),e.app.on("connect",(()=>{const t=e.app.database.mongo.collection("message");e.app.webui.sources.meta.extend((async()=>{const o={},n=(await Promise.all(e.app.bots.map((t=>e.app.database.getUser(t.platform,t.selfId.toString()))))).map((e=>null==e?void 0:e.id)).filter((e=>!!e)),i={time:{$gt:l.default().add(-1,"day").toDate()}};return o.activeUsers=await e.app.database.mongo.user.find({}).count(),o.totalSendCount=await t.find({...i,sender:{$in:n.map(parseInt)}}).count(),o.totalReceiveCount=await t.find({...i,sender:{$nin:n.map(parseInt)}}).count(),o.usedmem=Math.floor((s.totalmem()-s.freemem())/1024/1024),o.totalmem=Math.floor(s.totalmem()/1024/1024),o}))}))}},9891:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0,t.apply=function(e){e.command("sudo <command:text>",{hidden:!0,noRedirect:!0}).userFields(["sudoer","authority"]).action((async({session:e},t)=>{if(!e.user.sudoer)throw new Error("You are not in the sudoers file.");const o=e.user.authority;e.user.authority=5,e._sudo=!0,await e.execute(t),e.user.authority=o}))}},475:function(e,t,o){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,o,n){void 0===n&&(n=o),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,n){void 0===n&&(n=o),e[n]=t[o]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&n(t,e,o);return i(t,e),t},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const s=a(o(663)),c=r(o(2376)),u=o(7548),l=/\[CQ:image,file=([^,]+),url=([^\]]+)\]/,d=/\[CQ:image,file=image:\/\/([^,]+)\]/;t.apply=(e,t)=>{const o=e.logger("teach");e.plugin(s,t),e.command("teach",{checkArgCount:!1}),e.on("before-command",(async({session:t,command:o})=>{if(o.getConfig("noRedirect",t)&&t._redirected){const o=await e.app.database.getUser("id",t._dialogue.writer,["authority"]);if(o.authority<5&&!o.sudoer)return"不支持在插值中调用该命令。"}})),e.on("connect",(()=>{const t=e.app.database.mongo.collection("image"),n=async(e,o)=>{if(await t.findOne({_id:e}))return;const{data:n}=await c.default.get(o,{responseType:"arraybuffer"}),i=Buffer.alloc(n.byteLength),a=new Uint8Array(n);for(let e=0;e<i.length;++e)i[e]=a[e];await t.insertOne({_id:e,data:new u.Binary(i)})};e.on("dialogue/detail",(async(e,n)=>{try{for(const e in n){let o,i="";for(;o=d.exec(n[e]);){const[a,r]=o;i+=n[e].slice(0,o.index),n[e]=n[e].slice(o.index+a.length);i+=`[CQ:image,file=base64://${(await t.findOne({_id:r})).data.buffer.toString("base64")}]`}n[e]=i+n[e]}}catch(e){throw o.warn(e.message),new Error("下载图片时发生错误。")}})),e.on("dialogue/before-send",(async e=>{let{answer:n}=e;if(n)try{let o,i="";for(;o=d.exec(n);){const[e,a]=o;i+=n.slice(0,o.index),n=n.slice(o.index+e.length);i+=`[CQ:image,file=base64://${(await t.findOne({_id:a})).data.buffer.toString("base64")}]`}e.answer=i+n}catch(e){throw o.warn(e.message),new Error("下载图片时发生错误。")}})),e.on("dialogue/before-modify",(async({options:e})=>{let{answer:t}=e;if(t)try{let o,i="";for(;o=l.exec(t);){const[e,a,r]=o;i+=t.slice(0,o.index),t=t.slice(o.index+e.length),await n(a,r),i+=`[CQ:image,file=image://${a}]`}e.answer=i+t}catch(e){return o.warn(e.message),"上传图片时发生错误。"}}))}))}},8424:function(e,t,o){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,o,n){void 0===n&&(n=o),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,n){void 0===n&&(n=o),e[n]=t[o]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&n(t,e,o);return i(t,e),t},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const s=r(o(4515)),c=r(o(2376)),u=r(o(742)),l=o(3804),d=a(o(9636)),p=a(o(9509)),m=o(5747),f=o(2519),g=r(o(7286));t.apply=e=>{e.plugin(p,{bilibili:!1,magi:!1,oeis:!1}),e.plugin(d),e.command("search","",{maxUsage:5,minInterval:6e4}),e.command("tools/tex <code:text>","KaTeX 渲染",{minInterval:1e3}).alias("katex <code:text>").action((async({session:e},t)=>{let{data:o}=await c.default.get(`https://www.zhihu.com/equation?tex=${encodeURIComponent(t)}`);const n=o.match(/>([^<]+)<\/text>/);if(n)return e.send(n[1]);const i=o.match(/ viewBox="0 (-?\d*(.\d+)?) -?\d*(.\d+)? -?\d*(.\d+)?" /);i&&(o=o.replace("\n",`\n<rect x="0" y="${i[1]}" width="100%" height="100%" fill="white"></rect>\n`));return`[CQ:image,file=base64://${(await u.default(Buffer.from(o)).png().toBuffer()).toString("base64")}]`})),e.command("tools/ip <ip>","查询ip").action((async(e,t)=>{const o=`http://freeapi.ipip.net/${t}`;return(await s.default.get(o)).body.join(" ")})),e.command("tools/oeis <sequence>","使用 OEIS 进行数列查询",{maxUsage:10}).option("start","-s <start> 设置起始页码",{fallback:0}).usage("输入用逗号隔开的数作为要查询的数列的前几项，或者直接输入以 id:A 打头的数列编号。").example("oeis 1,2,3,6,11,23,47,106,235").example("oeis id:A000055").action((async({options:e,session:t},o)=>{const{body:n}=await s.default.get(`https://oeis.org/search?fmt=json&q=${o}&start=${e.start}`),i=l.filter(n.results,(e=>!e.name.startsWith("Duplicate")));for(const e of l.take(i,3))await t.sendQueued([`https://oeis.org/A${String(e.number).padStart(6,"0")}`,`${e.name}${e.id?` (${e.id})`:""}`,`${l.take(e.data.split(","),10).join(",")}`].join("\n"))})),e.command("tools/pornhub <text1> <text2>","生成PornHub风格Logo").action((async(t,o,n)=>{const i=await e.app.puppeteer.page();await i.goto("https://www.dute.org/pornhub-logo"),await i.evaluate(((e,t)=>{document.getElementsByClassName("pornhub-prefix")[0].innerHTML=e,document.getElementsByClassName("pornhub-postfix")[0].innerHTML=t}),o,n);const a=await i.$(".screenshotable"),r=await a.screenshot({});return await i.close(),`[CQ:image,file=base64://${r.toString("base64")}]`})),m.existsSync("/usr/bin/wd")&&e.command("tools/dict <word>","使用无道词典查词").example("dict hello").alias("wd").action((async(t,o)=>{o=o.split("").filter((e=>/[-a-zA-Z0-9]/.test(e))).join("");const n=await g.default(`/usr/bin/wd ${o}`),i=await e.app.puppeteer.page(),a=await f.text2png(i,n);return i.close(),`[CQ:image,file=base64://${a}]`}))}},7558:()=>{},2468:(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.apply=void 0;const getFirstPinyin=e=>(e.pinyin.split(/\s+/).shift()||"").replace(/[āáǎà]/g,"a").replace(/[ōóǒò]/g,"o").replace(/[ēéěèê]/g,"e").replace(/[īíǐì]/g,"i").replace(/[ūúǔù]/g,"u").replace(/[ǖǘǚǜü]/g,"v"),getLastPinyin=e=>(e.pinyin.split(/\s+/).pop()||"").replace(/[āáǎà]/g,"a").replace(/[ōóǒò]/g,"o").replace(/[ēéěèê]/g,"e").replace(/[īíǐì]/g,"i").replace(/[ūúǔù]/g,"u").replace(/[ǖǘǚǜü]/g,"v"),fix=e=>("味同嚼蜡"===e.word&&(e.pinyin=e.pinyin.replace("cù","là")),e.word.endsWith("俩")&&(e.pinyin=e.pinyin.replace("liǎng","liǎ")),e.pinyin=e.pinyin.replace(/yi([ēéěèêe])/g,"y$1"),e),indexed=e=>{const t={firstPinyin:{},lastPinyin:{},word:{}};for(const o of e)if(fix(o),4===o.word.length){const e=getLastPinyin(o),n=t.lastPinyin[e]||[];t.lastPinyin[e]=n,n.push(o);const i=getFirstPinyin(o),a=t.firstPinyin[i]||[];t.firstPinyin[i]=a,a.push(o),t.word[o.word]=o}let o=new Set(["yi"]);for(let e=1;o.size>0;++e){const n=new Set;o.forEach((o=>{for(const i of t.lastPinyin[o]||[])i.level||(i.level=e,n.add(getFirstPinyin(i)))})),o=n}return t},db=indexed(eval("require")(`${process.cwd()}/database/yiGeDingLia.json`)),handle=e=>{const t=[];let o=db.word[e];for(;o&&o.level;){const{level:e}=o;if(t.push(o),!(e>1))return t.push({word:"一个顶俩",pinyin:"yī gè dǐng liǎ"}),t;{const t=db.firstPinyin[getLastPinyin(o)].filter((t=>t.level&&t.level<e));o=t[Math.floor(Math.random()*t.length)]}}return t},apply=e=>{e.command("成语接龙 <成语>","成语接龙",{minInterval:1e3,checkArgCount:!1}).action(((e,t)=>{if(!t)return"请输入成语。";const o=handle(t);if(o.length){const e=[];for(const t in o)e.push(o[t].word," ");return e.join("")}}))};exports.apply=apply},5305:(e,t,o)=>{var n={"./autokick":6286,"./autokick.ts":6286,"./bilibili":1298,"./bilibili.ts":1298,"./bottle":2932,"./bottle.ts":2932,"./busybox":4454,"./busybox.ts":4454,"./calc":8342,"./calc.ts":8342,"./codeforces":6134,"./codeforces.ts":6134,"./dress":1916,"./dress.ts":1916,"./economy":5282,"./economy.ts":5282,"./eval":7276,"./eval.ts":7276,"./github":8394,"./github.ts":8394,"./glados":4819,"./glados.ts":4819,"./hearthstone":7780,"./hearthstone.ts":7780,"./httpcat":1263,"./httpcat.ts":1263,"./imagetag":5778,"./imagetag.ts":5778,"./jjwz":1925,"./jjwz.ts":1925,"./kabu":2179,"./kabu.ts":2179,"./luogu":1787,"./luogu.ts":1787,"./lxbot":7750,"./lxbot.ts":7750,"./ocr":1078,"./ocr.ts":1078,"./oier":8140,"./oier.ts":8140,"./proxy":5405,"./proxy.ts":5405,"./run":3372,"./run.ts":3372,"./status":7088,"./status.ts":7088,"./sudo":9891,"./sudo.ts":9891,"./teach":475,"./teach.ts":475,"./tools":8424,"./tools.ts":8424,"./wordcloud":7558,"./wordcloud.ts":7558,"./ygdl":2468,"./ygdl.ts":2468};function i(e){var t=a(e);return o(t)}function a(e){if(!o.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}i.keys=function(){return Object.keys(n)},i.resolve=a,e.exports=i,i.id=5305},2293:e=>{"use strict";e.exports=require("../../.cache/hs_card_enUS.json")},9802:e=>{"use strict";e.exports=require("../../.cache/hs_card_zhCN.json")},4768:e=>{"use strict";e.exports=require("ansi_up")},2376:e=>{"use strict";e.exports=require("axios")},3129:e=>{"use strict";e.exports=require("child_process")},6417:e=>{"use strict";e.exports=require("crypto")},5747:e=>{"use strict";e.exports=require("fs")},4298:e=>{"use strict";e.exports=require("fs-extra")},6675:e=>{"use strict";e.exports=require("js-yaml")},8573:e=>{"use strict";e.exports=require("koishi-adapter-onebot")},9711:e=>{"use strict";e.exports=require("koishi-adapter-telegram")},8664:e=>{"use strict";e.exports=require("koishi-core")},4393:e=>{"use strict";e.exports=require("koishi-plugin-common")},9160:e=>{"use strict";e.exports=require("koishi-plugin-eval")},9636:e=>{"use strict";e.exports=require("koishi-plugin-image-search")},9585:e=>{"use strict";e.exports=require("koishi-plugin-mongo")},663:e=>{"use strict";e.exports=require("koishi-plugin-teach")},9509:e=>{"use strict";e.exports=require("koishi-plugin-tools")},6957:e=>{"use strict";e.exports=require("koishi-plugin-webui")},280:e=>{"use strict";e.exports=require("koishi-utils")},3804:e=>{"use strict";e.exports=require("lodash")},2470:e=>{"use strict";e.exports=require("moment")},7548:e=>{"use strict";e.exports=require("mongodb")},2087:e=>{"use strict";e.exports=require("os")},5622:e=>{"use strict";e.exports=require("path")},742:e=>{"use strict";e.exports=require("sharp")},4515:e=>{"use strict";e.exports=require("superagent")},3680:e=>{"use strict";e.exports=require("superagent-proxy")},1669:e=>{"use strict";e.exports=require("util")}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var o=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(o.exports,o,o.exports,__webpack_require__),o.exports}__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var __webpack_exports__=__webpack_require__(9063)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvbGliL2V4cGlyZS50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvbGliL2dyYXBoLnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9saWIvaXRlbS50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvbGliL3NoZWxsLnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9tYWluLnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9wbHVnaW5zL2F1dG9raWNrLnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9wbHVnaW5zL2JpbGliaWxpLnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9wbHVnaW5zL2JvdHRsZS50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvcGx1Z2lucy9idXN5Ym94LnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9wbHVnaW5zL2NhbGMudHMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vc3JjL3BsdWdpbnMvY29kZWZvcmNlcy50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvcGx1Z2lucy9kcmVzcy50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvcGx1Z2lucy9lY29ub215LnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9wbHVnaW5zL2V2YWwudHMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vc3JjL3BsdWdpbnMvZ2l0aHViLnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9wbHVnaW5zL2dsYWRvcy50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvcGx1Z2lucy9oZWFydGhzdG9uZS50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvcGx1Z2lucy9odHRwY2F0LnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9wbHVnaW5zL2ltYWdldGFnLnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9wbHVnaW5zL2pqd3oudHMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vc3JjL3BsdWdpbnMva2FidS50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvcGx1Z2lucy9sdW9ndS50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvcGx1Z2lucy9seGJvdC50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvcGx1Z2lucy9vY3IudHMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vc3JjL3BsdWdpbnMvb2llci50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvcGx1Z2lucy9wcm94eS50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvcGx1Z2lucy9ydW4udHMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vc3JjL3BsdWdpbnMvc3RhdHVzLnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9wbHVnaW5zL3N1ZG8udHMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vc3JjL3BsdWdpbnMvdGVhY2gudHMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vc3JjL3BsdWdpbnMvdG9vbHMudHMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vc3JjL3BsdWdpbnMveWdkbC50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvcGx1Z2luc3xzeW5jfC9eLy4qJCIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLmNhY2hlL2hzX2NhcmRfZW5VUy5qc29uXCIiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly5jYWNoZS9oc19jYXJkX3poQ04uanNvblwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImFuc2lfdXBcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJheGlvc1wiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImNoaWxkX3Byb2Nlc3NcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJjcnlwdG9cIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJmc1wiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImZzLWV4dHJhXCIiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90L2V4dGVybmFsIFwianMteWFtbFwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImtvaXNoaS1hZGFwdGVyLW9uZWJvdFwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImtvaXNoaS1hZGFwdGVyLXRlbGVncmFtXCIiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90L2V4dGVybmFsIFwia29pc2hpLWNvcmVcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJrb2lzaGktcGx1Z2luLWNvbW1vblwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImtvaXNoaS1wbHVnaW4tZXZhbFwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImtvaXNoaS1wbHVnaW4taW1hZ2Utc2VhcmNoXCIiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90L2V4dGVybmFsIFwia29pc2hpLXBsdWdpbi1tb25nb1wiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImtvaXNoaS1wbHVnaW4tdGVhY2hcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJrb2lzaGktcGx1Z2luLXRvb2xzXCIiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90L2V4dGVybmFsIFwia29pc2hpLXBsdWdpbi13ZWJ1aVwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImtvaXNoaS11dGlsc1wiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImxvZGFzaFwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcIm1vbWVudFwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcIm1vbmdvZGJcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJvc1wiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcInBhdGhcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJzaGFycFwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcInN1cGVyYWdlbnRcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJzdXBlcmFnZW50LXByb3h5XCIiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90L2V4dGVybmFsIFwidXRpbFwiIiwid2VicGFjazovL2h5ZHJvLWJvdC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9oeWRyby1ib3Qvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9oeWRyby1ib3Qvd2VicGFjay9zdGFydHVwIl0sIm5hbWVzIjpbInV0YyIsImFkZCIsImVuZE9mIiwic3VidHJhY3QiLCJ0b0RhdGUiLCJBVSIsImFzeW5jIiwicGFnZSIsImNvbnRlbnQiLCJzdHIiLCJhbnNpX3RvX2h0bWwiLCJzIiwiZSIsInNldFZpZXdwb3J0IiwiaGVpZ2h0Iiwid2lkdGgiLCJzZXRDb250ZW50IiwiZWxlbWVudCIsIiQiLCJzaXplIiwiZXZhbHVhdGUiLCJlbGUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJjbGlwIiwiYm91bmRpbmdCb3giLCJNYXRoIiwiY2VpbCIsInNjcmVlbnNob3QiLCJlcnIiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJJdGVtcyIsImZhbGxiYWNrIiwiaWQiLCJ3ZWlnaHQiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJjb21tYW5kIiwicCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXhlYyIsInN0ZG91dCIsInN0ZGVyciIsInRyaW0iLCJsZW5ndGgiLCJwcm9jZXNzIiwib24iLCJfIiwiY29uc29sZSIsImxvZyIsIkxvZ2dlciIsInNob3dEaWZmIiwic2hvd1RpbWUiLCJDb21tYW5kIiwiZGVmYXVsdENvbmZpZyIsImNoZWNrQXJnQ291bnQiLCJTdHJpbmciLCJwcm90b3R5cGUiLCJkZWNvZGUiLCJ0aGlzIiwicmVwbGFjZSIsImVuY29kZSIsIlNlc3Npb24iLCJleGVjdXRlU2lsZW50IiwiYXJnMCIsImFyZzEiLCJfc2lsZW50Iiwic2VuZCIsIm5vb3AiLCJzZW5kUXVldWVkIiwiZXhlY3V0ZSIsIk1haW4iLCJpdGVtIiwibG9nZ2VyIiwiY29uZmlnIiwiYXBwIiwiQXBwIiwicG9ydCIsImJvdHMiLCJ0eXBlIiwib25lYm90IiwidGVsZWdyYW0iLCJwcmVmaXgiLCJwcm9tcHQiLCJhdXRvQXV0aG9yaXplIiwiYXV0b0Fzc2lnbiIsIm1pblNpbWlsYXJpdHkiLCJydW4iLCJlbnN1cmVEaXJTeW5jIiwiX19kaXJuYW1lIiwicGx1Z2luIiwiS29pc2hpUGx1Z2luTW9uZ28iLCJkYiIsImxpbmUiLCJhZG1pbiIsInVzZXJzIiwic3BsaXQiLCJmb3VuZCIsInVzZXIiLCJkYXRhYmFzZSIsImdldFVzZXIiLCJtYXAiLCJPYmplY3QiLCJhc3NpZ24iLCJpIiwic2V0VXNlciIsImF1dGhvcml0eSIsInN1ZG9lciIsImluZm8iLCJsb2FkIiwic3RhcnQiLCJlbmFibGVkcGx1Z2lucyIsInN0YXJ0c1dpdGgiLCJtIiwiYXBwbHkiLCJldmFsIiwiQXJyYXkiLCJlcnJvciIsImdsb2JhbCIsIkNoYW5uZWwiLCJleHRlbmQiLCJraWNrIiwiY3R4Iiwic2VsZWN0IiwiaGlkZGVuIiwiY2hhbm5lbEZpZWxkcyIsImFjdGlvbiIsInNlc3Npb24iLCJjb3VudCIsImNoYW5uZWwiLCJjb2xsIiwibW9uZ28iLCJjb2xsZWN0aW9uIiwib3B0aW9uIiwib3B0aW9ucyIsImdyb3VwIiwiYm90IiwiZ2V0R3JvdXAiLCJncm91cElkIiwiJGdldEdyb3VwTWVtYmVyTGlzdCIsImtpY2tlZCIsImZpbmQiLCJ0b0FycmF5IiwidXNlcklkIiwiZmlsdGVyIiwiaW5jbHVkZXMiLCJ0YXJnZXQiLCJzb3J0QnkiLCJzb3J0IiwibWF4IiwibGFzdFNlbnRUaW1lIiwiam9pblRpbWUiLCJmaW5kT25lIiwibmlja25hbWUiLCJjYXJkIiwiZnJvbU5vdyIsImpvaW4iLCJkcnkiLCJhbGwiLCIkc2V0R3JvdXBLaWNrIiwiaW5zZXJ0T25lIiwidHIiLCJyIiwic291cmNlIiwidG9VcHBlckNhc2UiLCJyZXN1bHQiLCJSRV9CVklEIiwicGFyc2VJbnQiLCJ1cmwiLCJnZXQiLCJidWZmZXIiLCJlbmQiLCJyZXMiLCJyZWRpcmVjdHMiLCJwb3AiLCJhdiIsImJvZHkiLCJjb2RlIiwiZGF0YSIsInRpdGxlIiwicGljIiwibWlkZGxld2FyZSIsIm5leHQiLCJSRSIsIm5vUmVkaXJlY3QiLCJhbGlhcyIsInVzZXJGaWVsZHMiLCJwbGF0Zm9ybSIsInBpY2siLCJpbnNlcnRlZElkIiwiY250IiwiZmxvb3IiLCJyYW5kb20iLCJza2lwIiwibGltaXQiLCJkZWxldGVPbmUiLCJfaWQiLCJ1cGRhdGVPbmUiLCIkaW5jIiwiRGF0ZSIsImdlbmVyYXRpb25UaW1lIiwidG9Mb2NhbGVTdHJpbmciLCJxdWVyeSIsImRlbGV0ZU1hbnkiLCJKU09OIiwicGFyc2UiLCJkZWxldGVkQ291bnQiLCJkaXNhbGxvd2VkQ29tbWFuZHMiLCJncm91cE1hcCIsInVzZXJNYXAiLCJnZXRHcm91cE5hbWUiLCJzdWJ0eXBlIiwidGltZXN0YW1wIiwibm93IiwiY2hhbm5lbElkIiwiVGltZSIsImhvdXIiLCJwcm9taXNlIiwidGhlbiIsImQiLCJncm91cE5hbWUiLCJvdXRwdXQiLCJmb3JtYXRNZXNzYWdlIiwiY29kZXMiLCJzZWdtZW50IiwicXEiLCJnZXRHcm91cE1lbWJlciIsInVzZXJuYW1lIiwiY2hlY2tHcm91cEFkbWluIiwiYXV0aG9yIiwicm9sZXMiLCJsZXZlbHMiLCJtZXNzYWdlIiwic2V0VGltZXpvbmVPZmZzZXQiLCJ0aW1lem9uZU9mZnNldCIsInJlY29yZE1lc3NhZ2UiLCJLb2lzaGlQbHVnaW5Db21tb24iLCJhc3NpZ25lZSIsInNlbGZJZCIsIm1zZyIsIlVzZXIiLCJmaWVsZHMiLCJpbnB1dCIsImV4cHIiLCJpbnNwZWN0IiwicHVwcGV0ZWVyIiwiaW1nIiwidGV4dDJwbmciLCJjbG9zZSIsImNtZCIsInNldFRpbWVvdXQiLCJlbnYiLCJwbV9pZCIsImV4aXQiLCJjaGVjayIsIiRzZXRHcm91cExlYXZlIiwiZ3JvdXBzIiwiZ2V0QXNzaWduZWRDaGFubmVscyIsImZvcmNlZCIsImciLCJmbGFnIiwiRmxhZyIsInNpbGVudCIsImZvckVhY2giLCJzZW5kTWVzc2FnZSIsImlnbm9yZSIsInNlY3MiLCIkc2V0R3JvdXBCYW4iLCJzZW5kZXJOYW1lIiwiZ2V0Q2hhbm5lbCIsInNldENoYW5uZWwiLCJ3ZWxjb21lTXNnIiwidWRvYyIsIiRzZXRGcmllbmRBZGRSZXF1ZXN0IiwibWVzc2FnZUlkIiwicHVibGljIiwiJHNldEdyb3VwQWRkUmVxdWVzdCIsImMiLCJjcmVhdGVJbmRleCIsInRpbWUiLCJzZWxmIiwibXNncyIsInNlbmRlciIsImRlbGV0ZU1lc3NhZ2UiLCJkdXJhdGlvbiIsIm4iLCJhIiwidG90YWwiLCIkZ3QiLCJ0b3RhbFNlbmRDb3VudCIsImdyb3VwU2VuZENvdW50IiwidG90YWxSZWNlaXZlQ291bnQiLCIkbmUiLCJncm91cFJlY2VpdmVDb3VudCIsIiRtYXRjaCIsImFnZ3JlZ2F0ZSIsIiRncm91cCIsIiRzdW0iLCIkc29ydCIsIiRsaW1pdCIsInVkb2NzIiwidWRpY3QiLCJtaW5JbnRlcnZhbCIsInNob3J0Y3V0IiwiYXJncyIsImV4YW1wbGUiLCJzdmciLCJwb3N0IiwicmF3IiwiZnVsbCIsImNhdGNoIiwic3RhdHVzIiwiaGFuZGxlIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJvcmdhbml6YXRpb24iLCJhdmF0YXIiLCJyYXRpbmciLCJyYW5rIiwibWF4UmF0aW5nIiwibWF4UmFuayIsImdldFRpbWUiLCJjb250ZXN0cyIsImNvbnRlc3QiLCJzdGFydFRpbWVTZWNvbmRzIiwicmVzcCIsInN1bSIsImFyZyIsImNvaW4iLCJiYWNrcGFjayIsInNsb3QiLCJtYXhVc2FnZSIsIk51bWJlciIsImlzU2FmZUludGVnZXIiLCJuZXdTZXNzaW9uIiwib2JzZXJ2ZVVzZXIiLCJfdXBkYXRlIiwiS29pc2hpUGx1Z2luRXZhbCIsIl9fc2VuZENvdW50IiwiZmlsZSIsIl9zdWRvIiwiYXJndiIsInN0cmluZ2lmeSIsIl9kdXJhdGlvbiIsIm1pbiIsImlzTmFOIiwic2xlZXAiLCJzdXBlcmFnZW50IiwiSW52YWxpZFRva2VuRXJyb3IiLCJFcnJvciIsImZvcm1hdE1hcmtkb3duIiwiYnJvd3NlciIsInNlbGVjdG9yIiwib2Zmc2V0IiwiZ290byIsIndhaXRVbnRpbCIsImVsIiwieSIsIngiLCJiYXNlNjQiLCJlbmNvZGluZyIsIlBvc3QiLCJwcm94eSIsInNldCIsInB1bGxSZXF1ZXN0SW50ZXJhY3RvciIsImV2ZW50IiwiZ2V0VG9rZW4iLCJsaW5rIiwidG9rZW4iLCJjb21taXRNc2ciLCJyZXBvbmFtZSIsImlzc3VlSWQiLCJwdXQiLCJjb21taXRfdGl0bGUiLCJjb2xsRGF0YSIsImV2ZW50cyIsInB1c2giLCJyZWYiLCJoZWFkX2NvbW1pdCIsImxvZ2luIiwiYWRkZWQiLCJyZW1vdmVkIiwibW9kaWZpZWQiLCJyZXBvc2l0b3J5IiwiZnVsbF9uYW1lIiwic291cmNlZ3JhcGgiLCJiZWZvcmUiLCJhZnRlciIsImNoYW5nZXMiLCJjb21wYXJpc29uIiwiZmlsZURpZmZzIiwibm9kZXMiLCJjaGFuZ2UiLCJzdGF0IiwiZGVsZXRlZCIsImNoYW5nZWQiLCJjb21taXRzIiwiY29tbWl0IiwiZGV0Iiwic3Vic3RyIiwiY29tcGFyZSIsImZvcmsiLCJtZXJnZSIsImlzc3VlcyIsImlzc3VlIiwibnVtYmVyIiwiaHRtbF91cmwiLCJpbWFnZSIsIndhcm4iLCJjb21tZW50IiwiaXNzdWVfY29tbWVudCIsImludGVyYWN0IiwicHVsbF9yZXF1ZXN0Iiwib3duZXIiLCJiYXNlIiwiaGVhZCIsIm1lcmdlZCIsIlJlZ0V4cCIsImJhc2VMYWJlbCIsImxhYmVsIiwiaGVhZExhYmVsIiwicHVsbF9yZXF1ZXN0X3JldmlldyIsInJldmlldyIsInN0YXRlIiwidW5kZWZpbmVkIiwicHVsbF9yZXF1ZXN0X3Jldmlld19jb21tZW50Iiwic3RhciIsInJlcG8iLCJzdGFyZ2F6ZXJzX2NvdW50Iiwid2F0Y2giLCJ3YXRjaGVyc19jb3VudCIsInByb2plY3RfY2FyZCIsInByb2plY3RfY29sdW1uIiwiY2hlY2tfcnVuIiwiY2hlY2tfc3VpdGUiLCJyZXBvc2l0b3J5X3Z1bG5lcmFiaWxpdHlfYWxlcnQiLCJkZXBsb3ltZW50X3N0YXR1cyIsImRlcGxveW1lbnQiLCJwYWdlX2J1aWxkIiwicm91dGVyIiwicmVxdWVzdCIsImhlYWRlcnMiLCJwYXlsb2FkIiwiY3JlYXRlSGFzaCIsInVwZGF0ZSIsImRpZ2VzdCIsImhvb2siLCJiIiwiaW5mIiwicmVsYXRpdmVJZHMiLCJ0b0xvd2VyQ2FzZSIsImdpZCIsImdkb2MiLCJjbGllbnRfaWQiLCJjbGllbnRfc2VjcmV0IiwicmVkaXJlY3RfdXJpIiwiYWNjZXNzX3Rva2VuIiwiR2l0aHViVG9rZW4iLCJxdW90ZSIsInBhcnNlZE1zZyIsInBhcnNlZCIsInJlbGF0aXZlRXZlbnQiLCJyZWZyZXNoX3Rva2VuIiwiZ3JhbnRfdHlwZSIsIiRzZXQiLCIkYWRkVG9TZXQiLCJ1cHNlcnQiLCJwcm9qZWN0IiwiZG9jIiwiJHB1bGwiLCJ0ZXh0Iiwid2F2IiwidG1wZGlyIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwidW5saW5rIiwiX2NhcmQiLCJrZXlzIiwid3JpdGVGaWxlIiwicmUiLCJBTExPVyIsImltYWdlUkUiLCJNRDUiLCJoYXNoIiwidHJhbnNmaWxlIiwicmVhZEZpbGUiLCJjd2QiLCJ0cmFucyIsInNhZmVMb2FkIiwibmFtZXMiLCJjYXB0dXJlIiwiZW5hYmxlQXV0b1RhZyIsIm1kNSIsInVuaXF1ZSIsInR4dCIsInJlc3BvbnNlVHlwZSIsImJ1ZiIsImFsbG9jIiwiYnl0ZUxlbmd0aCIsInZpZXciLCJVaW50OEFycmF5IiwicG5nIiwidG9CdWZmZXIiLCJwcm9icyIsImVycm1zZyIsInRhZ3MiLCJ0YWciLCJqand6IiwibG9jYWxlIiwiZXhwaXJlRGF5cyIsInNlcnZpY2VGZWUiLCJtYXhCdXlQZXJEYXkiLCJwcmljZUNvbGwiLCJleHBpcmVBZnRlclNlY29uZHMiLCJzdG9ja0NvbGwiLCJwcmljZVRvZGF5IiwicHJpY2UiLCJib3VnaHQiLCJzcXJ0IiwiZXhwaXJlIiwiZW5kT2ZUb2RheSIsInN0b2NrTGlzdCIsImJ1eVByaWNlIiwiY2FuQnV5IiwiZnV6enkiLCJtYXhOdW1iZXIiLCJpc0ludGVnZXIiLCJPYmplY3RJRCIsImNvc3QiLCJzZWxsTnVtYmVyIiwiSW5maW5pdHkiLCJkZWxldGVJZHMiLCJuZXdOdW1iZXIiLCJnYWluIiwiJGluIiwiZGVidWciLCJjdXJyZW50RGF0YSIsImxldmVsIiwiY2NmTGV2ZWwiLCJmb2xsb3dpbmdDb3VudCIsImZvbGxvd2VyQ291bnQiLCJwYXNzZWRQcm9ibGVtQ291bnQiLCJzdWJtaXR0ZWRQcm9ibGVtQ291bnQiLCJjb2xvciIsInJldCIsImltYWdlX3JlY29yZHMiLCJub2RlIiwic291cmNlX3RleHQiLCJHRU5ERVIiLCIwIiwiMSIsInJlc3VsdHMiLCJ0YWtlIiwiYXdhcmRzIiwic2V4IiwiYXdhcmQiLCJncmFkZSIsInByb3ZpbmNlIiwic2Nob29sIiwiaWRlbnRpdHkiLCJzY29yZSIsImF3YXJkX3R5cGUiLCJMQU5HUyIsImNvbXBpbGUiLCJjb2RlX2ZpbGUiLCJjYyIsInBhcyIsInB5IiwicHkyIiwicHkzIiwiamF2YSIsImNvcHlPdXQiLCJwaHAiLCJqcyIsImdvIiwic2giLCJjcyIsImF4aW9zIiwiY3JlYXRlIiwiYmFzZVVSTCIsIl9wb3N0IiwidGltZV9saW1pdF9tcyIsIm1lbW9yeV9saW1pdF9tYiIsInByb2Nlc3NfbGltaXQiLCJzdGRpbiIsImNvcHlJbiIsImNvcHlPdXRDYWNoZWQiLCJmaWxlcyIsImNwdUxpbWl0IiwicmVhZENwdUxpbWl0IiwibWVtb3J5TGltaXQiLCJwcm9jTGltaXQiLCJ0aW1lX3VzYWdlX21zIiwibWVtb3J5X3VzYWdlX2tiIiwibWVtb3J5IiwiZmlsZUlkcyIsImxhbmciLCJmaWxlSWQiLCJkZWxldGUiLCJfcnVuIiwicmVzcG9uc2UiLCJLb2lzaGlQbHVnaW5TdGF0dXMiLCJ0ZW1wbGF0ZSIsIndlYnVpIiwic291cmNlcyIsIm1ldGEiLCJpZHMiLCJhY3RpdmVVc2VycyIsIiRuaW4iLCJ1c2VkbWVtIiwidG90YWxtZW0iLCJmcmVlbWVtIiwib2xkIiwiUkVpbWFnZSIsIktvaXNoaVBsdWdpblRlYWNoIiwiZ2V0Q29uZmlnIiwiX3JlZGlyZWN0ZWQiLCJjcmVhdG9yIiwiX2RpYWxvZ3VlIiwid3JpdGVyIiwiZG93bmxvYWRGaWxlIiwiQmluYXJ5IiwiZGlhbG9ndWUiLCJ0Iiwic2xpY2UiLCJpbmRleCIsImFuc3dlciIsIktvaXNoaVBsdWdpblRvb2xzIiwiYmlsaWJpbGkiLCJtYWdpIiwib2VpcyIsIktvaXNoaVBsdWdpbkltYWdlU2VhcmNoIiwidGV4IiwibWF0Y2giLCJ2aWV3Qm94IiwidXNhZ2UiLCJzZXF1ZW5jZSIsInBhZFN0YXJ0IiwidGV4dDEiLCJ0ZXh0MiIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJpbm5lckhUTUwiLCJleGlzdHNTeW5jIiwid29yZCIsInciLCJ0ZXN0IiwiZ2V0Rmlyc3RQaW55aW4iLCJwaW55aW4iLCJzaGlmdCIsImdldExhc3RQaW55aW4iLCJmaXgiLCJlbmRzV2l0aCIsImluZGV4ZWQiLCJqc29uIiwiZmlyc3RQaW55aW4iLCJsYXN0UGlueWluIiwia2V5MSIsInZhbHVlczEiLCJrZXkyIiwidmFsdWVzMiIsInBpbnlpbnMiLCJTZXQiLCJuZXdwaW55aW5zIiwiZmlsdGVyZWQiLCJ3ZWJwYWNrQ29udGV4dCIsInJlcSIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJvIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJjYWxsIiwib2JqIiwicHJvcCIsImhhc093blByb3BlcnR5IiwiX193ZWJwYWNrX2V4cG9ydHNfXyJdLCJtYXBwaW5ncyI6IjBOQUFBLG1CQUVBLHdCQUNJLE9BQU8sWUFBU0EsTUFDWEMsSUFBSSxFQUFHLFNBQ1BDLE1BQU0sT0FDTkMsU0FBUyxFQUFHLFNBQ1pDLFcseUxDUFQsTUFHTUMsRUFBSyxJQUhYLFdBR2UsU0FFZixXQUFPQyxlQUF3QkMsRUFBWUMsR0FFdkMsTUFBTUMsRUFBTSwwSEFBMEhKLEVBQUdLLGFBQWFGLFdBQ3RKLElBQUlHLEVBQ0FDLEVBQ0osVUFDVUwsRUFBS00sWUFBWSxDQUNuQkMsT0FBUSxJQUFLQyxNQUFPLFdBRWxCUixFQUFLUyxXQUFXUCxHQUN0QixNQUFNUSxRQUFnQlYsRUFBS1csRUFBRSxPQUN2QkMsUUFBYVosRUFBS2EsVUFBUyxLQUU3QixNQUFNQyxFQUFNQyxTQUFTQyxxQkFBcUIsT0FBTyxHQUNqRCxNQUFPLENBQ0hSLE1BQU9NLEVBQUlHLFlBQ1hWLE9BQVFPLEVBQUlJLGlCQUdkQyxRQUFhVCxFQUFRVSxvQkFDckJwQixFQUFLTSxZQUFZLENBQ25CRSxNQUFPYSxLQUFLQyxLQUFLVixFQUFLSixNQUFRLElBQzlCRCxPQUFRYyxLQUFLQyxLQUFLSCxFQUFLWixPQUFTLE1BRXBDSCxRQUFVSixFQUFLdUIsV0FBVyxJQUM1QixNQUFPQyxHQUNMbkIsRUFBSW1CLEVBRVIsR0FBSW5CLEVBQUcsTUFBTUEsRUFDYixPQUFRRCxHQUFLcUIsT0FBT0MsS0FBSyxLQUFLQyxTQUFTLFkseUdDM0I5QixFQUFBQyxNQUE4QixDQUN2Q0MsU0FBVSxDQUNOQyxHQUFJLFdBQ0pDLE9BQVEsRUFDUkMsS0FBTSxPQUNOQyxZQUFhLFNBR3JCLHdCQUE2QkgsRUFBWUMsRUFBZ0JDLEVBQWNDLEdBQ25FLEVBQUFMLE1BQU1FLEdBQU0sQ0FDUkEsS0FBSUMsU0FBUUMsT0FBTUMsaUIsNkVDakIxQixnQkFFQSxVQUFlbEMsZUFB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LFVDQ3JCQyx5QkFBMkIsR0FHL0IsU0FBU0wsb0JBQW9CTSxHQUU1QixJQUFJQyxFQUFlRix5QkFBeUJDLEdBQzVDLFFBQXFCeFAsSUFBakJ5UCxFQUNILE9BQU9BLEVBQWFKLFFBR3JCLElBQUlELEVBQVNHLHlCQUF5QkMsR0FBWSxDQUdqREgsUUFBUyxJQU9WLE9BSEFLLG9CQUFvQkYsR0FBVUcsS0FBS1AsRUFBT0MsUUFBU0QsRUFBUUEsRUFBT0MsUUFBU0gscUJBR3BFRSxFQUFPQyxRQ3JCZkgsb0JBQW9CQyxFQUFJLENBQUNTLEVBQUtDLElBQVUvakIsT0FBTzdDLFVBQVU2bUIsZUFBZUgsS0FBS0MsRUFBS0MsR0NHbEYsSUFBSUUsb0JBQXNCYixvQkFBb0IsTyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuXG5leHBvcnQgZnVuY3Rpb24gZW5kT2ZUb2RheSgpIHtcbiAgICByZXR1cm4gbW9tZW50KCkudXRjKClcbiAgICAgICAgLmFkZCg4LCAnaG91cnMnKVxuICAgICAgICAuZW5kT2YoJ2RheScpXG4gICAgICAgIC5zdWJ0cmFjdCg4LCAnaG91cnMnKVxuICAgICAgICAudG9EYXRlKCk7XG59XG4iLCJpbXBvcnQgQW5zaVVwIGZyb20gJ2Fuc2lfdXAnO1xuaW1wb3J0IHR5cGUgeyBQYWdlIH0gZnJvbSAncHVwcGV0ZWVyLWNvcmUnO1xuXG5jb25zdCBBVSA9IG5ldyBBbnNpVXAoKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRleHQycG5nKHBhZ2U6IFBhZ2UsIGNvbnRlbnQ6IHN0cmluZykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gICAgY29uc3Qgc3RyID0gYDxwcmUgc3R5bGU9XCJmb250LWZhbWlseTonU291cmNlIENvZGUgUHJvJywgQ29uc29sYXMsICdNaWNyb3NvZnQgWWFoZWknLCBIWVNodWFpWGlhblRpVztmb250LXNpemU6MTRweDttYXgtd2lkdGg6NjMwcHhcIj4ke0FVLmFuc2lfdG9faHRtbChjb250ZW50KX08L3ByZT5gO1xuICAgIGxldCBzOiBCdWZmZXI7XG4gICAgbGV0IGU6IEVycm9yO1xuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHBhZ2Uuc2V0Vmlld3BvcnQoe1xuICAgICAgICAgICAgaGVpZ2h0OiAxMDAsIHdpZHRoOiAzMCxcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IHBhZ2Uuc2V0Q29udGVudChzdHIpO1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gYXdhaXQgcGFnZS4kKCdwcmUnKTtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IGF3YWl0IHBhZ2UuZXZhbHVhdGUoKCkgPT4ge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgICAgICAgICBjb25zdCBlbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgncHJlJylbMF07XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBlbGUuc2Nyb2xsV2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBlbGUuc2Nyb2xsSGVpZ2h0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGNsaXAgPSBhd2FpdCBlbGVtZW50LmJvdW5kaW5nQm94KCk7XG4gICAgICAgIGF3YWl0IHBhZ2Uuc2V0Vmlld3BvcnQoe1xuICAgICAgICAgICAgd2lkdGg6IE1hdGguY2VpbChzaXplLndpZHRoICsgMTQpLFxuICAgICAgICAgICAgaGVpZ2h0OiBNYXRoLmNlaWwoY2xpcC5oZWlnaHQgKyAxNCksXG4gICAgICAgIH0pO1xuICAgICAgICBzID0gYXdhaXQgcGFnZS5zY3JlZW5zaG90KHt9KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgZSA9IGVycjtcbiAgICB9XG4gICAgaWYgKGUpIHRocm93IGU7XG4gICAgcmV0dXJuIChzIHx8IEJ1ZmZlci5mcm9tKCcnKSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xufVxuIiwiZXhwb3J0IGludGVyZmFjZSBJdGVtIHtcbiAgICBpZDogc3RyaW5nLFxuICAgIHdlaWdodDogbnVtYmVyLFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nLFxufVxuZXhwb3J0IGludGVyZmFjZSBJdGVtTWV0YSBleHRlbmRzIFJlY29yZDxzdHJpbmcsIG5ldmVyPiB7IH1cbmV4cG9ydCBjb25zdCBJdGVtczogUmVjb3JkPHN0cmluZywgSXRlbT4gPSB7XG4gICAgZmFsbGJhY2s6IHtcbiAgICAgICAgaWQ6ICdmYWxsYmFjaycsXG4gICAgICAgIHdlaWdodDogMCxcbiAgICAgICAgbmFtZTogJ+acquefpeeJqeWTgScsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAn5pyq55+l54mp5ZOBJyxcbiAgICB9LFxufTtcbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlckl0ZW0oaWQ6IHN0cmluZywgd2VpZ2h0OiBudW1iZXIsIG5hbWU6IHN0cmluZywgZGVzY3JpcHRpb246IHN0cmluZykge1xuICAgIEl0ZW1zW2lkXSA9IHtcbiAgICAgICAgaWQsIHdlaWdodCwgbmFtZSwgZGVzY3JpcHRpb24sXG4gICAgfTtcbn1cbiIsImltcG9ydCB7IGV4ZWMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gc2hlbGxFeGVjdXRlKGNvbW1hbmQ6IHN0cmluZykge1xuICAgIGxldCBwOiBzdHJpbmc7XG4gICAgdHJ5IHtcbiAgICAgICAgcCA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGV4ZWMoY29tbWFuZCwgKGVyciwgc3Rkb3V0LCBzdGRlcnIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHN0ZG91dCArIHN0ZGVycik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAoIXAudHJpbSgpLmxlbmd0aCkgcmV0dXJuICcoZXhlY3V0ZSBzdWNjZXNzKSc7XG4gICAgcmV0dXJuIHA7XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvZmlyc3QgKi9cbi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9uby1kdXBsaWNhdGVzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tZHluYW1pYy1yZXF1aXJlICovXG4vKiBlc2xpbnQtZGlzYWJsZSBnbG9iYWwtcmVxdWlyZSAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tYXdhaXQtaW4tbG9vcCAqL1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBBcHAsIENvbW1hbmQsIFNlc3Npb24gfSBmcm9tICdrb2lzaGktY29yZSc7XG5pbXBvcnQgeyBMb2dnZXIsIG5vb3AgfSBmcm9tICdrb2lzaGktdXRpbHMnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCAqIGFzIEtvaXNoaVBsdWdpbk1vbmdvIGZyb20gJ2tvaXNoaS1wbHVnaW4tbW9uZ28nO1xuaW1wb3J0ICdrb2lzaGktYWRhcHRlci1vbmVib3QnO1xuaW1wb3J0ICdrb2lzaGktYWRhcHRlci10ZWxlZ3JhbSc7XG5cbnByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIChfLCBwKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ1VuaGFuZGxlZCBSZWplY3Rpb246JywgcCk7XG59KTtcbkxvZ2dlci5zaG93RGlmZiA9IGZhbHNlO1xuTG9nZ2VyLnNob3dUaW1lID0gJ01NLUREIGhoOm1tOnNzJztcbkNvbW1hbmQuZGVmYXVsdENvbmZpZy5jaGVja0FyZ0NvdW50ID0gdHJ1ZTtcblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBTdHJpbmcge1xuICAgICAgICBkZWNvZGU6ICgpID0+IHN0cmluZyxcbiAgICAgICAgZW5jb2RlOiAoKSA9PiBzdHJpbmcsXG4gICAgfVxufVxuZGVjbGFyZSBtb2R1bGUgJ2tvaXNoaS1jb3JlJyB7XG4gICAgaW50ZXJmYWNlIFNlc3Npb24ge1xuICAgICAgICBfc2lsZW50OiBib29sZWFuLFxuICAgICAgICBleGVjdXRlU2lsZW50KGNvbnRlbnQ6IHN0cmluZywgbmV4dD86IE5leHRGdW5jdGlvbik6IFByb21pc2U8c3RyaW5nPjtcbiAgICAgICAgZXhlY3V0ZWlsZW50KGFyZ3Y6IEFyZ3YsIG5leHQ/OiBOZXh0RnVuY3Rpb24pOiBQcm9taXNlPHN0cmluZz47XG4gICAgfVxufVxuXG5TdHJpbmcucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC8mIzkxOy9nbSwgJ1snKS5yZXBsYWNlKC8mIzkzOy9nbSwgJ10nKS5yZXBsYWNlKC8mYW1wOy9nbSwgJyYnKTtcbn07XG5TdHJpbmcucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC8mL2dtLCAnJmFtcDsnKS5yZXBsYWNlKC9cXFsvZ20sICcmIzkxOycpLnJlcGxhY2UoL1xcXS9nbSwgJyYjOTM7Jyk7XG59O1xuU2Vzc2lvbi5wcm90b3R5cGUuZXhlY3V0ZVNpbGVudCA9IGZ1bmN0aW9uIGV4ZWN1dGVTaWxlbnQodGhpczogU2Vzc2lvbiwgYXJnMDogYW55LCBhcmcxPzogYW55KSB7XG4gICAgdGhpcy5fc2lsZW50ID0gdHJ1ZTtcbiAgICB0aGlzLnNlbmQgPSBub29wO1xuICAgIHRoaXMuc2VuZFF1ZXVlZCA9IG5vb3A7XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZShhcmcwLCBhcmcxKTtcbn07XG5cbmNsYXNzIE1haW4ge1xuICAgIGNvbmZpZzogUmVjb3JkPHN0cmluZywgYW55PjtcblxuICAgIGFwcDogQXBwO1xuXG4gICAgbG9nZ2VyOiBMb2dnZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihpdGVtKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyID0gbmV3IExvZ2dlcignbWFpbicpO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGl0ZW0uY29uZmlnO1xuICAgICAgICB0aGlzLmFwcCA9IG5ldyBBcHAoe1xuICAgICAgICAgICAgcG9ydDogdGhpcy5jb25maWcucG9ydCxcbiAgICAgICAgICAgIGJvdHM6IHRoaXMuY29uZmlnLmJvdHMsXG4gICAgICAgICAgICB0eXBlOiB0aGlzLmNvbmZpZy50eXBlLFxuICAgICAgICAgICAgb25lYm90OiB0aGlzLmNvbmZpZy5vbmVib3QsXG4gICAgICAgICAgICB0ZWxlZ3JhbTogdGhpcy5jb25maWcudGVsZWdyYW0sXG4gICAgICAgICAgICBwcmVmaXg6IHRoaXMuY29uZmlnLnByb21wdCBhcyBzdHJpbmcsXG4gICAgICAgICAgICBhdXRvQXV0aG9yaXplOiAxLFxuICAgICAgICAgICAgYXV0b0Fzc2lnbjogdHJ1ZSxcbiAgICAgICAgICAgIG1pblNpbWlsYXJpdHk6IDAuNyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucnVuKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgcnVuKCkge1xuICAgICAgICBmcy5lbnN1cmVEaXJTeW5jKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICcuY2FjaGUnKSk7XG4gICAgICAgIHRoaXMuYXBwLnBsdWdpbihLb2lzaGlQbHVnaW5Nb25nbywgdGhpcy5jb25maWcuZGIpO1xuICAgICAgICB0aGlzLmFwcC5vbignY29ubmVjdCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbGluZSBvZiB0aGlzLmNvbmZpZy5hZG1pbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJzID0gbGluZS5zcGxpdCgnJicpO1xuICAgICAgICAgICAgICAgIGxldCBmb3VuZDtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHVzZXIgb2YgdXNlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW3R5cGUsIGlkXSA9IHVzZXIuc3BsaXQoJzonKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdWRvYyA9IGF3YWl0IHRoaXMuYXBwLmRhdGFiYXNlLmdldFVzZXIodHlwZSwgaWQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodWRvYykgZm91bmQgPSBbdHlwZSwgaWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBtYXAgPSBPYmplY3QuYXNzaWduKHt9LCAuLi51c2Vycy5tYXAoKGkpID0+IGkuc3BsaXQoJzonKSkubWFwKChpKSA9PiAoeyBbaVswXV06IGlbMV0gfSkpKTtcbiAgICAgICAgICAgICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAuZGF0YWJhc2Uuc2V0VXNlcihmb3VuZFswXSwgZm91bmRbMV0sIHsgLi4ubWFwLCBhdXRob3JpdHk6IDUsIHN1ZG9lcjogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyhgT3BwZWQgJHtsaW5lfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkKCk7XG4gICAgICAgIGF3YWl0IHRoaXMuYXBwLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZCgpIHtcbiAgICAgICAgZm9yIChjb25zdCBwbHVnaW4gb2YgdGhpcy5jb25maWcuZW5hYmxlZHBsdWdpbnMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwbHVnaW4uc3RhcnRzV2l0aCgnficpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbSA9IHJlcXVpcmUoYC4vcGx1Z2lucy8ke3BsdWdpbi5zcGxpdCgnficpWzFdfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5hcHBseSkgbS5uYW1lID0gcGx1Z2luLnNwbGl0KCd+JylbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBtID0geyBuYW1lOiBwbHVnaW4uc3BsaXQoJ34nKVsxXSwgYXBwbHk6IG0gfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLnBsdWdpbihtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1ldmFsXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLmFwcC5wbHVnaW4oZXZhbCgncmVxdWlyZScpKHBsdWdpbikuYXBwbHkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGx1Z2luIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBsdWdpblswXS5zdGFydHNXaXRoKCd+JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtID0gcmVxdWlyZShgLi9wbHVnaW5zLyR7cGx1Z2luWzBdLnNwbGl0KCd+JylbMV19YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW0ubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLmFwcGx5KSBtLm5hbWUgPSBwbHVnaW5bMF0uc3BsaXQoJ34nKVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIG0gPSB7IG5hbWU6IHBsdWdpblswXS5zcGxpdCgnficpWzFdLCBhcHBseTogbSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAucGx1Z2luKG0sIHBsdWdpblsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXZhbFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdGhpcy5hcHAucGx1Z2luKGV2YWwoJ3JlcXVpcmUnKShwbHVnaW5bMF0pLCBwbHVnaW5bMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGxvYWQgJywgcGx1Z2luLCBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0ID0gTWFpbjtcbi8vIEB0cy1pZ25vcmVcbmdsb2JhbC5NYWluID0gTWFpbjtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLWF3YWl0LWluLWxvb3AgKi9cbmltcG9ydCB7IENRQm90LCBHcm91cE1lbWJlckluZm8gfSBmcm9tICdrb2lzaGktYWRhcHRlci1vbmVib3QnO1xuaW1wb3J0IHsgQ29udGV4dCwgQ2hhbm5lbCB9IGZyb20gJ2tvaXNoaS1jb3JlJztcbmltcG9ydCB7IGZpbHRlciwgc29ydEJ5IH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuZGVjbGFyZSBtb2R1bGUgJ2tvaXNoaS1jb3JlJyB7XG4gICAgaW50ZXJmYWNlIENoYW5uZWwge1xuICAgICAgICBraWNrOiBudW1iZXJcbiAgICB9XG4gICAgaW50ZXJmYWNlIFRhYmxlcyB7XG4gICAgICAgIGF1dG9raWNrOiBhbnksXG4gICAgfVxufVxuQ2hhbm5lbC5leHRlbmQoKCkgPT4gKHtcbiAgICBraWNrOiAwLFxufSkpO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXBwbHkoY3R4OiBDb250ZXh0KSB7XG4gICAgY3R4LnNlbGVjdCgncGxhdGZvcm0nLCAnb25lYm90JykuY29tbWFuZCgnYXV0b2tpY2sgPGNvdW50PicsICcnLCB7IGhpZGRlbjogdHJ1ZSwgYXV0aG9yaXR5OiA0IH0pXG4gICAgICAgIC5jaGFubmVsRmllbGRzKFsna2ljayddKVxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSwgY291bnQpID0+IHtcbiAgICAgICAgICAgIHNlc3Npb24uY2hhbm5lbC5raWNrID0gK2NvdW50O1xuICAgICAgICAgICAgcmV0dXJuIGBzZXQgdG8gJHtjb3VudH1gO1xuICAgICAgICB9KTtcblxuICAgIGN0eC5hcHAub24oJ2Nvbm5lY3QnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbGwgPSBjdHguYXBwLmRhdGFiYXNlLm1vbmdvLmNvbGxlY3Rpb24oJ2F1dG9raWNrJyk7XG5cbiAgICAgICAgY3R4LnNlbGVjdCgncGxhdGZvcm0nLCAnb25lYm90JykuY29tbWFuZCgnYXV0b2tpY2sucnVuJywgJycsIHsgaGlkZGVuOiB0cnVlLCBhdXRob3JpdHk6IDQgfSlcbiAgICAgICAgICAgIC5jaGFubmVsRmllbGRzKFsna2ljayddKVxuICAgICAgICAgICAgLm9wdGlvbignZHJ5JywgJ2RyeSBydW4nLCB7IGF1dGhvcml0eTogMiB9KVxuICAgICAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uLCBvcHRpb25zIH0pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBncm91cCA9IGF3YWl0IHNlc3Npb24uYm90LmdldEdyb3VwKHNlc3Npb24uZ3JvdXBJZCk7XG4gICAgICAgICAgICAgICAgbGV0IHVzZXJzID0gYXdhaXQgKHNlc3Npb24uYm90IGFzIENRQm90KS4kZ2V0R3JvdXBNZW1iZXJMaXN0KGdyb3VwLmdyb3VwSWQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGtpY2tlZCA9IChhd2FpdCBjb2xsLmZpbmQoeyBncm91cElkOiBzZXNzaW9uLmdyb3VwSWQgfSkudG9BcnJheSgpKS5tYXAoKGkpID0+IGkudXNlcklkKTtcbiAgICAgICAgICAgICAgICB1c2VycyA9IGZpbHRlcih1c2VycywgKHVzZXIpID0+ICFraWNrZWQuaW5jbHVkZXModXNlci51c2VySWQpKTtcbiAgICAgICAgICAgICAgICBpZiAoc2Vzc2lvbi5jaGFubmVsLmtpY2sgJiYgc2Vzc2lvbi5jaGFubmVsLmtpY2sgPCB1c2Vycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhcmdldDogR3JvdXBNZW1iZXJJbmZvO1xuICAgICAgICAgICAgICAgICAgICB1c2VycyA9IHNvcnRCeSh1c2Vycy5tYXAoKHVzZXIpID0+ICh7IC4uLnVzZXIsIHNvcnQ6IE1hdGgubWF4KHVzZXIubGFzdFNlbnRUaW1lLCB1c2VyLmpvaW5UaW1lKSB9KSksICdzb3J0Jyk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdXNlciBvZiB1c2Vycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdWRvYyA9IGF3YWl0IGNvbGwuZmluZE9uZSh7IGdyb3VwSWQ6IHNlc3Npb24uZ3JvdXBJZCwgdXNlcklkOiB1c2VyLnVzZXJJZCB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdWRvYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IHVzZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2Vzc2lvbi5zZW5kKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGDlsIYgJHt0YXJnZXQubmlja25hbWUgfHwgdGFyZ2V0LmNhcmR9ICgke3RhcmdldC51c2VySWR9KSDnp7vlh7rnvqRgLFxuICAgICAgICAgICAgICAgICAgICAgICAgYO+8iCR7bW9tZW50KHRhcmdldC5qb2luVGltZSAqIDEwMDAgfHwgMCkuZnJvbU5vdygpfeWKoOWFpe+8jOS4iuasoeWPkeiogCAke21vbWVudCh0YXJnZXQubGFzdFNlbnRUaW1lICogMTAwMCB8fCAwKS5mcm9tTm93KCl977yJYCxcbiAgICAgICAgICAgICAgICAgICAgXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5kcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc2Vzc2lvbi5ib3QgYXMgQ1FCb3QpLiRzZXRHcm91cEtpY2soZ3JvdXAuZ3JvdXBJZCwgdGFyZ2V0LnVzZXJJZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbC5pbnNlcnRPbmUoeyBncm91cElkOiBzZXNzaW9uLmdyb3VwSWQsIHVzZXJJZDogdGFyZ2V0LnVzZXJJZCB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfSk7XG59XG4iLCJpbXBvcnQgeyBBcHAgfSBmcm9tICdrb2lzaGktY29yZSc7XG5pbXBvcnQgc3VwZXJhZ2VudCBmcm9tICdzdXBlcmFnZW50JztcblxuY29uc3QgdGFibGUgPSAnZlpvZFI5WFFEU1VtMjF5Q2tyNnpCcWl2ZVlhaDhidDR4c1dwSG5KRTdqTDVWRzNndU1US05QQXdjRic7XG5jb25zdCB0ciA9IHt9O1xuZm9yIChsZXQgaSA9IDA7IGkgPCA1ODsgaSsrKSB0clt0YWJsZVtpXV0gPSBpO1xuY29uc3QgcyA9IFsxMSwgMTAsIDMsIDgsIDQsIDZdO1xuY29uc3QgciA9IFsnQicsICdWJywgJzEnLCAnJywgJycsICc0JywgJycsICcxJywgJycsICc3JywgJycsICcnXTtcbmNvbnN0IHhvciA9IDE3NzQ1MTgxMjtcbmNvbnN0IGFkZCA9IDg3MjgzNDg2MDg7XG5cbmZ1bmN0aW9uIGRlY29kZShzb3VyY2U6IHN0cmluZykge1xuICAgIGlmIChzb3VyY2UubGVuZ3RoICE9PSAxMiB8fCAoc291cmNlWzBdICsgc291cmNlWzFdICsgc291cmNlWzJdICsgc291cmNlWzVdICsgc291cmNlWzddICsgc291cmNlWzldKS50b1VwcGVyQ2FzZSgpICE9PSByLmpvaW4oJycpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBsZXQgcmVzdWx0ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDY7IGkrKykge1xuICAgICAgICByZXN1bHQgKz0gdHJbc291cmNlW3NbaV1dXSAqICg1OCAqKiBpKTtcbiAgICB9XG4gICAgcmVzdWx0ID0gKChyZXN1bHQgLSBhZGQpIF4geG9yKTtcbiAgICByZXR1cm4gcmVzdWx0ID4gMCAmJiByZXN1bHQgPCAxZTkgPyByZXN1bHQgOiBudWxsO1xufVxuXG5jb25zdCBSRV9CVklEOiBbcmVnOiBSZWdFeHAsIHByb2Nlc3NlcjogKHJlc3VsdDogUmVnRXhwRXhlY0FycmF5KSA9PiBQcm9taXNlPG51bWJlcj4gfCBudW1iZXJdW10gPSBbXG4gICAgWy8oQlZbMC05YS16QS1aXXsxMH0pL2dtaSwgKHJlc3VsdCkgPT4gZGVjb2RlKHJlc3VsdFsxXSldLFxuICAgIFsvYXYoWzAtOV0rKS9nbWksIChyZXN1bHQpID0+IHBhcnNlSW50KHJlc3VsdFsxXSwgMTApXSxcbiAgICBbL2IyM1xcLnR2XFwvKFthLXpBLVowLTldKykvZ21pLCBhc3luYyAocmVzdWx0KSA9PiB7XG4gICAgICAgIGNvbnN0IHVybCA9IGBodHRwczovL2IyMy50di8ke3Jlc3VsdFsxXX1gO1xuICAgICAgICBjb25zdCByZWRpcmVjdDogc3RyaW5nID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIHN1cGVyYWdlbnQuZ2V0KHVybClcbiAgICAgICAgICAgICAgICAuYnVmZmVyKGZhbHNlKVxuICAgICAgICAgICAgICAgIC5lbmQoKGVyciwgcmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzLnJlZGlyZWN0cy5sZW5ndGggPyByZXMucmVkaXJlY3RzLnBvcCgpIDogdXJsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkZWNvZGUocmVkaXJlY3Quc3BsaXQoJ3ZpZGVvLycpWzFdLnNwbGl0KCc/JylbMF0pO1xuICAgIH1dLFxuXTtcblxuZXhwb3J0IGNvbnN0IGFwcGx5ID0gKGFwcDogQXBwKSA9PiB7XG4gICAgYXBwLmNvbW1hbmQoJ2JpbGliaWxpIDxhdmlkPicsIHsgaGlkZGVuOiB0cnVlIH0pXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9LCBhdikgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5mbyA9IGF3YWl0IHN1cGVyYWdlbnQuZ2V0KGBodHRwOi8vYXBpLmJpbGliaWxpLmNvbS94L3dlYi1pbnRlcmZhY2Uvdmlldz9haWQ9JHthdn1gKTtcbiAgICAgICAgICAgIGlmIChpbmZvLmJvZHkuY29kZSAhPT0gMCkgcmV0dXJuO1xuICAgICAgICAgICAgYXdhaXQgc2Vzc2lvbi5zZW5kKGBiaWxpYmlsaS5jb20vdmlkZW8vYXYke2F2fVxcbiR7aW5mby5ib2R5LmRhdGEudGl0bGV9XFxuW0NROmltYWdlLGZpbGU9JHtpbmZvLmJvZHkuZGF0YS5waWN9XWApO1xuICAgICAgICB9KTtcblxuICAgIGFwcC5taWRkbGV3YXJlKGFzeW5jIChzZXNzaW9uLCBuZXh0KSA9PiB7XG4gICAgICAgIGF3YWl0IG5leHQoKTtcbiAgICAgICAgbGV0IGF2OiBudW1iZXI7XG4gICAgICAgIGZvciAoY29uc3QgUkUgb2YgUkVfQlZJRCkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gUkVbMF0uZXhlYyhzZXNzaW9uLmNvbnRlbnQpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IFJFWzFdKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWF3YWl0LWluLWxvb3BcbiAgICAgICAgICAgICAgICBpZiAocmVzIGluc3RhbmNlb2YgUHJvbWlzZSkgYXYgPSBhd2FpdCByZXM7XG4gICAgICAgICAgICAgICAgZWxzZSBhdiA9IHJlcztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYXYpIGF3YWl0IHNlc3Npb24uZXhlY3V0ZShgYmlsaWJpbGkgJHthdn1gKTtcbiAgICB9KTtcbn07XG4iLCJpbXBvcnQgeyBDb250ZXh0IH0gZnJvbSAna29pc2hpLWNvcmUnO1xuaW1wb3J0IHsgT2JqZWN0SUQgfSBmcm9tICdtb25nb2RiJztcblxuaW50ZXJmYWNlIEJvdHRsZSB7XG4gICAgX2lkPzogT2JqZWN0SUQsXG4gICAgY29udGVudDogc3RyaW5nLFxuICAgIGdyb3VwSWQ/OiBzdHJpbmcsXG4gICAgdXNlcklkOiBudW1iZXIsXG4gICAgcGljazogbnVtYmVyLFxufVxuZGVjbGFyZSBtb2R1bGUgJ2tvaXNoaS1jb3JlJyB7XG4gICAgaW50ZXJmYWNlIFRhYmxlcyB7XG4gICAgICAgIGJvdHRsZTogQm90dGxlLFxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGFwcGx5ID0gKGN0eDogQ29udGV4dCkgPT4ge1xuICAgIGN0eC5vbignY29ubmVjdCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgY29sbCA9IGN0eC5kYXRhYmFzZS5tb25nby5jb2xsZWN0aW9uKCdib3R0bGUnKTtcblxuICAgICAgICBjdHguY29tbWFuZCgnYm90dGxlLnRocm93IDxjb250ZW50OnRleHQ+JywgJ+S4oua8gua1geeTticsIHsgbm9SZWRpcmVjdDogdHJ1ZSB9KVxuICAgICAgICAgICAgLmFsaWFzKCfkuKLmvILmtYHnk7YnKVxuICAgICAgICAgICAgLnVzZXJGaWVsZHMoWydpZCddKVxuICAgICAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0sIGNvbnRlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBjb2xsLmluc2VydE9uZSh7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwSWQ6IGAke3Nlc3Npb24ucGxhdGZvcm19OiR7c2Vzc2lvbi5ncm91cElkfWAsXG4gICAgICAgICAgICAgICAgICAgIHVzZXJJZDogK3Nlc3Npb24udXNlci5pZCxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGVudC50cmltKCksXG4gICAgICAgICAgICAgICAgICAgIHBpY2s6IDAsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGDlt7LkuKLlh7rjgIIoJHtyZXMuaW5zZXJ0ZWRJZH0pYDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGN0eC5jb21tYW5kKCdib3R0bGUucGljaycsICfmjaHmvILmtYHnk7YnKVxuICAgICAgICAgICAgLmFsaWFzKCfmjaHmvILmtYHnk7YnKVxuICAgICAgICAgICAgLmFjdGlvbihhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY250ID0gYXdhaXQgY29sbC5maW5kKHt9KS5jb3VudCgpO1xuICAgICAgICAgICAgICAgIGlmICghY250KSByZXR1cm4gJ+ayoeacieaNoeWIsCc7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY250KTtcbiAgICAgICAgICAgICAgICBjb25zdCBbcmVzXSA9IGF3YWl0IGNvbGwuZmluZCh7fSkuc2tpcCh0YXJnZXQpLmxpbWl0KDEpLnRvQXJyYXkoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzaG91bGREZXN0b3J5ID0gTWF0aC5yYW5kb20oKSA+IDAuNTtcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkRGVzdG9yeSkgYXdhaXQgY29sbC5kZWxldGVPbmUoeyBfaWQ6IHJlcy5faWQgfSk7XG4gICAgICAgICAgICAgICAgZWxzZSBhd2FpdCBjb2xsLnVwZGF0ZU9uZSh7IF9pZDogcmVzLl9pZCB9LCB7ICRpbmM6IHsgcGljazogMSB9IH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBg6KKr5o2h6LW3ICR7cmVzLnBpY2sgKyAxfSDmrKFcbuaXtumXtO+8miR7bmV3IERhdGUocmVzLl9pZC5nZW5lcmF0aW9uVGltZSAqIDEwMDApLnRvTG9jYWxlU3RyaW5nKCl9XG7lhoXlrrnvvJoke3Jlcy5jb250ZW50fWA7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBjdHguY29tbWFuZCgnYm90dGxlLmRlbCA8cXVlcnk6dGV4dD4nLCB7IGF1dGhvcml0eTogNSwgaGlkZGVuOiB0cnVlIH0pXG4gICAgICAgICAgICAuYWN0aW9uKGFzeW5jIChfLCBxdWVyeSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1ldmFsXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgY29sbC5kZWxldGVNYW55KEpTT04ucGFyc2UocXVlcnkuZGVjb2RlKCkpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLmRlbGV0ZWRDb3VudC50b1N0cmluZygpO1xuICAgICAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBjdHguY29tbWFuZCgnYm90dGxlJywgJ+a8gua1geeTticpO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLWF3YWl0LWluLWxvb3AgKi9cbmltcG9ydCBjaGlsZCBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCB7IGluc3BlY3QgfSBmcm9tICd1dGlsJztcbmltcG9ydCB7XG4gICAgQ2hhbm5lbCwgVXNlciwgQ29udGV4dCwgR3JvdXBNZW1iZXJJbmZvLCBTZXNzaW9uLCBMb2dnZXIsIFRpbWUsIHNlZ21lbnQsXG59IGZyb20gJ2tvaXNoaS1jb3JlJztcbmltcG9ydCAqIGFzIEtvaXNoaVBsdWdpbkNvbW1vbiBmcm9tICdrb2lzaGktcGx1Z2luLWNvbW1vbic7XG5pbXBvcnQgeyBPYmplY3RJRCB9IGZyb20gJ21vbmdvZGInO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgQ1FCb3QgfSBmcm9tICdrb2lzaGktYWRhcHRlci1vbmVib3QnO1xuaW1wb3J0IHsgdGV4dDJwbmcgfSBmcm9tICcuLi9saWIvZ3JhcGgnO1xuaW1wb3J0IHNoZWxsRXhlY3V0ZSBmcm9tICcuLi9saWIvc2hlbGwnO1xuXG5pbnRlcmZhY2UgTWVzc2FnZSB7XG4gICAgX2lkOiBPYmplY3RJRCxcbiAgICB0aW1lOiBEYXRlLFxuICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgICBzZW5kZXI6IG51bWJlcixcbiAgICBncm91cDogc3RyaW5nLFxuICAgIGlkOiBzdHJpbmcsXG59XG5pbnRlcmZhY2UgQ29uZmlnIHtcbiAgICByZWNvcmRNZXNzYWdlPzogYm9vbGVhbixcbiAgICB0aW1lem9uZU9mZnNldD86IG51bWJlcixcbiAgICBwdWJsaWM/OiBzdHJpbmdbXSxcbn1cbmRlY2xhcmUgbW9kdWxlICdrb2lzaGktY29yZScge1xuICAgIGludGVyZmFjZSBDaGFubmVsIHtcbiAgICAgICAgZGlzYWxsb3dlZENvbW1hbmRzOiBzdHJpbmdbXSxcbiAgICAgICAgd2VsY29tZU1zZzogc3RyaW5nLFxuICAgIH1cbiAgICBpbnRlcmZhY2UgVGFibGVzIHtcbiAgICAgICAgbWVzc2FnZTogTWVzc2FnZSxcbiAgICB9XG59XG5DaGFubmVsLmV4dGVuZCgoKSA9PiAoe1xuICAgIGRpc2FsbG93ZWRDb21tYW5kczogW10sXG59KSk7XG5jb25zdCBncm91cE1hcDogUmVjb3JkPG51bWJlciwgW1Byb21pc2U8c3RyaW5nPiwgbnVtYmVyXT4gPSB7fTtcbmNvbnN0IHVzZXJNYXA6IFJlY29yZDxudW1iZXIsIFtzdHJpbmcgfCBQcm9taXNlPHN0cmluZz4sIG51bWJlcl0+ID0ge307XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEdyb3VwTmFtZShzZXNzaW9uOiBTZXNzaW9uKSB7XG4gICAgaWYgKHNlc3Npb24uc3VidHlwZSA9PT0gJ3ByaXZhdGUnKSByZXR1cm4gJ+engeiBiic7XG4gICAgY29uc3QgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBpZCA9IHNlc3Npb24uY2hhbm5lbElkO1xuICAgIGlmICghZ3JvdXBNYXBbaWRdIHx8IHRpbWVzdGFtcCAtIGdyb3VwTWFwW2lkXVsxXSA+PSBUaW1lLmhvdXIpIHtcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IChzZXNzaW9uLmJvdCBhcyBDUUJvdCkuZ2V0R3JvdXAoaWQpLnRoZW4oKGQpID0+IGQuZ3JvdXBOYW1lLCAoKSA9PiBpZCk7XG4gICAgICAgIGdyb3VwTWFwW2lkXSA9IFtwcm9taXNlLCB0aW1lc3RhbXBdO1xuICAgIH1cbiAgICBsZXQgb3V0cHV0ID0gYXdhaXQgZ3JvdXBNYXBbaWRdWzBdO1xuICAgIGlmIChvdXRwdXQgIT09IGAke2lkfWApIG91dHB1dCArPSBgICgke2lkfSlgO1xuICAgIHJldHVybiBvdXRwdXQ7XG59XG5hc3luYyBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKHNlc3Npb246IFNlc3Npb24pIHtcbiAgICBjb25zdCBjb2RlcyA9IHNlZ21lbnQucGFyc2Uoc2Vzc2lvbi5jb250ZW50KTtcbiAgICBsZXQgb3V0cHV0ID0gJyc7XG4gICAgZm9yIChjb25zdCBjb2RlIG9mIGNvZGVzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY29kZSA9PT0gJ3N0cmluZycpIG91dHB1dCArPSBjb2RlO1xuICAgICAgICBlbHNlIGlmIChjb2RlLnR5cGUgPT09ICd0ZXh0Jykgb3V0cHV0ICs9IGNvZGUuZGF0YS5jb250ZW50O1xuICAgICAgICBlbHNlIGlmIChjb2RlLnR5cGUgPT09ICdhdCcpIHtcbiAgICAgICAgICAgIGlmIChjb2RlLmRhdGEucXEgPT09ICdhbGwnKSBvdXRwdXQgKz0gJ0DlhajkvZPmiJDlkZgnO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSBjb2RlLmRhdGEucXE7XG4gICAgICAgICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICBpZiAoIXVzZXJNYXBbaWRdIHx8IHRpbWVzdGFtcCAtIHVzZXJNYXBbaWRdWzFdID49IFRpbWUuaG91cikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9taXNlID0gc2Vzc2lvbi5ib3RcbiAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRHcm91cE1lbWJlcihzZXNzaW9uLmdyb3VwSWQsIGlkKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKGQpID0+IGQubmlja25hbWUgfHwgZC51c2VybmFtZSwgKCkgPT4gaWQpO1xuICAgICAgICAgICAgICAgICAgICB1c2VyTWFwW2lkXSA9IFtwcm9taXNlLCB0aW1lc3RhbXBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gYEAke2F3YWl0IHVzZXJNYXBbaWRdWzBdfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY29kZS50eXBlID09PSAnZmFjZScpIG91dHB1dCArPSBgW2ZhY2UgJHtjb2RlLmRhdGEuaWR9XWA7XG4gICAgICAgIGVsc2UgaWYgKGNvZGUudHlwZSA9PT0gJ2ltYWdlJykge1xuICAgICAgICAgICAgb3V0cHV0ICs9IGBbaW1hZ2UgJHsoY29kZS5kYXRhLnVybCBhcyBzdHJpbmcgfHwgJycpLnNwbGl0KCc/JylbMF19XWA7XG4gICAgICAgIH0gZWxzZSBpZiAoY29kZS50eXBlID09PSAncmVwbHknKSBvdXRwdXQgKz0gYFtyZXBseSAke2NvZGUuZGF0YS5pZH1dYDtcbiAgICAgICAgZWxzZSBvdXRwdXQgKz0gYFske2NvZGUudHlwZX1dYDtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbn1cbmNvbnN0IGNoZWNrR3JvdXBBZG1pbiA9IGFzeW5jICh7IHNlc3Npb24gfSkgPT4gKFxuICAgIChzZXNzaW9uLnVzZXIuYXV0aG9yaXR5ID49IDQgfHwgc2Vzc2lvbi5hdXRob3Iucm9sZXM/LmluY2x1ZGVzKCdhZG1pbicpIHx8IHNlc3Npb24uYXV0aG9yLnJvbGVzPy5pbmNsdWRlcygnb3duZXInKSlcbiAgICAgICAgPyBudWxsXG4gICAgICAgIDogJ+S7heeuoeeQhuWRmOWPr+aJp+ihjOivpeaTjeS9nOOAgidcbik7XG5cbmV4cG9ydCBjb25zdCBhcHBseSA9IChjdHg6IENvbnRleHQsIGNvbmZpZzogQ29uZmlnID0ge30pID0+IHtcbiAgICBjb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKCdidXN5Ym94Jyk7XG4gICAgTG9nZ2VyLmxldmVscy5tZXNzYWdlID0gMztcbiAgICBUaW1lLnNldFRpbWV6b25lT2Zmc2V0KGNvbmZpZy50aW1lem9uZU9mZnNldCA/PyAtNDgwKTsgLy8gVVRDICs4XG4gICAgY29uZmlnLnJlY29yZE1lc3NhZ2UgPSBjb25maWcucmVjb3JkTWVzc2FnZSA/PyB0cnVlO1xuICAgIGN0eC5wbHVnaW4oS29pc2hpUGx1Z2luQ29tbW9uLCB7fSk7XG5cbiAgICBjdHguY29tbWFuZCgnaGVscCcsIHsgYXV0aG9yaXR5OiAxLCBoaWRkZW46IHRydWUgfSk7XG4gICAgY3R4LmNvbW1hbmQoJ3RleCcsIHsgYXV0aG9yaXR5OiAxIH0pO1xuICAgIGN0eC5jb21tYW5kKCdfJywgJ+euoeeQhuW3peWFtycpO1xuXG4gICAgY3R4LnNlbGVjdCgnZ3JvdXBJZCcpLmNvbW1hbmQoJ18uYXNzaWduJywgJ2Fzc2lnbicsIHsgYXV0aG9yaXR5OiA0IH0pXG4gICAgICAgIC5jaGFubmVsRmllbGRzKFsnYXNzaWduZWUnXSlcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0pID0+IHtcbiAgICAgICAgICAgIHNlc3Npb24uY2hhbm5lbC5hc3NpZ25lZSA9IHNlc3Npb24uc2VsZklkLnRvU3RyaW5nKCk7XG4gICAgICAgIH0pO1xuXG4gICAgY3R4LmNvbW1hbmQoJ18uZWNobyA8bXNnOnRleHQ+JywgJ2VjaG8nLCB7IG5vUmVkaXJlY3Q6IHRydWUsIGF1dGhvcml0eTogMyB9KVxuICAgICAgICAuYWN0aW9uKChfLCBtc2cpID0+IG1zZy5kZWNvZGUoKSk7XG5cbiAgICBjdHguY29tbWFuZCgnXy5ldmFsIDxleHByOnRleHQ+JywgeyBhdXRob3JpdHk6IDUsIG5vUmVkaXJlY3Q6IHRydWUsIGhpZGRlbjogdHJ1ZSB9KVxuICAgICAgICAub3B0aW9uKCdpJywgJ091dHB1dCBhcyBpbWFnZScpXG4gICAgICAgIC51c2VyRmllbGRzKFVzZXIuZmllbGRzKVxuICAgICAgICAuY2hhbm5lbEZpZWxkcyhDaGFubmVsLmZpZWxkcylcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24sIG9wdGlvbnMgfSwgaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGxldCByZXM6IGFueTtcbiAgICAgICAgICAgIGNvbnN0IGV4cHIgPSBgXFxcbiAgICAgICAgKGFzeW5jIGZ1bmN0aW9uIGYoKSB7XG4gICAgICAgICAgICByZXR1cm4gJHtpbnB1dC5kZWNvZGUoKX1cbiAgICAgICAgfSkoKWA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1ldmFsXG4gICAgICAgICAgICAgICAgcmVzID0gYXdhaXQgZXZhbChleHByKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXMgPSBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb3V0cHV0ID0gaW5zcGVjdChyZXMsIGZhbHNlLCAzKTtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5pKSByZXR1cm4gb3V0cHV0O1xuICAgICAgICAgICAgY29uc3QgcGFnZSA9IGF3YWl0IGN0eC5hcHAucHVwcGV0ZWVyLnBhZ2UoKTtcbiAgICAgICAgICAgIGNvbnN0IGltZyA9IGF3YWl0IHRleHQycG5nKHBhZ2UsIG91dHB1dCk7XG4gICAgICAgICAgICBwYWdlLmNsb3NlKCk7XG4gICAgICAgICAgICByZXR1cm4gYFtDUTppbWFnZSxmaWxlPWJhc2U2NDovLyR7aW1nfV1gO1xuICAgICAgICB9KTtcblxuICAgIGN0eC5jb21tYW5kKCdfLnNoIDxjb21tYW5kOnRleHQ+JywgJ+aJp+ihjHNoZWxs5ZG95LukJywgeyBhdXRob3JpdHk6IDUsIG5vUmVkaXJlY3Q6IHRydWUgfSlcbiAgICAgICAgLm9wdGlvbignaScsICdPdXRwdXQgYXMgaW1hZ2UnKVxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IG9wdGlvbnMgfSwgY21kKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwID0gYXdhaXQgc2hlbGxFeGVjdXRlKGNtZC5kZWNvZGUoKSk7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuaSkgcmV0dXJuIHA7XG4gICAgICAgICAgICBjb25zdCBwYWdlID0gYXdhaXQgY3R4LmFwcC5wdXBwZXRlZXIucGFnZSgpO1xuICAgICAgICAgICAgY29uc3QgaW1nID0gYXdhaXQgdGV4dDJwbmcocGFnZSwgcCk7XG4gICAgICAgICAgICBwYWdlLmNsb3NlKCk7XG4gICAgICAgICAgICByZXR1cm4gYFtDUTppbWFnZSxmaWxlPWJhc2U2NDovLyR7aW1nfV1gO1xuICAgICAgICB9KTtcblxuICAgIGN0eC5jb21tYW5kKCdfLnNodXRkb3duJywgJ+WFs+mXreacuuWZqOS6uicsIHsgYXV0aG9yaXR5OiA1LCBub1JlZGlyZWN0OiB0cnVlIH0pXG4gICAgICAgIC5hY3Rpb24oKCkgPT4ge1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52LnBtX2lkKSBjaGlsZC5leGVjKGBwbTIgc3RvcCAke3Byb2Nlc3MuZW52LnBtX2lkfWApO1xuICAgICAgICAgICAgICAgIGVsc2UgcHJvY2Vzcy5leGl0KDApO1xuICAgICAgICAgICAgfSwgMzAwMCk7XG4gICAgICAgICAgICByZXR1cm4gJ0V4aXRpbmcgaW4gMyBzZWNzLi4uJztcbiAgICAgICAgfSk7XG5cbiAgICBjdHguY29tbWFuZCgnXy5yZXN0YXJ0JywgJ+mHjeWQr+acuuWZqOS6uicsIHsgYXV0aG9yaXR5OiA1LCBub1JlZGlyZWN0OiB0cnVlIH0pXG4gICAgICAgIC5hY3Rpb24oKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFwcm9jZXNzLmVudi5wbV9pZCkgcmV0dXJuICdDYW5ub3QgcmVzdGFydDogbm90IHBtMiBlbnZpcm9ubWVudCc7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBjaGlsZC5leGVjKGBwbTIgcmVzdGFydCAke3Byb2Nlc3MuZW52LnBtX2lkfWApO1xuICAgICAgICAgICAgfSwgMzAwMCk7XG4gICAgICAgICAgICByZXR1cm4gJ1Jlc3RhcnRpbmcgaW4gMyBzZWNzLi4uJztcbiAgICAgICAgfSk7XG5cbiAgICBjdHguc2VsZWN0KCdwbGF0Zm9ybScpLmNvbW1hbmQoJ18ubGVhdmUnLCAn6YCA5Ye66K+l576kJywgeyBub1JlZGlyZWN0OiB0cnVlIH0pXG4gICAgICAgIC51c2VyRmllbGRzKFsnYXV0aG9yaXR5J10pXG4gICAgICAgIC5jaGVjayhjaGVja0dyb3VwQWRtaW4pXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9KSA9PiB7XG4gICAgICAgICAgICBhd2FpdCAoc2Vzc2lvbi5ib3QgYXMgQ1FCb3QpLiRzZXRHcm91cExlYXZlKHNlc3Npb24uZ3JvdXBJZCk7XG4gICAgICAgIH0pO1xuXG4gICAgY3R4LmNvbW1hbmQoJ18uYm9hcmRjYXN0IDxtZXNzYWdlOnRleHQ+JywgJ+WFqOacjeW5v+aSrScsIHsgYXV0aG9yaXR5OiA1LCBub1JlZGlyZWN0OiB0cnVlIH0pXG4gICAgICAgIC5vcHRpb24oJ2ZvcmNlZCcsICctZiDml6Dop4Ygc2lsZW50IOagh+etvui/m+ihjOW5v+aSrScpXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgb3B0aW9ucywgc2Vzc2lvbiB9LCBtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICBpZiAoIW1lc3NhZ2UpIHJldHVybiAn6K+36L6T5YWl6KaB5Y+R6YCB55qE5paH5pys44CCJztcbiAgICAgICAgICAgIGxldCBncm91cHMgPSBhd2FpdCBjdHguZGF0YWJhc2UuZ2V0QXNzaWduZWRDaGFubmVscyhbJ2lkJywgJ2ZsYWcnXSk7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuZm9yY2VkKSB7XG4gICAgICAgICAgICAgICAgZ3JvdXBzID0gZ3JvdXBzLmZpbHRlcigoZykgPT4gIShnLmZsYWcgJiBDaGFubmVsLkZsYWcuc2lsZW50KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBncm91cHMuZm9yRWFjaCgoZ3JvdXApID0+IHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uLmJvdC5zZW5kTWVzc2FnZShncm91cC5pZCwgbWVzc2FnZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICBjdHguY29tbWFuZCgnY29udGV4dGlmeSA8Y29tbWFuZDp0ZXh0PicsICflnKjnibnlrprkuIrkuIvmlofkuK3op6blj5HmjIfku6QnLCB7IGF1dGhvcml0eTogNCwgbm9SZWRpcmVjdDogdHJ1ZSB9KTtcblxuICAgIGN0eC5jb21tYW5kKCdfLmRlYWN0aXZhdGUnLCAn5Zyo576k5YaF56aB55SoJywgeyBub1JlZGlyZWN0OiB0cnVlIH0pXG4gICAgICAgIC51c2VyRmllbGRzKFsnYXV0aG9yaXR5J10pXG4gICAgICAgIC5jaGVjayhjaGVja0dyb3VwQWRtaW4pXG4gICAgICAgIC5jaGFubmVsRmllbGRzKFsnZmxhZyddKVxuICAgICAgICAuYWN0aW9uKCh7IHNlc3Npb24gfSkgPT4ge1xuICAgICAgICAgICAgc2Vzc2lvbi5jaGFubmVsLmZsYWcgfD0gQ2hhbm5lbC5GbGFnLmlnbm9yZTtcbiAgICAgICAgICAgIHJldHVybiAnRGVhY3RpdmF0ZWQnO1xuICAgICAgICB9KTtcblxuICAgIGN0eC5jb21tYW5kKCdfLmFjdGl2YXRlJywgJ+WcqOe+pOWGheWQr+eUqCcsIHsgbm9SZWRpcmVjdDogdHJ1ZSB9KVxuICAgICAgICAudXNlckZpZWxkcyhbJ2F1dGhvcml0eSddKVxuICAgICAgICAuY2hlY2soY2hlY2tHcm91cEFkbWluKVxuICAgICAgICAuY2hhbm5lbEZpZWxkcyhbJ2ZsYWcnXSlcbiAgICAgICAgLmFjdGlvbigoeyBzZXNzaW9uIH0pID0+IHtcbiAgICAgICAgICAgIHNlc3Npb24uY2hhbm5lbC5mbGFnICY9IH5DaGFubmVsLkZsYWcuaWdub3JlO1xuICAgICAgICAgICAgcmV0dXJuICdBY3RpdmF0ZWQnO1xuICAgICAgICB9KTtcblxuICAgIGN0eC5jb21tYW5kKCdzd2l0Y2gnLCB7IGF1dGhvcml0eTogMSB9KS5jaGVjayhjaGVja0dyb3VwQWRtaW4pO1xuXG4gICAgY3R4LmNvbW1hbmQoJ18ubXV0ZSA8dXNlcj4gPHBlcmlvZFNlY3M+JywgJ+emgeiogOeUqOaItycsIHsgbm9SZWRpcmVjdDogdHJ1ZSB9KVxuICAgICAgICAudXNlckZpZWxkcyhbJ2F1dGhvcml0eSddKVxuICAgICAgICAuY2hlY2soY2hlY2tHcm91cEFkbWluKVxuICAgICAgICAuYWN0aW9uKCh7IHNlc3Npb24gfSwgdXNlciwgc2VjcyA9ICc2MDAwMDAnKSA9PlxuICAgICAgICAgICAgKHNlc3Npb24uYm90IGFzIENRQm90KS4kc2V0R3JvdXBCYW4oc2Vzc2lvbi5ncm91cElkLCB1c2VyLCBwYXJzZUludChzZWNzLCAxMCkpKTtcblxuICAgIGN0eC5vbignbWVzc2FnZScsIGFzeW5jIChzZXNzaW9uKSA9PiB7XG4gICAgICAgIGNvbnN0IGdyb3VwTmFtZSA9IGF3YWl0IGdldEdyb3VwTmFtZShzZXNzaW9uKTtcbiAgICAgICAgY29uc3Qgc2VuZGVyTmFtZSA9IGAke3Nlc3Npb24udXNlcm5hbWV9KCR7c2Vzc2lvbi51c2VySWR9KWA7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBhd2FpdCBmb3JtYXRNZXNzYWdlKHNlc3Npb24pO1xuICAgICAgICBsb2dnZXIuaW5mbyhgWyR7Z3JvdXBOYW1lfV0gJHtzZW5kZXJOYW1lfTogJHttZXNzYWdlfWApO1xuICAgICAgICBpZiAoIXNlc3Npb24uZ3JvdXBJZCkgcmV0dXJuO1xuICAgICAgICBpZiAoc2Vzc2lvbi5jb250ZW50ID09PSAnPl8uYWN0aXZhdGUnKSB7XG4gICAgICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgY3R4LmRhdGFiYXNlLmdldFVzZXIoc2Vzc2lvbi5wbGF0Zm9ybSwgc2Vzc2lvbi51c2VySWQpO1xuICAgICAgICAgICAgaWYgKHVzZXIuYXV0aG9yaXR5ID49IDQgfHwgc2Vzc2lvbi5hdXRob3Iucm9sZXMuaW5jbHVkZXMoJ2FkbWluJykgfHwgc2Vzc2lvbi5hdXRob3Iucm9sZXMuaW5jbHVkZXMoJ293bmVyJykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBncm91cCA9IGF3YWl0IGN0eC5kYXRhYmFzZS5nZXRDaGFubmVsKHNlc3Npb24ucGxhdGZvcm0sIHNlc3Npb24uZ3JvdXBJZCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZmxhZyA9IGdyb3VwLmZsYWcgJiAofkNoYW5uZWwuRmxhZy5pZ25vcmUpO1xuICAgICAgICAgICAgICAgIGF3YWl0IGN0eC5kYXRhYmFzZS5zZXRDaGFubmVsKHNlc3Npb24ucGxhdGZvcm0sIHNlc3Npb24uZ3JvdXBJZCwgeyBmbGFnIH0pO1xuICAgICAgICAgICAgICAgIGF3YWl0IHNlc3Npb24uc2VuZCgnQWN0aXZhdGVkJyk7XG4gICAgICAgICAgICB9IGVsc2UgYXdhaXQgc2Vzc2lvbi5zZW5kKCfmgqjmsqHmnInmnYPpmZDmiafooYzor6Xmk43kvZwnKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgY3R4Lm9uKCdiZWZvcmUtc2VuZCcsIChzZXNzaW9uKSA9PiB7XG4gICAgICAgIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIGdldEdyb3VwTmFtZShzZXNzaW9uKSxcbiAgICAgICAgICAgIGZvcm1hdE1lc3NhZ2Uoc2Vzc2lvbiksXG4gICAgICAgIF0pLnRoZW4oXG4gICAgICAgICAgICAoW2dyb3VwTmFtZSwgbWVzc2FnZV0pID0+IGxvZ2dlci5pbmZvKGBzZW5kIFske2dyb3VwTmFtZX1dICR7c2Vzc2lvbi5zZWxmSWR9OiAke21lc3NhZ2V9YCksXG4gICAgICAgICk7XG4gICAgfSk7XG5cbiAgICBjdHgub24oJ2dyb3VwLW1lbWJlci9iYW4nLCAoc2Vzc2lvbikgPT4ge1xuICAgICAgICAvLyBUT0RPIGhhbmRsZSBhdXRvLWxlYXZlP1xuICAgICAgICBpZiAoc2Vzc2lvbi51c2VySWQudG9TdHJpbmcoKSA9PT0gc2Vzc2lvbi5zZWxmSWQudG9TdHJpbmcoKSkgY29uc29sZS5sb2coc2Vzc2lvbik7XG4gICAgfSk7XG5cbiAgICBjdHgub24oJ2dyb3VwLW1lbWJlci1hZGRlZCcsIGFzeW5jIChzZXNzaW9uKSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBzZXNzaW9uLmFwcC5kYXRhYmFzZS5nZXRDaGFubmVsKHNlc3Npb24ucGxhdGZvcm0sIHNlc3Npb24uZ3JvdXBJZCk7XG4gICAgICAgIGxvZ2dlci5pbmZvKCdFdmVudC5Hcm91cF9JbmNyZWFzZScsIHNlc3Npb24sIGRhdGEpO1xuICAgICAgICBpZiAoZGF0YS53ZWxjb21lTXNnKSB7XG4gICAgICAgICAgICBhd2FpdCBzZXNzaW9uLnNlbmQoZGF0YS53ZWxjb21lTXNnLnJlcGxhY2UoLyVAL2dtaSwgYFtDUTphdCxxcT0ke3Nlc3Npb24udXNlcklkfWApKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgY3R4Lm9uKCdncm91cC1tZW1iZXItZGVsZXRlZCcsIGFzeW5jIChzZXNzaW9uKSA9PiB7XG4gICAgICAgIGNvbnN0IHVkb2MgPSBhd2FpdCBjdHguZGF0YWJhc2UuZ2V0VXNlcihzZXNzaW9uLnBsYXRmb3JtLCBzZXNzaW9uLnVzZXJJZCk7XG4gICAgICAgIGxvZ2dlci5pbmZvKCdFdmVudC5Hcm91cF9EZWNyZWFzZScsIHNlc3Npb24sIHVkb2MpO1xuICAgICAgICBzZXNzaW9uLnNlbmQoYCR7c2Vzc2lvbi51c2VybmFtZX0g6YCA5Ye65LqG576k6IGK44CCYCk7XG4gICAgfSk7XG5cbiAgICBjdHgub24oJ2JlZm9yZS1hdHRhY2gtdXNlcicsIChzZXNzaW9uLCBmaWVsZHMpID0+IHtcbiAgICAgICAgZmllbGRzLmFkZCgnaWQnKTtcbiAgICB9KTtcblxuICAgIGN0eC5hcHAub24oJ2ZyaWVuZC1yZXF1ZXN0JywgKHNlc3Npb24pID0+IChzZXNzaW9uLmJvdCBhcyBDUUJvdCkuJHNldEZyaWVuZEFkZFJlcXVlc3Qoc2Vzc2lvbi5tZXNzYWdlSWQsIHRydWUpKTtcbiAgICBjdHguYXBwLm9uKCdncm91cC1yZXF1ZXN0JywgYXN5bmMgKHNlc3Npb24pID0+IHtcbiAgICAgICAgY29uc3QgdWRvYyA9IGF3YWl0IGN0eC5kYXRhYmFzZS5nZXRVc2VyKHNlc3Npb24ucGxhdGZvcm0sIHNlc3Npb24udXNlcklkKTtcbiAgICAgICAgaWYgKChjb25maWcucHVibGljIHx8IFtdKS5pbmNsdWRlcyhgJHtzZXNzaW9uLnBsYXRmb3JtfToke3Nlc3Npb24uc2VsZklkfWApIHx8IHVkb2M/LmF1dGhvcml0eSA9PT0gNSkge1xuICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ0FwcHJvdmUgSW52aXRlIFJlcXVlc3QnLCBzZXNzaW9uLCB1ZG9jKTtcbiAgICAgICAgICAgIChzZXNzaW9uLmJvdCBhcyBDUUJvdCkuJHNldEdyb3VwQWRkUmVxdWVzdChzZXNzaW9uLm1lc3NhZ2VJZCwgc2Vzc2lvbi5zdWJ0eXBlLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCdEZW5pZWQgSW52aXRlIFJlcXVlc3QnLCBzZXNzaW9uLCB1ZG9jKTtcbiAgICAgICAgICAgIChzZXNzaW9uLmJvdCBhcyBDUUJvdCkuJHNldEdyb3VwQWRkUmVxdWVzdChzZXNzaW9uLm1lc3NhZ2VJZCwgc2Vzc2lvbi5zdWJ0eXBlLCBmYWxzZSwgJ+atpOi0puWPt+S4jeWvueWkluW8gOaUvu+8jOivt+S9v+eUqOWFtuS7lui0puWPt+OAgicpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBjdHgub24oJ2Nvbm5lY3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGMgPSBjdHguZGF0YWJhc2UubW9uZ28uY29sbGVjdGlvbignbWVzc2FnZScpO1xuXG4gICAgICAgIGxvZ2dlci5pbmZvKCdFbnN1cmluZyBpbmRleC4uLicpO1xuICAgICAgICBhd2FpdCBjLmNyZWF0ZUluZGV4KHsgdGltZTogLTEsIGdyb3VwOiAxLCB1c2VyOiAxIH0pO1xuICAgICAgICBsb2dnZXIuaW5mbygnRG9uZS4nKTtcblxuICAgICAgICBjdHguY29tbWFuZCgnXy5yZWNhbGwnLCAn5pKk5Zue5raI5oGvJylcbiAgICAgICAgICAgIC51c2VyRmllbGRzKFsnYXV0aG9yaXR5J10pXG4gICAgICAgICAgICAuY2hlY2soY2hlY2tHcm91cEFkbWluKVxuICAgICAgICAgICAgLm9wdGlvbignY291bnQnLCAnLWMgPGNvdW50PiDmlbDph48nLCB7IGZhbGxiYWNrOiAxIH0pXG4gICAgICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24sIG9wdGlvbnMgfSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSBhd2FpdCBzZXNzaW9uLmFwcC5kYXRhYmFzZS5nZXRVc2VyKHNlc3Npb24ucGxhdGZvcm0sIHNlc3Npb24uc2VsZklkLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1zZ3MgPSBhd2FpdCBjLmZpbmQoeyBncm91cDogc2Vzc2lvbi5ncm91cElkLCBzZW5kZXI6ICtzZWxmLmlkIH0pLnNvcnQoeyB0aW1lOiAtMSB9KS5saW1pdChvcHRpb25zLmNvdW50KS50b0FycmF5KCk7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ2RlbGV0aW5nIG1lc3NhZ2U6ICVvJywgbXNncyk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBtc2cgb2YgbXNncykgYXdhaXQgc2Vzc2lvbi5ib3QuZGVsZXRlTWVzc2FnZShzZXNzaW9uLmdyb3VwSWQsIG1zZy5pZCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBjdHguY29tbWFuZCgnXy5zdGF0IFtkdXJhdGlvbl0nLCAnc3RhdCcpXG4gICAgICAgICAgICAub3B0aW9uKCd0b3RhbCcsICctdCBUb3RhbCcpXG4gICAgICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24sIG9wdGlvbnMgfSwgZHVyYXRpb24gPSAnMWRheScpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBbLCBuID0gJzEnLCBhXSA9IC8oXFxkKyk/KFxcdyspLy5leGVjKGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICBjb25zdCBncm91cCA9IGAke3Nlc3Npb24ucGxhdGZvcm19OiR7c2Vzc2lvbi5ncm91cElkfWA7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZiA9IGF3YWl0IHNlc3Npb24uYXBwLmRhdGFiYXNlLmdldFVzZXIoc2Vzc2lvbi5wbGF0Zm9ybSwgc2Vzc2lvbi5zZWxmSWQudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdGltZSA9IG9wdGlvbnMudG90YWwgPyB7fSA6IHsgdGltZTogeyAkZ3Q6IG1vbWVudCgpLmFkZCgtbiwgYSBhcyBhbnkpLnRvRGF0ZSgpIH0gfTtcbiAgICAgICAgICAgICAgICBjb25zdCB0b3RhbFNlbmRDb3VudCA9IGF3YWl0IGMuZmluZCh7IC4uLnRpbWUsIHNlbmRlcjogK3NlbGYuaWQgfSkuY291bnQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBncm91cFNlbmRDb3VudCA9IGF3YWl0IGMuZmluZCh7IC4uLnRpbWUsIGdyb3VwLCBzZW5kZXI6ICtzZWxmLmlkIH0pLmNvdW50KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdG90YWxSZWNlaXZlQ291bnQgPSBhd2FpdCBjLmZpbmQoeyAuLi50aW1lLCBzZW5kZXI6IHsgJG5lOiArc2VsZi5pZCB9IH0pLmNvdW50KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZ3JvdXBSZWNlaXZlQ291bnQgPSBhd2FpdCBjLmZpbmQoeyAuLi50aW1lLCBncm91cCwgc2VuZGVyOiB7ICRuZTogK3NlbGYuaWQgfSB9KS5jb3VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBg57uf6K6h5L+h5oGvJHtvcHRpb25zLnRvdGFsID8gJ++8iOaAu+iuoe+8iScgOiBg77yIJHtkdXJhdGlvbn3vvIlgfVxu5Y+R6YCB5raI5oGvJHt0b3RhbFNlbmRDb3VudH3mnaHvvIzmnKznvqQke2dyb3VwU2VuZENvdW50feadoeOAglxu5pS25Yiw5raI5oGvJHt0b3RhbFJlY2VpdmVDb3VudH3mnaHvvIzmnKznvqQke2dyb3VwUmVjZWl2ZUNvdW50feadoeOAgmA7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBjdHguY29tbWFuZCgnXy5yYW5rIFtkdXJhdGlvbl0nLCAncmFuaycpXG4gICAgICAgICAgICAub3B0aW9uKCd0b3RhbCcsICdUb3RhbCcpXG4gICAgICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24sIG9wdGlvbnMgfSwgZHVyYXRpb24gPSAnMWRheScpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBbLCBuID0gJzEnLCBhXSA9IC8oXFxkKyk/KFxcdyspLy5leGVjKGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICBjb25zdCBncm91cCA9IGAke3Nlc3Npb24ucGxhdGZvcm19OiR7c2Vzc2lvbi5ncm91cElkfWA7XG4gICAgICAgICAgICAgICAgY29uc3QgJG1hdGNoID0gb3B0aW9ucy50b3RhbFxuICAgICAgICAgICAgICAgICAgICA/IHsgZ3JvdXAgfVxuICAgICAgICAgICAgICAgICAgICA6IHsgdGltZTogeyAkZ3Q6IG1vbWVudCgpLmFkZCgtbiwgYSBhcyBhbnkpLnRvRGF0ZSgpIH0sIGdyb3VwIH07XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYy5hZ2dyZWdhdGUoW1xuICAgICAgICAgICAgICAgICAgICB7ICRtYXRjaCB9LFxuICAgICAgICAgICAgICAgICAgICB7ICRncm91cDogeyBfaWQ6ICckc2VuZGVyJywgY291bnQ6IHsgJHN1bTogMSB9IH0gfSxcbiAgICAgICAgICAgICAgICAgICAgeyAkc29ydDogeyBjb3VudDogLTEgfSB9LFxuICAgICAgICAgICAgICAgICAgICB7ICRsaW1pdDogMTAgfSxcbiAgICAgICAgICAgICAgICBdKS50b0FycmF5KCkgYXMgdW5rbm93biBhcyBhbnk7XG4gICAgICAgICAgICAgICAgY29uc3QgdWRvY3MgPSBhd2FpdCBzZXNzaW9uLmFwcC5kYXRhYmFzZS5nZXRVc2VyKCdpZCcsIHJlc3VsdC5tYXAoKHIpID0+IHIuX2lkKSwgW3Nlc3Npb24ucGxhdGZvcm0sICduYW1lJ10pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVkaWN0OiBSZWNvcmQ8bnVtYmVyLCBQaWNrPEdyb3VwTWVtYmVySW5mbywgJ25pY2tuYW1lJyB8ICd1c2VybmFtZSc+PiA9IHt9O1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSByZXN1bHRbaV07XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1ZGljdFtyLl9pZF0gPSBhd2FpdCBzZXNzaW9uLmJvdC5nZXRHcm91cE1lbWJlcihzZXNzaW9uLmdyb3VwSWQsIHVkb2NzW2ldW3Nlc3Npb24ucGxhdGZvcm1dKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdWRpY3Rbci5faWRdID0geyB1c2VybmFtZTogdWRvY3NbaV0/Lm5hbWUgfHwgci5faWQsIG5pY2tuYW1lOiAnJyB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBgXFxcbue+pOaIkOWRmOWPkeiogOaOkuihjCR7b3B0aW9ucy50b3RhbCA/ICfvvIjlhbHorqHvvIknIDogYO+8iCR7ZHVyYXRpb25977yJYH1cbiR7cmVzdWx0Lm1hcCgocikgPT4gYCR7dWRpY3Rbci5faWRdLm5pY2tuYW1lIHx8IHVkaWN0W3IuX2lkXS51c2VybmFtZX0gJHtyLmNvdW50feadoWApLmpvaW4oJ1xcbicpfWA7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBpZiAoY29uZmlnLnJlY29yZE1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGN0eC5taWRkbGV3YXJlKChzZXNzaW9uLCBuZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFzZXNzaW9uLmdyb3VwSWQpIHJldHVybiBuZXh0KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZ3JvdXAgPSBgJHtzZXNzaW9uLnBsYXRmb3JtfToke3Nlc3Npb24uZ3JvdXBJZH1gO1xuICAgICAgICAgICAgICAgIGMuaW5zZXJ0T25lKHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHNlc3Npb24uY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBzZW5kZXI6ICtzZXNzaW9uLnVzZXIuaWQsXG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICAgICAgICAgIGlkOiBzZXNzaW9uLm1lc3NhZ2VJZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjdHgub24oJ3NlbmQnLCBhc3luYyAoc2Vzc2lvbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghc2Vzc2lvbi5ncm91cElkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgY29uc3QgZ3JvdXAgPSBgJHtzZXNzaW9uLnBsYXRmb3JtfToke3Nlc3Npb24uZ3JvdXBJZH1gO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVkb2MgPSBhd2FpdCBzZXNzaW9uLmFwcC5kYXRhYmFzZS5nZXRVc2VyKHNlc3Npb24ucGxhdGZvcm0sIHNlc3Npb24uc2VsZklkLnRvU3RyaW5nKCksIFsnaWQnXSk7XG4gICAgICAgICAgICAgICAgYy5pbnNlcnRPbmUoe1xuICAgICAgICAgICAgICAgICAgICB0aW1lOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICAgICAgICBzZW5kZXI6ICt1ZG9jLmlkLFxuICAgICAgICAgICAgICAgICAgICBncm91cCxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogc2Vzc2lvbi5jb250ZW50LFxuICAgICAgICAgICAgICAgICAgICBpZDogc2Vzc2lvbi5tZXNzYWdlSWQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcbiIsImltcG9ydCB7IENvbnRleHQgfSBmcm9tICdrb2lzaGktY29yZSc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHkoY3R4OiBDb250ZXh0KSB7XG4gICAgY3R4LmNvbW1hbmQoJ3Rvb2xzL2NhbGMgPGV4cHI6dGV4dD4nLCAnY2FsYycsIHsgbWluSW50ZXJ2YWw6IDIwMDAgfSlcbiAgICAgICAgLnNob3J0Y3V0KC9eXFw/KFtcXHNcXFNdKykkLywgeyBhcmdzOiBbJyQxJ10gfSlcbiAgICAgICAgLm9wdGlvbignZnVsbCcsICctZiwgLS1mdWxsIGZ1bGwgb3V0cHV0JylcbiAgICAgICAgLm9wdGlvbigncmF3JywgJy1yLCAtLXJhdyByYXcgaW5wdXQnLCB7IGF1dGhvcml0eTogNSB9KVxuICAgICAgICAuZXhhbXBsZSgnY2FsYyAxKzEnKVxuICAgICAgICAuZXhhbXBsZSgnY2FsYyBTb2x2ZVt4XjIrMT09MCx7eH1dJylcbiAgICAgICAgLmV4YW1wbGUoJ2NhbGMgRmFjdG9ySW50ZWdlclsyMzMzMzNdJylcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uLCBvcHRpb25zIH0sIGV4cHIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YTogc3ZnIH0gPSBhd2FpdCBheGlvcy5wb3N0KCdodHRwOi8vMTI3LjAuMC4xOjEwMzc4LycsIHtcbiAgICAgICAgICAgICAgICByYXc6IG9wdGlvbnMucmF3ID8gJzEnIDogbnVsbCwgaW5wdXQ6IGV4cHIuZGVjb2RlKCksIHR5cGU6IG9wdGlvbnMuZnVsbCA/ICdJbWFnZScgOiAnUmVzdWx0JyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFzdmcuc3RhcnRzV2l0aCgnPD94bWwnKSkgcmV0dXJuIHN2ZztcbiAgICAgICAgICAgIGNvbnN0IHBhZ2UgPSBhd2FpdCBzZXNzaW9uLmFwcC5wdXBwZXRlZXIucGFnZSgpO1xuICAgICAgICAgICAgYXdhaXQgcGFnZS5zZXRDb250ZW50KHN2Zyk7XG4gICAgICAgICAgICBjb25zdCBlbGUgPSBhd2FpdCBwYWdlLiQoJ3N2ZycpO1xuICAgICAgICAgICAgY29uc3QgYnVmZmVyID0gYXdhaXQgcGFnZS5zY3JlZW5zaG90KHtcbiAgICAgICAgICAgICAgICBjbGlwOiBhd2FpdCBlbGUuYm91bmRpbmdCb3goKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcGFnZS5jbG9zZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGBbQ1E6aW1hZ2UsZmlsZT1iYXNlNjQ6Ly8ke2J1ZmZlci50b1N0cmluZygnYmFzZTY0Jyl9XWA7XG4gICAgICAgIH0pO1xuXG4gICAgY3R4LmNvbW1hbmQoJ3Rvb2xzL2NhbGMuemVicmEgPGltYWdlOmltYWdlPicsICdIb3JzZSB0byBaZWJyYScsIHsgbWluSW50ZXJ2YWw6IDIwMDAgfSk7XG59XG4iLCJpbXBvcnQgeyBBcHAgfSBmcm9tICdrb2lzaGktY29yZSc7XG5pbXBvcnQgc3VwZXJhZ2VudCBmcm9tICdzdXBlcmFnZW50JztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ2xvZGFzaCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseShhcHA6IEFwcCkge1xuICAgIGFwcC5jb21tYW5kKCdvaScsICdPSSByZWxhdGVkJyk7XG4gICAgYXBwLmNvbW1hbmQoJ29pL2NmJywgJ0NvZGVmb3JjZXMnKTtcblxuICAgIGFwcC5jb21tYW5kKCdvaS9jZi51c2VyIDxuYW1lPicsICdDb2RlZm9yY2VzIFVzZXInLCB7IG1pbkludGVydmFsOiAzMDAwIH0pXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKF8sIG5hbWUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHN1cGVyYWdlbnQuZ2V0KGBodHRwczovL2NvZGVmb3JjZXMuY29tL2FwaS91c2VyLmluZm8/aGFuZGxlcz0ke25hbWV9YCkuY2F0Y2goKCkgPT4geyB9KTtcbiAgICAgICAgICAgIGlmICghcmVzKSByZXR1cm4gJ0NGIOaMguS6hu+8gSc7XG4gICAgICAgICAgICBpZiAocmVzLmJvZHkuc3RhdHVzID09PSAnRkFJTEVEJykgcmV0dXJuICfmsqHov5nkuKrkurohJztcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlcy5ib2R5LnJlc3VsdFswXTtcbiAgICAgICAgICAgIHJldHVybiBgJHtyZXN1bHQuaGFuZGxlfSAke3Jlc3VsdC5maXJzdE5hbWUgfHwgJyd9ICR7cmVzdWx0Lmxhc3ROYW1lIHx8ICcnfSAke3Jlc3VsdC5vcmdhbml6YXRpb24gfHwgJyd9XG5bQ1E6aW1hZ2UsZmlsZT1odHRwczoke3Jlc3VsdC5hdmF0YXJ9XVxuUmF0aW5nOiAke3Jlc3VsdC5yYXRpbmd9XG5SYW5rOiAke3Jlc3VsdC5yYW5rfVxuTWF4UmF0aW5nOiAke3Jlc3VsdC5tYXhSYXRpbmd9XG5NYXhSYW5rOiAke3Jlc3VsdC5tYXhSYW5rfWA7XG4gICAgICAgIH0pO1xuXG4gICAgYXBwLmNvbW1hbmQoJ29pL2NmLmNvbnRlc3QnLCAnQ29kZWZvcmNlcyBDb250ZXN0JywgeyBtaW5JbnRlcnZhbDogMzAwMCB9KVxuICAgICAgICAuYWN0aW9uKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHN1cGVyYWdlbnQuZ2V0KCdodHRwczovL2NvZGVmb3JjZXMuY29tL2FwaS9jb250ZXN0Lmxpc3QnKS5jYXRjaCgoKSA9PiB7IH0pO1xuICAgICAgICAgICAgaWYgKCFyZXMgfHwgcmVzLmJvZHkuc3RhdHVzICE9PSAnT0snKSByZXR1cm4gJ0NGIOaMguS6hu+8gSc7XG4gICAgICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlc3RzID0gZmlsdGVyKFxuICAgICAgICAgICAgICAgIHJlcy5ib2R5LnJlc3VsdCxcbiAgICAgICAgICAgICAgICAoY29udGVzdCkgPT4gY29udGVzdC5zdGFydFRpbWVTZWNvbmRzICogMTAwMCA+IG5vdyxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBsZXQgbWVzc2FnZSA9ICfmnIDov5HnmoTmr5TotZvvvJpcXG4nO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGNvbnRlc3RzLmxlbmd0aCAtIDE7IGkgPj0gTWF0aC5tYXgoY29udGVzdHMubGVuZ3RoIC0gNSwgMCk7IGktLSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBjb250ZXN0c1tpXTtcbiAgICAgICAgICAgICAgICBtZXNzYWdlICs9IGAke2MubmFtZX0gJHtuZXcgRGF0ZShjLnN0YXJ0VGltZVNlY29uZHMgKiAxMDAwKS50b0xvY2FsZVN0cmluZygpfVxcbmA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgfSk7XG59XG4iLCJpbXBvcnQgeyBBcHAgfSBmcm9tICdrb2lzaGktY29yZSc7XG5pbXBvcnQgc3VwZXJhZ2VudCBmcm9tICdzdXBlcmFnZW50JztcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5KGFwcDogQXBwKSB7XG4gICAgYXBwLmNvbW1hbmQoJ2dpdGh1Yi9kcmVzcyA8cGF0aD4nLCAna29tZWlqaS1zYXRvcmkvRHJlc3MnKVxuICAgICAgICAuZXhhbXBsZSgnZHJlc3Mgd3V4aWFudWN3LzAwMS5qcGcnKVxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSwgaWQpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcCA9IGF3YWl0IHN1cGVyYWdlbnQuZ2V0KGBodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvZ2gva29tZWlqaS1zYXRvcmkvRHJlc3MvJHtpZH1gKS5idWZmZXIoKTtcbiAgICAgICAgICAgICAgICBhd2FpdCBzZXNzaW9uLnNlbmQoYFtDUTppbWFnZSxmaWxlPWJhc2U2NDovLyR7cmVzcC5ib2R5LnRvU3RyaW5nKCdiYXNlNjQnKX1dYCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG59XG4iLCJpbXBvcnQgeyBBcHAsIFVzZXIsIFNlc3Npb24gfSBmcm9tICdrb2lzaGktY29yZSc7XG5pbXBvcnQgeyBJdGVtcywgSXRlbU1ldGEgfSBmcm9tICcuLi9saWIvaXRlbSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2xvdDxUIGV4dGVuZHMgc3RyaW5nPiB7XG4gICAgaWQ6IFQsXG4gICAgY291bnQ6IG51bWJlcixcbiAgICBtZXRhOiBJdGVtTWV0YVtUXSxcbn1cblxuZGVjbGFyZSBtb2R1bGUgJ2tvaXNoaS1jb3JlJyB7XG4gICAgaW50ZXJmYWNlIFVzZXIge1xuICAgICAgICBjb2luOiBudW1iZXIsXG4gICAgICAgIGJhY2twYWNrOiBTbG90PGFueT5bXSxcbiAgICB9XG59XG5cblVzZXIuZXh0ZW5kKCgpID0+ICh7XG4gICAgY29pbjogMCxcbiAgICBiYWNrcGFjazogW10sXG59KSk7XG5cbmZ1bmN0aW9uIHN1bSguLi5hcmdzOiBudW1iZXJbXSkge1xuICAgIGxldCByZXN1bHQgPSAwO1xuICAgIGZvciAoY29uc3QgYXJnIG9mIGFyZ3MpIHJlc3VsdCArPSBhcmc7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5KGFwcDogQXBwKSB7XG4gICAgYXBwLmNvbW1hbmQoJ3Byb3BlcnR5JywgJ+i0ouS6p+ezu+e7nycpO1xuXG4gICAgYXBwLmNvbW1hbmQoJ3Byb3BlcnR5L2JhY2twYWNrJywgJ+iDjOWMhScpXG4gICAgICAgIC51c2VyRmllbGRzKFsnYmFja3BhY2snXSlcbiAgICAgICAgLmFjdGlvbigoeyBzZXNzaW9uIH0pID0+IHtcbiAgICAgICAgICAgIGlmICghc2Vzc2lvbi51c2VyLmJhY2twYWNrLmxlbmd0aCkgcmV0dXJuICfkvaDnmoTog4zljIXmmK/nqbrnmoTvvIEnO1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICBg5L2g55qE6IOM5YyF5YWxJHtzdW0oLi4uc2Vzc2lvbi51c2VyLmJhY2twYWNrLm1hcCgoc2xvdCkgPT4gc2xvdC5jb3VudCkpfeS4queJqeWTgeOAgmAsXG4gICAgICAgICAgICAgICAgLi4uc2Vzc2lvbi51c2VyLmJhY2twYWNrLm1hcCgoc2xvdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gSXRlbXNbc2xvdC5pZF0gfHwgSXRlbXMuZmFsbGJhY2s7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtpdGVtLm5hbWV9ICogJHtzbG90LmNvdW50fWA7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBdLmpvaW4oJ1xcbicpO1xuICAgICAgICB9KTtcblxuICAgIGFwcC5jb21tYW5kKCdwcm9wZXJ0eS9jaGVja2luJywgJ+etvuWIsCcsIHsgbWF4VXNhZ2U6IDEgfSlcbiAgICAgICAgLnNob3J0Y3V0KCfnrb7liLAnLCB7IHByZWZpeDogZmFsc2UgfSlcbiAgICAgICAgLnVzZXJGaWVsZHMoWydjb2luJ10pXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhZGQgPSAyMCArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcbiAgICAgICAgICAgIHNlc3Npb24udXNlci5jb2luICs9IGFkZDtcbiAgICAgICAgICAgIHJldHVybiBg562+5Yiw5oiQ5Yqf77yM6I635b6XJHthZGR95Liq56Gs5biB77yI5YWx5pyJJHtzZXNzaW9uLnVzZXIuY29pbn3kuKrvvIlgO1xuICAgICAgICB9KTtcblxuICAgIGFwcC5jb21tYW5kKCdwcm9wZXJ0eS9wYXkgPHRhcmdldFVzZXJJZD4gPGNvdW50PicsICfovazotKYnLCB7IG5vUmVkaXJlY3Q6IHRydWUgfSlcbiAgICAgICAgLnVzZXJGaWVsZHMoWydjb2luJ10pXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9LCB0YXJnZXQsIGNvdW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuID0gcGFyc2VJbnQoY291bnQsIDEwKTtcbiAgICAgICAgICAgIGlmICghKE51bWJlci5pc1NhZmVJbnRlZ2VyKG4pICYmIG4gPiAwKSkgcmV0dXJuICfkuI3lkIjms5XnmoTmlbDlgLzjgIInO1xuICAgICAgICAgICAgaWYgKHNlc3Npb24udXNlci5jb2luIDwgbikgcmV0dXJuICfkvaDmsqHmnInotrPlpJ/nmoTnoazluIHjgIInO1xuICAgICAgICAgICAgaWYgKCF0YXJnZXQpIHJldHVybiAn5pyq5oyH5a6a55uu5qCH44CCJztcbiAgICAgICAgICAgIGNvbnN0IG5ld1Nlc3Npb24gPSBuZXcgU2Vzc2lvbihhcHAsIHNlc3Npb24pO1xuICAgICAgICAgICAgbmV3U2Vzc2lvbi51c2VySWQgPSB0YXJnZXQ7XG4gICAgICAgICAgICBuZXdTZXNzaW9uLmF1dGhvci51c2VySWQgPSB0YXJnZXQ7XG4gICAgICAgICAgICBkZWxldGUgbmV3U2Vzc2lvbi51c2VyO1xuICAgICAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IG5ld1Nlc3Npb24ub2JzZXJ2ZVVzZXIoWydjb2luJ10pO1xuICAgICAgICAgICAgc2Vzc2lvbi51c2VyLmNvaW4gLT0gbjtcbiAgICAgICAgICAgIHVzZXIuY29pbiArPSBuO1xuICAgICAgICAgICAgYXdhaXQgbmV3U2Vzc2lvbi51c2VyLl91cGRhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiBg5bey6L2s6LSmJHtufeS4quehrOW4geOAgmA7XG4gICAgICAgIH0pO1xufVxuIiwiaW1wb3J0IHsgQ29udGV4dCwgQ2hhbm5lbCwgVXNlciB9IGZyb20gJ2tvaXNoaS1jb3JlJztcbmltcG9ydCAqIGFzIEtvaXNoaVBsdWdpbkV2YWwgZnJvbSAna29pc2hpLXBsdWdpbi1ldmFsJztcbmltcG9ydCB7IHMsIHNlZ21lbnQsIHNsZWVwIH0gZnJvbSAna29pc2hpLXV0aWxzJztcbmltcG9ydCB7IHRleHQycG5nIH0gZnJvbSAnLi4vbGliL2dyYXBoJztcblxuZGVjbGFyZSBtb2R1bGUgJ2tvaXNoaS1jb3JlJyB7XG4gICAgaW50ZXJmYWNlIFNlc3Npb24ge1xuICAgICAgICBfX3NlbmRDb3VudD86IG51bWJlclxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5KGN0eDogQ29udGV4dCwgY29uZmlnOiBLb2lzaGlQbHVnaW5FdmFsLkNvbmZpZykge1xuICAgIGN0eC5wbHVnaW4oS29pc2hpUGx1Z2luRXZhbCwgY29uZmlnKTtcblxuICAgIGN0eC5vbignZXZhbC9iZWZvcmUtc2VuZCcsIGFzeW5jIChjb250ZW50LCBzZXNzaW9uKSA9PiB7XG4gICAgICAgIHNlc3Npb24uX19zZW5kQ291bnQgPSAoc2Vzc2lvbi5fX3NlbmRDb3VudCB8fCAwKSArIDE7XG4gICAgICAgIGlmIChzZXNzaW9uLl9fc2VuZENvdW50ID4gMykgcmV0dXJuICcnO1xuICAgICAgICBjb25zdCBtc2cgPSBzZWdtZW50LnBhcnNlKGNvbnRlbnQpLmZpbHRlcigoaSkgPT4gaS50eXBlID09PSAndGV4dCcpLm1hcCgoaSkgPT4gaS5kYXRhLmNvbnRlbnQpLmpvaW4oJycpO1xuICAgICAgICBpZiAobXNnLmxlbmd0aCA+IDUxMikge1xuICAgICAgICAgICAgY29uc3QgcGFnZSA9IGF3YWl0IGN0eC5wdXBwZXRlZXIucGFnZSgpO1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGV4dDJwbmcocGFnZSwgY29udGVudCk7XG4gICAgICAgICAgICByZXR1cm4gcygnaW1hZ2UnLCB7IGZpbGU6IGBiYXNlNjQ6Ly8ke3Jlc31gIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pO1xuXG4gICAgY3R4LmNvbW1hbmQoJ2V2YWx1YXRlJylcbiAgICAgICAgLm9wdGlvbignaScsICdPdXRwdXQgYXMgaW1hZ2UnLCB7IGhpZGRlbjogdHJ1ZSB9KVxuICAgICAgICAudXNlckZpZWxkcyhVc2VyLmZpZWxkcylcbiAgICAgICAgLmNoYW5uZWxGaWVsZHMoQ2hhbm5lbC5maWVsZHMpXG4gICAgICAgIC5jaGVjaygoeyBzZXNzaW9uIH0pID0+IHtcbiAgICAgICAgICAgIGlmICghc2Vzc2lvbi5fc3VkbykgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgY21kID0gc2Vzc2lvbi5hcmd2LmFyZ3NbMF0ucmVwbGFjZSgnZXZhbCAnLCAnJyk7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBpZiAoc2Vzc2lvbi5hcmd2Lm9wdGlvbnMuaSkgc2Vzc2lvbi5leGVjdXRlKGBfLmV2YWwgLWkgJHtjbWR9YCk7XG4gICAgICAgICAgICBzZXNzaW9uLmV4ZWN1dGUoYF8uZXZhbCAke2NtZH1gKTtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfSk7XG5cbiAgICBjdHguY29tbWFuZCgnQVBJIDxuYW1lPiBbYXJnMF0gW2FyZzFdIFthcmcyXSBbYXJnM10nLCB7IGF1dGhvcml0eTogNSB9KVxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSwgbmFtZSwgLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgc2Vzc2lvbi5ib3RbbmFtZV0oLi4uYXJncyk7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVzKTtcbiAgICAgICAgfSk7XG5cbiAgICBjdHguY29tbWFuZCgnQCcsICd1dGlscycsIHsgaGlkZGVuOiB0cnVlIH0pO1xuICAgIGN0eC5jb21tYW5kKCdALnNpbGVudCA8Y29tbWFuZDp0ZXh0PicsIHsgaGlkZGVuOiB0cnVlIH0pXG4gICAgICAgIC5hY3Rpb24oKHsgc2Vzc2lvbiB9LCBjb21tYW5kKSA9PiBzZXNzaW9uLmV4ZWN1dGVTaWxlbnQoY29tbWFuZCkpO1xuICAgIGN0eC5jb21tYW5kKCdALnNsZWVwIDxkdXJhdGlvbj4gPGNvbW1hbmQ6dGV4dD4nLCB7IGhpZGRlbjogdHJ1ZSB9KVxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSwgX2R1cmF0aW9uLCBjb21tYW5kKSA9PiB7XG4gICAgICAgICAgICBsZXQgZHVyYXRpb24gPSBNYXRoLm1pbigxMDAwMCwgK19kdXJhdGlvbik7XG4gICAgICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKGR1cmF0aW9uKSB8fCAhZHVyYXRpb24pIGR1cmF0aW9uID0gMDtcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwKGR1cmF0aW9uKTtcbiAgICAgICAgICAgIGF3YWl0IHNlc3Npb24uZXhlY3V0ZShjb21tYW5kKTtcbiAgICAgICAgfSk7XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1lbXB0eS1mdW5jdGlvbiAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmltcG9ydCAqIGFzIHN1cGVyYWdlbnQgZnJvbSAnc3VwZXJhZ2VudCc7XG5pbXBvcnQgcHJveHkgZnJvbSAnc3VwZXJhZ2VudC1wcm94eSc7XG5pbXBvcnQgeyBBcHAsIFBsYXRmb3JtLCBTZXNzaW9uIH0gZnJvbSAna29pc2hpLWNvcmUnO1xuaW1wb3J0IHsgTG9nZ2VyLCBzZWdtZW50IH0gZnJvbSAna29pc2hpLXV0aWxzJztcbmltcG9ydCB0eXBlIHsgQnJvd3NlciB9IGZyb20gJ3B1cHBldGVlcic7XG5cbnByb3h5KHN1cGVyYWdlbnQpO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcignZ2l0aHViJyk7XG5jbGFzcyBJbnZhbGlkVG9rZW5FcnJvciBleHRlbmRzIEVycm9yIHsgfVxuaW50ZXJmYWNlIEdpdGh1YlRva2VuIHtcbiAgICBhY2Nlc3NfdG9rZW46IHN0cmluZyxcbiAgICByZWZyZXNoX3Rva2VuOiBzdHJpbmcsXG59XG5pbnRlcmZhY2UgU3Vic2NyaXB0aW9uIHtcbiAgICBfaWQ6IHN0cmluZyxcbiAgICB0YXJnZXQ6IHN0cmluZ1tdLFxufVxuaW50ZXJmYWNlIEV2ZW50SGFuZGxlciB7XG4gICAgbWVyZ2U6IGJvb2xlYW47XG4gICAgaG9vaz86IChib2R5OiBhbnkpID0+IFByb21pc2U8W3N0cmluZz8sIFJlY29yZDxzdHJpbmcsIGFueT4/XT5cbiAgICBpbnRlcmFjdD86IChtZXNzYWdlOiBzdHJpbmcsIHNlc3Npb246IFNlc3Npb24sIGV2ZW50OiBhbnksIGdldFRva2VuOiAoKSA9PiBQcm9taXNlPHN0cmluZz4pID0+IFByb21pc2U8W3N0cmluZz8sIFJlY29yZDxzdHJpbmcsIGFueT4/XSB8IGJvb2xlYW4+XG59XG5kZWNsYXJlIG1vZHVsZSAna29pc2hpLWNvcmUnIHtcbiAgICBpbnRlcmZhY2UgVXNlciB7XG4gICAgICAgIEdpdGh1YlRva2VuOiBHaXRodWJUb2tlblxuICAgIH1cbiAgICBpbnRlcmZhY2UgVGFibGVzIHtcbiAgICAgICAgZ2l0aHViX3dhdGNoOiBTdWJzY3JpcHRpb24sXG4gICAgICAgIGdpdGh1Yl9kYXRhOiBhbnlcbiAgICB9XG59XG5mdW5jdGlvbiBmb3JtYXRNYXJrZG93bihzb3VyY2U6IHN0cmluZykge1xuICAgIHJldHVybiBzb3VyY2VcbiAgICAgICAgLnJlcGxhY2UoL15gYGAoLiopJC9nbSwgJycpXG4gICAgICAgIC5yZXBsYWNlKC9ePCEtLSguKiktLT4kL2dtLCAnJylcbiAgICAgICAgLnJlcGxhY2UoL1xcblxccypcXG4vZywgJ1xcbicpXG4gICAgICAgIC5yZXBsYWNlKC8oXFxyP1xcbiAqKSsvZ21pLCAnXFxuJyk7XG59XG5mdW5jdGlvbiBzaGEyNTYoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMjU2JylcbiAgICAgICAgLnVwZGF0ZShzdHIpXG4gICAgICAgIC5kaWdlc3QoJ2hleCcpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzY3JlZW5zaG90KGJyb3dzZXI6IEJyb3dzZXIsIHVybDogc3RyaW5nLCBzZWxlY3Rvcjogc3RyaW5nLCBvZmZzZXQ6IG51bWJlcltdKSB7XG4gICAgY29uc3QgcGFnZSA9IGF3YWl0IGJyb3dzZXIucGFnZSgpO1xuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHBhZ2UuZ290byh1cmwsIHsgd2FpdFVudGlsOiAnbmV0d29ya2lkbGUwJyB9KTtcbiAgICAgICAgY29uc3QgZWwgPSBhd2FpdCBwYWdlLiQoc2VsZWN0b3IpO1xuICAgICAgICBsZXQgY2xpcCA9IGF3YWl0IGVsLmJvdW5kaW5nQm94KCk7XG4gICAgICAgIGF3YWl0IHBhZ2Uuc2V0Vmlld3BvcnQoe1xuICAgICAgICAgICAgaGVpZ2h0OiBNYXRoLmNlaWwoY2xpcC55ICsgY2xpcC5oZWlnaHQgKyA1MCksXG4gICAgICAgICAgICB3aWR0aDogMTA4MCxcbiAgICAgICAgfSk7XG4gICAgICAgIGNsaXAgPSBhd2FpdCBlbC5ib3VuZGluZ0JveCgpO1xuICAgICAgICBjbGlwID0ge1xuICAgICAgICAgICAgeDogY2xpcC54IC0gb2Zmc2V0WzBdLFxuICAgICAgICAgICAgeTogY2xpcC55IC0gb2Zmc2V0WzFdLFxuICAgICAgICAgICAgd2lkdGg6IGNsaXAud2lkdGggKyBvZmZzZXRbMl0sXG4gICAgICAgICAgICBoZWlnaHQ6IGNsaXAuaGVpZ2h0ICsgb2Zmc2V0WzNdLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBiYXNlNjQgPSBhd2FpdCBwYWdlLnNjcmVlbnNob3Qoe1xuICAgICAgICAgICAgZW5jb2Rpbmc6ICdiYXNlNjQnLFxuICAgICAgICAgICAgY2xpcCxcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IHBhZ2UuY2xvc2UoKTtcbiAgICAgICAgcmV0dXJuIGJhc2U2NDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBhd2FpdCBwYWdlLmNsb3NlKCk7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGFwcGx5ID0gKGFwcDogQXBwLCBjb25maWc6IGFueSkgPT4ge1xuICAgIGZ1bmN0aW9uIEdldCh1cmw6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3VwZXJhZ2VudFxuICAgICAgICAgICAgLmdldCh1cmwpXG4gICAgICAgICAgICAucHJveHkoY29uZmlnLnByb3h5KVxuICAgICAgICAgICAgLnNldCgnQWNjZXB0JywgJ2FwcGxpY2F0aW9uL3ZuZC5naXRodWIudjMranNvbicpXG4gICAgICAgICAgICAuc2V0KCdVc2VyLUFnZW50JywgJ0h5ZHJvQm90Jyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gUG9zdCh1cmw6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3VwZXJhZ2VudFxuICAgICAgICAgICAgLnBvc3QodXJsKVxuICAgICAgICAgICAgLnByb3h5KGNvbmZpZy5wcm94eSlcbiAgICAgICAgICAgIC5zZXQoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi92bmQuZ2l0aHViLnYzK2pzb24nKVxuICAgICAgICAgICAgLnNldCgnVXNlci1BZ2VudCcsICdIeWRyb0JvdCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFB1dCh1cmw6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3VwZXJhZ2VudFxuICAgICAgICAgICAgLnB1dCh1cmwpXG4gICAgICAgICAgICAucHJveHkoY29uZmlnLnByb3h5KVxuICAgICAgICAgICAgLnNldCgnQWNjZXB0JywgJ2FwcGxpY2F0aW9uL3ZuZC5naXRodWIudjMranNvbicpXG4gICAgICAgICAgICAuc2V0KCdVc2VyLUFnZW50JywgJ0h5ZHJvQm90Jyk7XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gcHVsbFJlcXVlc3RJbnRlcmFjdG9yKG1lc3NhZ2U6IHN0cmluZywgc2Vzc2lvbjogU2Vzc2lvbiwgZXZlbnQsIGdldFRva2VuKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmluY2x1ZGVzKCchIWxpbmsnKSkgcmV0dXJuIFtldmVudC5saW5rXTtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCBnZXRUb2tlbigpO1xuICAgICAgICBpZiAobWVzc2FnZS5pbmNsdWRlcygnISFtZXJnZScpKSB7XG4gICAgICAgICAgICBjb25zdCBjb21taXRNc2cgPSBtZXNzYWdlLnNwbGl0KCchIW1lcmdlJylbMV07XG4gICAgICAgICAgICBhd2FpdCBQdXQoYGh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvJHtldmVudC5yZXBvbmFtZX0vcHVsbHMvJHtldmVudC5pc3N1ZUlkfS9tZXJnZWApXG4gICAgICAgICAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGB0b2tlbiAke3Rva2VufWApXG4gICAgICAgICAgICAgICAgLnNlbmQoeyBjb21taXRfdGl0bGU6IGNvbW1pdE1zZy50cmltKCkgfSk7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJyEhYXBwcm92ZScpKSB7XG4gICAgICAgICAgICBhd2FpdCBQb3N0KGBodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zLyR7ZXZlbnQucmVwb25hbWV9L3B1bGxzLyR7ZXZlbnQuaXNzdWVJZH0vcmV2aWV3c2ApXG4gICAgICAgICAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGB0b2tlbiAke3Rva2VufWApXG4gICAgICAgICAgICAgICAgLnNlbmQoeyBldmVudDogJ0FQUFJPVkUnIH0pO1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmluY2x1ZGVzKCchIWRpZmYnKSkge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHNjcmVlbnNob3QoYXBwLnB1cHBldGVlciwgYCR7ZXZlbnQubGlua30vZmlsZXNgLCAnLmZpbGVzLWJ1Y2tldCcsIFswLCAwLCAwLCAwXSk7XG4gICAgICAgICAgICByZXR1cm4gW2BbQ1E6aW1hZ2UsZmlsZT1iYXNlNjQ6Ly8ke2RhdGF9XWBdO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IFBvc3QoYGh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvJHtldmVudC5yZXBvbmFtZX0vaXNzdWVzLyR7ZXZlbnQuaXNzdWVJZH0vY29tbWVudHNgKVxuICAgICAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGB0b2tlbiAke3Rva2VufWApXG4gICAgICAgICAgICAuc2VuZCh7IGJvZHk6IG1lc3NhZ2UgfSk7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBhcHAub24oJ2Nvbm5lY3QnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbGwgPSBhcHAuZGF0YWJhc2UubW9uZ28uY29sbGVjdGlvbignZ2l0aHViX3dhdGNoJyk7XG4gICAgICAgIGNvbnN0IGNvbGxEYXRhID0gYXBwLmRhdGFiYXNlLm1vbmdvLmNvbGxlY3Rpb24oJ2dpdGh1Yl9kYXRhJyk7XG5cbiAgICAgICAgY29uc3QgZXZlbnRzOiBSZWNvcmQ8c3RyaW5nLCBFdmVudEhhbmRsZXI+ID0ge1xuICAgICAgICAgICAgcHVzaDoge1xuICAgICAgICAgICAgICAgIGFzeW5jIGhvb2soYm9keSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWYgPSBib2R5LnJlZi5zcGxpdCgnLycpWzJdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZW5kZXIgPSBib2R5LmhlYWRfY29tbWl0ID8gYm9keS5oZWFkX2NvbW1pdC5hdXRob3IudXNlcm5hbWUgOiBib2R5LnNlbmRlci5sb2dpbjtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFkZGVkID0gMDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbW92ZWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbW9kaWZpZWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzcCA9IGBSZWNlbnQgY29tbWl0IHRvICR7Ym9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZX0ke3JlZiA9PT0gJ21hc3RlcicgPyAnJyA6IGA6JHtyZWZ9YH0gYnkgJHtzZW5kZXJ9YDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5zb3VyY2VncmFwaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdXBlcmFnZW50LnBvc3QoJ2h0dHBzOi8vc291cmNlZ3JhcGguY29tLy5hcGkvZ3JhcGhxbCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgdG9rZW4gJHtjb25maWcuc291cmNlZ3JhcGh9YClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNlbmQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnk6IGBxdWVyeXtcbnJlcG9zaXRvcnkobmFtZTpcImdpdGh1Yi5jb20vJHtib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lfVwiKXtcbiAgY29tcGFyaXNvbihiYXNlOlwiJHtib2R5LmJlZm9yZX1cIixoZWFkOlwiJHtib2R5LmFmdGVyfVwiKXtcbiAgICBmaWxlRGlmZnN7bm9kZXN7c3RhdHthZGRlZCBjaGFuZ2VkIGRlbGV0ZWR9fX1cbiAgfVxufVxufWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzdWx0LmJvZHkuZGF0YSkgbG9nZ2VyLmluZm8ocmVzdWx0LmJvZHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFyZXN1bHQuYm9keS5kYXRhLnJlcG9zaXRvcnkpIGxvZ2dlci5pbmZvKCdSZXBvIG5vdCBmb3VuZDogJXMnLCBib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhbmdlcyA9IHJlc3VsdC5ib2R5LmRhdGEucmVwb3NpdG9yeS5jb21wYXJpc29uLmZpbGVEaWZmcy5ub2RlcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjaGFuZ2Ugb2YgY2hhbmdlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkZWQgKz0gY2hhbmdlLnN0YXQuYWRkZWQgfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQgKz0gY2hhbmdlLnN0YXQuZGVsZXRlZCB8fCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWQgKz0gY2hhbmdlLnN0YXQuY2hhbmdlZCB8fCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYWRkZWQgfHwgcmVtb3ZlZCB8fCBtb2RpZmllZCkgcmVzcCArPSBgXFxuJHthZGRlZH0rICR7cmVtb3ZlZH0tICR7bW9kaWZpZWR9TWA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChib2R5LmNvbW1pdHMubGVuZ3RoIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjb21taXQgb2YgYm9keS5jb21taXRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGV0ID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1pdC5hZGRlZC5sZW5ndGgpIGRldC5wdXNoKGAke2NvbW1pdC5hZGRlZC5sZW5ndGh9K2ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21taXQucmVtb3ZlZC5sZW5ndGgpIGRldC5wdXNoKGAke2NvbW1pdC5yZW1vdmVkLmxlbmd0aH0tYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1pdC5tb2RpZmllZC5sZW5ndGgpIGRldC5wdXNoKGAke2NvbW1pdC5tb2RpZmllZC5sZW5ndGh9TWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgKz0gYFxcbiR7Y29tbWl0LmlkLnN1YnN0cigwLCA2KX0gJHtmb3JtYXRNYXJrZG93bihjb21taXQubWVzc2FnZSkucmVwbGFjZSgvXFxuL2csICdcXHJcXG4nKX0gKCR7ZGV0LmpvaW4oJyAnKX0pYDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb21taXQgPSBib2R5LmNvbW1pdHNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGV0ID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWl0LmFkZGVkLmxlbmd0aCkgZGV0LnB1c2goYCR7Y29tbWl0LmFkZGVkLmxlbmd0aH0rYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWl0LnJlbW92ZWQubGVuZ3RoKSBkZXQucHVzaChgJHtjb21taXQucmVtb3ZlZC5sZW5ndGh9LWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1pdC5tb2RpZmllZC5sZW5ndGgpIGRldC5wdXNoKGAke2NvbW1pdC5tb2RpZmllZC5sZW5ndGh9TWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCArPSBgXFxuJHtjb21taXQuaWQuc3Vic3RyKDAsIDYpfSAke2Zvcm1hdE1hcmtkb3duKGNvbW1pdC5tZXNzYWdlKS5yZXBsYWNlKC9cXG4vZywgJ1xcclxcbicpfSAoJHtkZXQuam9pbignICcpfSlgO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCArPSBgXFxuLi4uJHtib2R5LmNvbW1pdHMubGVuZ3RoIC0gMn0gY29tbWl0cyBvbWl0dGVkLi4uYDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1pdCA9IGJvZHkuY29tbWl0c1tib2R5LmNvbW1pdHMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21taXQuYWRkZWQubGVuZ3RoKSBkZXQucHVzaChgJHtjb21taXQuYWRkZWQubGVuZ3RofStgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21taXQucmVtb3ZlZC5sZW5ndGgpIGRldC5wdXNoKGAke2NvbW1pdC5yZW1vdmVkLmxlbmd0aH0tYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWl0Lm1vZGlmaWVkLmxlbmd0aCkgZGV0LnB1c2goYCR7Y29tbWl0Lm1vZGlmaWVkLmxlbmd0aH1NYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwICs9IGBcXG4ke2NvbW1pdC5pZC5zdWJzdHIoMCwgNil9ICR7Zm9ybWF0TWFya2Rvd24oY29tbWl0Lm1lc3NhZ2UpLnJlcGxhY2UoL1xcbi9nLCAnXFxyXFxuJyl9ICgke2RldC5qb2luKCcgJyl9KWA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtyZXNwLCB7IGxpbms6IGJvZHkuY29tcGFyZSB9XTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFzeW5jIGludGVyYWN0KG1lc3NhZ2UsIHNlc3Npb24sIGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmluY2x1ZGVzKCchIWxpbmsnKSkgcmV0dXJuIFtldmVudC5saW5rXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJyEhZGlmZicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgc2NyZWVuc2hvdChhcHAucHVwcGV0ZWVyLCBldmVudC5saW5rLCAnLmZpbGVzLWJ1Y2tldCcsIFswLCAwLCAwLCAwXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2BbQ1E6aW1hZ2UsZmlsZT1iYXNlNjQ6Ly8ke2RhdGF9XWBdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZvcms6IHtcbiAgICAgICAgICAgICAgICBtZXJnZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhc3luYyBob29rKGJvZHkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHkuYWN0aW9uID09PSAnY3JlYXRlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbYCR7Ym9keS5zZW5kZXIubG9naW59IGZvcmtlZCAke2JvZHkucmVwb3NpdG9yeS5mdWxsX25hbWV9YF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNzdWVzOiB7XG4gICAgICAgICAgICAgICAgbWVyZ2U6IChib2R5KSA9PiBgJHtib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lfS8ke2JvZHkuaXNzdWUubnVtYmVyfWAsXG4gICAgICAgICAgICAgICAgYXN5bmMgaG9vayhib2R5KSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZXNwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYm9keS5hY3Rpb24gPT09ICdvcGVuZWQnIHx8IGJvZHkuYWN0aW9uID09PSAnZWRpdGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCA9IGAke2JvZHkuc2VuZGVyLmxvZ2lufSAke2JvZHkuYWN0aW9ufSBpc3N1ZSAke2JvZHkucmVwb3NpdG9yeS5mdWxsX25hbWV9IyR7Ym9keS5pc3N1ZS5udW1iZXJ9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZTY0ID0gYXdhaXQgc2NyZWVuc2hvdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwLnB1cHBldGVlciwgYm9keS5pc3N1ZS5odG1sX3VybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy5qcy1kaXNjdXNzaW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWzY4LCAxMzAsIDkyLCAxMzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCArPSBgXFxuJHtzZWdtZW50LmltYWdlKGBiYXNlNjQ6Ly8ke2Jhc2U2NH1gKX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTG9nZ2VyKCdwdXBwZXRlZXInKS53YXJuKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwICs9IGBcXG4ke2Zvcm1hdE1hcmtkb3duKGJvZHkuaXNzdWUudGl0bGUpfVxcbiR7Zm9ybWF0TWFya2Rvd24oYm9keS5pc3N1ZS5ib2R5IHx8ICcnKX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJvZHkuYWN0aW9uID09PSAnYXNzaWduZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwID0gYCR7Ym9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZX0jJHtib2R5Lmlzc3VlLm51bWJlcn06IEFzc2lnbmVkICR7Ym9keS5hc3NpZ25lZS5sb2dpbn1gO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJvZHkuYWN0aW9uID09PSAndW5hc3NpZ25lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgPSBgJHtib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lfSMke2JvZHkuaXNzdWUubnVtYmVyfTogVW5hc3NpZ25lZCAke2JvZHkuYXNzaWduZWUubG9naW59YDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChib2R5LmFjdGlvbiA9PT0gJ2Nsb3NlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgPSBgJHtib2R5LnNlbmRlci5sb2dpbn0gY2xvc2VkICR7Ym9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZX0jJHtib2R5Lmlzc3VlLm51bWJlcn0uYDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChbJ3Jlb3BlbmVkJywgJ2xvY2tlZCcsICd1bmxvY2tlZCddLmluY2x1ZGVzKGJvZHkuYWN0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCA9IGAke2JvZHkuc2VuZGVyLmxvZ2lufSAke2JvZHkuYWN0aW9ufSBJc3N1ZToke2JvZHkucmVwb3NpdG9yeS5mdWxsX25hbWV9IyR7Ym9keS5pc3N1ZS5udW1iZXJ9YDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChib2R5LmFjdGlvbiA9PT0gJ2xhYmVsZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgcmVzcCA9IGAke2JvZHkuc2VuZGVyLmxvZ2lufSBsYWJsZWQgJHtib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lfSMke2JvZHkuaXNzdWUubnVtYmVyfSAke2JvZHkubGFibGUubmFtZX1gO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgcmVzcCA9IGBVbmtub3duIGlzc3VlIGFjdGlvbjogJHtib2R5LmFjdGlvbn1gO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rOiBib2R5LmNvbW1lbnQ/Lmh0bWxfdXJsIHx8IGJvZHkuaXNzdWUuaHRtbF91cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwb25hbWU6IGJvZHkucmVwb3NpdG9yeS5mdWxsX25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNzdWVJZDogYm9keS5pc3N1ZS5udW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXN5bmMgaW50ZXJhY3QobWVzc2FnZSwgc2Vzc2lvbiwgZXZlbnQsIGdldFRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmluY2x1ZGVzKCchIWxpbmsnKSkgcmV0dXJuIFtldmVudC5saW5rXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCBnZXRUb2tlbigpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBHZXQoYGh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvJHtldmVudC5yZXBvbmFtZX0vaXNzdWVzLyR7ZXZlbnQuaXNzdWVJZH0vY29tbWVudHNgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGB0b2tlbiAke3Rva2VufWApXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2VuZCh7IGJvZHk6IG1lc3NhZ2UgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzc3VlX2NvbW1lbnQ6IHtcbiAgICAgICAgICAgICAgICBtZXJnZTogKGJvZHkpID0+IGAke2JvZHkucmVwb3NpdG9yeS5mdWxsX25hbWV9LyR7Ym9keS5pc3N1ZS5udW1iZXJ9YCxcbiAgICAgICAgICAgICAgICBhc3luYyBob29rKGJvZHkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3A7XG4gICAgICAgICAgICAgICAgICAgIGlmIChib2R5LmFjdGlvbiA9PT0gJ2NyZWF0ZWQnIHx8IGJvZHkuYWN0aW9uID09PSAnZWRpdGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHkuY29tbWVudC51c2VyLmxvZ2luID09PSAnY29kZWNvdltib3RdJykgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgPSBgJHtib2R5LmNvbW1lbnQudXNlci5sb2dpbn0gJHtib2R5LmFjdGlvbiA9PT0gJ2NyZWF0ZWQnID8gJ2NvbW1lbnRlZCcgOiAnZWRpdGVkIGEgY29tbWVudCd9IG9uICR7Ym9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZX0jJHtib2R5Lmlzc3VlLm51bWJlcn1cXG4ke2JvZHkuaXNzdWUudGl0bGV9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZTY0ID0gYXdhaXQgc2NyZWVuc2hvdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwLnB1cHBldGVlciwgYm9keS5pc3N1ZS5odG1sX3VybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCMke2JvZHkuY29tbWVudC5odG1sX3VybC5zcGxpdCgnIycpWzFdfWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFs4NiwgMTQsIDkyLCAyMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwICs9IGBcXG4ke3NlZ21lbnQuaW1hZ2UoYGJhc2U2NDovLyR7YmFzZTY0fWApfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBMb2dnZXIoJ3B1cHBldGVlcicpLndhcm4oZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgKz0gYFxcbiR7Zm9ybWF0TWFya2Rvd24oYm9keS5jb21tZW50LmJvZHkpfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AsXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluazogYm9keS5pc3N1ZS5odG1sX3VybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBvbmFtZTogYm9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc3N1ZUlkOiBib2R5Lmlzc3VlLm51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpbnRlcmFjdDogcHVsbFJlcXVlc3RJbnRlcmFjdG9yLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHB1bGxfcmVxdWVzdDoge1xuICAgICAgICAgICAgICAgIG1lcmdlOiAoYm9keSkgPT4gYCR7Ym9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZX0vJHtib2R5LnB1bGxfcmVxdWVzdC5udW1iZXJ9YCxcbiAgICAgICAgICAgICAgICBhc3luYyBob29rKGJvZHkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3A7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgZnVsbF9uYW1lLCBvd25lciB9ID0gYm9keS5yZXBvc2l0b3J5O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyLCBodG1sX3VybCwgdGl0bGUsIGJhc2UsIGhlYWQsIG51bWJlciwgbWVyZ2VkLFxuICAgICAgICAgICAgICAgICAgICB9ID0gYm9keS5wdWxsX3JlcXVlc3Q7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZWZpeCA9IG5ldyBSZWdFeHAoYF4ke293bmVyLmxvZ2lufTpgKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZUxhYmVsID0gYmFzZS5sYWJlbC5yZXBsYWNlKHByZWZpeCwgJycpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWFkTGFiZWwgPSBoZWFkLmxhYmVsLnJlcGxhY2UocHJlZml4LCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChib2R5LmFjdGlvbiA9PT0gJ29wZW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgPSBgJHt1c2VyLmxvZ2lufSBvcGVuZWQgYW4gcHVsbCByZXF1ZXN0IGZvciAke2Z1bGxfbmFtZX0jJHtudW1iZXJ9KCR7YmFzZUxhYmVsfTwke2hlYWRMYWJlbH0pYDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZTY0ID0gYXdhaXQgc2NyZWVuc2hvdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwLnB1cHBldGVlciwgaHRtbF91cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcuanMtZGlzY3Vzc2lvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFs2OCwgMTYwLCA5MiwgMTYwXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgKz0gYFxcbiR7c2VnbWVudC5pbWFnZShgYmFzZTY0Oi8vJHtiYXNlNjR9YCl9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IExvZ2dlcigncHVwcGV0ZWVyJykud2FybihlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCArPSBgXFxuJHt0aXRsZX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgKz0gYFxcbiR7Zm9ybWF0TWFya2Rvd24oYm9keS5wdWxsX3JlcXVlc3QuYm9keSB8fCAnJyl9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChib2R5LmFjdGlvbiA9PT0gJ2NyZWF0ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwID0gYCR7dXNlci5sb2dpbn0gY29tbWVudGVkIG9uICR7ZnVsbF9uYW1lfSMke251bWJlcn0oJHtiYXNlTGFiZWx9PCR7aGVhZExhYmVsfSlgO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCArPSBgXFxuJHtib2R5LmNvbW1lbnQuYm9keX1gO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJvZHkuYWN0aW9uID09PSAnYXNzaWduZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwID0gYCR7ZnVsbF9uYW1lfSMke251bWJlcn06IEFzc2lnbmVkICR7Ym9keS5hc3NpZ25lZS5sb2dpbn1gO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJvZHkuYWN0aW9uID09PSAndW5hc3NpZ25lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgPSBgJHtmdWxsX25hbWV9IyR7bnVtYmVyfTogVW5hc3NpZ25lZCAke2JvZHkuYXNzaWduZWUubG9naW59YDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChib2R5LmFjdGlvbiA9PT0gJ3Jldmlld19yZXF1ZXN0ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwID0gYCR7ZnVsbF9uYW1lfSMke251bWJlcn06IFJlcXVlc3QgYSByZXZpZXcuYDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChib2R5LmFjdGlvbiA9PT0gJ2Nsb3NlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBtZXJnZWQgPyAnbWVyZ2VkJyA6ICdjbG9zZWQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCA9IGAke2JvZHkuc2VuZGVyLmxvZ2lufSAke3R5cGV9ICR7ZnVsbF9uYW1lfSMke251bWJlcn0oJHtiYXNlTGFiZWx9PCR7aGVhZExhYmVsfSlgO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFsncmVvcGVuZWQnLCAnbG9ja2VkJywgJ3VubG9ja2VkJ10uaW5jbHVkZXMoYm9keS5hY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwID0gYCR7Ym9keS5zZW5kZXIubG9naW59ICR7Ym9keS5hY3Rpb259IFBSOiR7ZnVsbF9uYW1lfSMke251bWJlcn1gO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFsnc3luY2hyb25pemUnXS5pbmNsdWRlcyhib2R5LmFjdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChib2R5LmFjdGlvbiA9PT0gJ3JlYWR5X2Zvcl9yZXZpZXcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwID0gYCR7ZnVsbF9uYW1lfSMke251bWJlcn0gaXMgcmVhZHkgZm9yIHJldmlldy5gO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgcmVzcCA9IGBVbmtub3duIHB1bGwgcmVxdWVzdCBhY3Rpb246ICR7Ym9keS5hY3Rpb259YDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AsXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluazogaHRtbF91cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwb25hbWU6IGZ1bGxfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc3N1ZUlkOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW50ZXJhY3Q6IHB1bGxSZXF1ZXN0SW50ZXJhY3RvcixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwdWxsX3JlcXVlc3RfcmV2aWV3OiB7XG4gICAgICAgICAgICAgICAgbWVyZ2U6IHRydWUsXG4gICAgICAgICAgICAgICAgYXN5bmMgaG9vayhib2R5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChib2R5LnJldmlldy5zdGF0ZSA9PT0gJ2NvbW1lbnRlZCcpIHJldHVybiBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHkucmV2aWV3LnN0YXRlID09PSAnYXBwcm92ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2Ake2JvZHkuc2VuZGVyLmxvZ2lufSBhcHByb3ZlZCAke2JvZHkucmVwb3NpdG9yeS5mdWxsX25hbWV9IyR7Ym9keS5wdWxsX3JlcXVlc3QubnVtYmVyfWBdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5rOiBib2R5LnB1bGxfcmVxdWVzdC5odG1sX3VybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcG9uYW1lOiBib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNzdWVJZDogYm9keS5wdWxsX3JlcXVlc3QubnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICB9XTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGludGVyYWN0OiBwdWxsUmVxdWVzdEludGVyYWN0b3IsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHVsbF9yZXF1ZXN0X3Jldmlld19jb21tZW50OiB7XG4gICAgICAgICAgICAgICAgbWVyZ2U6IHRydWUsXG4gICAgICAgICAgICAgICAgYXN5bmMgaG9vayhib2R5KSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZXNwID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChib2R5LmFjdGlvbiA9PT0gJ2NyZWF0ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwID0gYCR7Ym9keS5jb21tZW50LnVzZXIubG9naW59IGNvbW1lbnRlZCBvbiAke2JvZHkucmVwb3NpdG9yeS5mdWxsX25hbWV9IyR7Ym9keS5wdWxsX3JlcXVlc3QubnVtYmVyfVxcbmA7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwICs9IGZvcm1hdE1hcmtkb3duKGJvZHkuY29tbWVudC5ib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rOiBib2R5LnB1bGxfcmVxdWVzdC5odG1sX3VybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBvbmFtZTogYm9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc3N1ZUlkOiBib2R5LnB1bGxfcmVxdWVzdC5udW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW50ZXJhY3Q6IHB1bGxSZXF1ZXN0SW50ZXJhY3RvcixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGFyOiB7XG4gICAgICAgICAgICAgICAgbWVyZ2U6IHRydWUsXG4gICAgICAgICAgICAgICAgYXN5bmMgaG9vayhib2R5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChib2R5LmFjdGlvbiA9PT0gJ2NyZWF0ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXdhaXQgY29sbERhdGEuZmluZE9uZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3N0YXInLCB1c2VyOiBib2R5LnNlbmRlci5sb2dpbiwgcmVwbzogYm9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke2JvZHkuc2VuZGVyLmxvZ2lufSBzdGFycmVkICR7Ym9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZX0gKHRvdGFsICR7Ym9keS5yZXBvc2l0b3J5LnN0YXJnYXplcnNfY291bnR9IHN0YXJnYXplcnMpYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHVzZXI6IGJvZHkuc2VuZGVyLmxvZ2luLCByZXBvOiBib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHdhdGNoOiB7XG4gICAgICAgICAgICAgICAgbWVyZ2U6IHRydWUsXG4gICAgICAgICAgICAgICAgYXN5bmMgaG9vayhib2R5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChib2R5LmFjdGlvbiA9PT0gJ2NyZWF0ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXdhaXQgY29sbERhdGEuZmluZE9uZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3dhdGNoJywgdXNlcjogYm9keS5zZW5kZXIubG9naW4sIHJlcG86IGJvZHkucmVwb3NpdG9yeS5mdWxsX25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSkgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtib2R5LnNlbmRlci5sb2dpbn0gaXMgd2F0Y2hpbmcgJHtib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lfSAodG90YWwgJHtib2R5LnJlcG9zaXRvcnkud2F0Y2hlcnNfY291bnR9IHdhdGNoZXJzKWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyB1c2VyOiBib2R5LnNlbmRlci5sb2dpbiwgcmVwbzogYm9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm9qZWN0X2NhcmQ6IHt9LFxuICAgICAgICAgICAgcHJvamVjdF9jb2x1bW46IHt9LFxuICAgICAgICAgICAgY2hlY2tfcnVuOiB7fSxcbiAgICAgICAgICAgIGNoZWNrX3N1aXRlOiB7fSxcbiAgICAgICAgICAgIHJlcG9zaXRvcnlfdnVsbmVyYWJpbGl0eV9hbGVydDoge30sXG4gICAgICAgICAgICBzdGF0dXM6IHt9LFxuICAgICAgICAgICAgbGFiZWw6IHt9LFxuICAgICAgICAgICAgZGVwbG95bWVudF9zdGF0dXM6IHt9LFxuICAgICAgICAgICAgZGVwbG95bWVudDoge30sXG4gICAgICAgICAgICBwYWdlX2J1aWxkOiB7fSxcbiAgICAgICAgfTtcblxuICAgICAgICBhcHAucm91dGVyLnBvc3QoJy9naXRodWInLCBhc3luYyAoY3R4KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gY3R4LnJlcXVlc3QuaGVhZGVyc1sneC1naXRodWItZXZlbnQnXSBhcyBzdHJpbmc7XG4gICAgICAgICAgICAgICAgbGV0IGJvZHk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjdHgucmVxdWVzdC5ib2R5LnBheWxvYWQgPT09ICdzdHJpbmcnKSBib2R5ID0gSlNPTi5wYXJzZShjdHgucmVxdWVzdC5ib2R5LnBheWxvYWQpO1xuICAgICAgICAgICAgICAgIGVsc2UgYm9keSA9IGN0eC5yZXF1ZXN0LmJvZHk7XG4gICAgICAgICAgICAgICAgY29uc3QgX2lkID0gc2hhMjU2KEpTT04uc3RyaW5naWZ5KGJvZHkpKTtcbiAgICAgICAgICAgICAgICBpZiAoIWV2ZW50c1tldmVudF0pIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRzW2V2ZW50XSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvb2s6IChiKSA9PiBQcm9taXNlLnJlc29sdmUoW2Ake2IucmVwb3NpdG9yeS5mdWxsX25hbWV9IHRyaWdnZXJlZCBhbiB1bmtub3duIGV2ZW50OiAke2V2ZW50fWBdKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50c1tldmVudF0uaG9vaykge1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIG9yZ2FuaXphdGlvbiB3ZWJob29rP1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXBvbmFtZSA9IGJvZHkucmVwb3NpdG9yeS5mdWxsX25hbWU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFttZXNzYWdlLCBpbmZdID0gYXdhaXQgZXZlbnRzW2V2ZW50XS5ob29rKGJvZHkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBjb2xsRGF0YS5maW5kT25lKHsgX2lkIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlbGF0aXZlSWRzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBjb2xsLmZpbmRPbmUoeyBfaWQ6IHJlcG9uYW1lLnRvTG93ZXJDYXNlKCkgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpZCBvZiBkYXRhLnRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW3BsYXRmb3JtLCBnaWRdID0gaWQuc3BsaXQoJzonKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hd2FpdC1pbi1sb29wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnZG9jID0gYXdhaXQgYXBwLmRhdGFiYXNlLmdldENoYW5uZWwocGxhdGZvcm0gYXMgUGxhdGZvcm0sIGdpZCwgWydhc3NpZ25lZSddKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZG9jLmFzc2lnbmVlICYmIGFwcC5ib3RzW2Ake3BsYXRmb3JtfToke2dkb2MuYXNzaWduZWV9YF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZUlkcy5wdXNoKGFwcC5ib3RzW2Ake3BsYXRmb3JtfToke2dkb2MuYXNzaWduZWV9YF0uc2VuZE1lc3NhZ2UoZ2lkLCBtZXNzYWdlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgbG9nZ2VyLndhcm4oJ0Nhbm5vdCBzZW5kIG1lc3NhZ2UgdG8gJXM6JWQgd2l0aCBhc3NpZ25lZSAlZCcsIHBsYXRmb3JtLCBpZCwgZ2RvYy5hc3NpZ25lZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVJZHMgPSBhd2FpdCBQcm9taXNlLmFsbChyZWxhdGl2ZUlkcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgY29sbERhdGEuaW5zZXJ0T25lKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2lkLCB0eXBlOiBldmVudCwgcmVsYXRpdmVJZHMsIC4uLmluZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5ib2R5ID0gYFB1c2hlZCB0byAke3JlbGF0aXZlSWRzLmxlbmd0aH0gZ3JvdXAocylgO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgY3R4LmJvZHkgPSAnRHVwbGljYXRlIGV2ZW50JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgY3R4LmJvZHkgPSAnRXZlbnQgaWdub3JlZC4nO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICAgICAgICAgIGN0eC5ib2R5ID0gZS50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBhcHAucm91dGVyLmdldCgnL2dpdGh1Yi9hdXRob3JpemUnLCBhc3luYyAoY3R4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBbcGxhdGZvcm0sIGlkXSA9IChjdHgucXVlcnkuc3RhdGUgYXMgc3RyaW5nKS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgY29uc3QgY29kZSA9IGN0eC5xdWVyeS5jb2RlO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3VwZXJhZ2VudC5wb3N0KCdodHRwczovL2dpdGh1Yi5jb20vbG9naW4vb2F1dGgvYWNjZXNzX3Rva2VuJylcbiAgICAgICAgICAgICAgICAucHJveHkoY29uZmlnLnByb3h5KVxuICAgICAgICAgICAgICAgIC5zZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50X2lkOiBjb25maWcuY2xpZW50X2lkLFxuICAgICAgICAgICAgICAgICAgICBjbGllbnRfc2VjcmV0OiBjb25maWcuY2xpZW50X3NlY3JldCxcbiAgICAgICAgICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RfdXJpOiBjb25maWcucmVkaXJlY3RfdXJpLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogY3R4LnF1ZXJ5LnN0YXRlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5ib2R5LmFjY2Vzc190b2tlbikge1xuICAgICAgICAgICAgICAgIGF3YWl0IGFwcC5kYXRhYmFzZS5zZXRVc2VyKHBsYXRmb3JtIGFzIFBsYXRmb3JtLCBpZCwgeyBHaXRodWJUb2tlbjogcmVzdWx0LmJvZHkgfSk7XG4gICAgICAgICAgICAgICAgY3R4LmJvZHkgPSAnRG9uZSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGN0eC5ib2R5ID0gJ0Vycm9yJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXBwLm1pZGRsZXdhcmUoYXN5bmMgKHNlc3Npb24sIG5leHQpID0+IHtcbiAgICAgICAgICAgIGlmICghc2Vzc2lvbi5xdW90ZSkgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZE1zZyA9IHNlc3Npb24ucGFyc2VkLmNvbnRlbnRcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxbQ1E6YXQsLipcXF0vZywgJycpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcW0NROmltYWdlLGZpbGU9KC4qKVxcXS9nLCAoc3RyKSA9PiBgICFbXSgkey9cXFtDUTppbWFnZSxmaWxlPSguKilcXF0vZy5leGVjKHN0cilbMV19KSBgKVxuICAgICAgICAgICAgICAgIC5kZWNvZGUoKS50cmltKCk7XG4gICAgICAgICAgICBpZiAoIXBhcnNlZE1zZykgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgICAgIGNvbnN0IFtyZWxhdGl2ZUV2ZW50LCB1c2VyXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICBjb2xsRGF0YS5maW5kT25lKHsgcmVsYXRpdmVJZHM6IHNlc3Npb24ucXVvdGUubWVzc2FnZUlkIH0pLFxuICAgICAgICAgICAgICAgIGFwcC5kYXRhYmFzZS5nZXRVc2VyKHNlc3Npb24ucGxhdGZvcm0sIHNlc3Npb24udXNlcklkLCBbJ0dpdGh1YlRva2VuJ10pLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBpZiAoIXJlbGF0aXZlRXZlbnQgfHwgIWV2ZW50c1tyZWxhdGl2ZUV2ZW50LnR5cGVdLmludGVyYWN0KSByZXR1cm47XG4gICAgICAgICAgICBsb2dnZXIuaW5mbyhwYXJzZWRNc2cpO1xuICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ1JlcGx5OiAlcycsIHJlbGF0aXZlRXZlbnQpO1xuICAgICAgICAgICAgaWYgKHBhcnNlZE1zZy5zdGFydHNXaXRoKCcvLycpKSByZXR1cm4gbmV4dCgpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhc3luYyBmdW5jdGlvbiBnZXRUb2tlbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF1c2VyLkdpdGh1YlRva2VuPy5hY2Nlc3NfdG9rZW4pIHRocm93IG5ldyBJbnZhbGlkVG9rZW5FcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdXBlcmFnZW50LmdldCgnaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS8nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnByb3h5KGNvbmZpZy5wcm94eSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgdG9rZW4gJHt1c2VyLkdpdGh1YlRva2VuLmFjY2Vzc190b2tlbn1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldCgnVXNlci1BZ2VudCcsICdIeWRyb0JvdCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXVzZXIuR2l0aHViVG9rZW4ucmVmcmVzaF90b2tlbikgdGhyb3cgbmV3IEludmFsaWRUb2tlbkVycm9yKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gYXdhaXQgc3VwZXJhZ2VudC5wb3N0KCdodHRwczovL2dpdGh1Yi5jb20vbG9naW4vb2F1dGgvYWNjZXNzX3Rva2VuJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucHJveHkoY29uZmlnLnByb3h5KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZXQoJ1VzZXItQWdlbnQnLCAnSHlkcm9Cb3QnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JhbnRfdHlwZTogJ3JlZnJlc2hfdG9rZW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRfaWQ6IGNvbmZpZy5jbGllbnRfaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudF9zZWNyZXQ6IGNvbmZpZy5jbGllbnRfc2VjcmV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoX3Rva2VuOiB1c2VyLkdpdGh1YlRva2VuLnJlZnJlc2hfdG9rZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXIuYm9keS5hY2Nlc3NfdG9rZW4pIHRocm93IG5ldyBJbnZhbGlkVG9rZW5FcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgYXBwLmRhdGFiYXNlLnNldFVzZXIoc2Vzc2lvbi5wbGF0Zm9ybSwgc2Vzc2lvbi51c2VySWQsIHsgR2l0aHViVG9rZW46IHIuYm9keSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByLmJvZHkuYWNjZXNzX3Rva2VuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1c2VyLkdpdGh1YlRva2VuLmFjY2Vzc190b2tlbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBhd2FpdCBldmVudHNbcmVsYXRpdmVFdmVudC50eXBlXS5pbnRlcmFjdChwYXJzZWRNc2cudHJpbSgpLCBzZXNzaW9uLCByZWxhdGl2ZUV2ZW50LCBnZXRUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY2F0Y2gnLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBJbnZhbGlkVG9rZW5FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlc3Npb24uc2VuZCgn6K+35YWI5L2/55SoIGdpdGh1Yi5hdXRoIDx1c2VybmFtZT4g5oiWIGdpdGh1Yi50b2tlbiA8dG9rZW4+IOiuvue9ruWHreaNruOAgicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IFttZXNzYWdlLCAkc2V0XSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZSkgYXdhaXQgc2Vzc2lvbi5zZW5kKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIGlmICgkc2V0KSBhd2FpdCBjb2xsRGF0YS51cGRhdGVPbmUoeyBfaWQ6IHJlbGF0aXZlRXZlbnQuX2lkIH0sIHsgJHNldCB9KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgc2Vzc2lvbi5zZW5kKGUubWVzc2FnZSk7IH1cbiAgICAgICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFwcC5zZWxlY3QoJ2dyb3VwSWQnKS5jb21tYW5kKCdnaXRodWIubGlzdGVuIDxyZXBvPicsICfnm5HlkKzkuIDkuKpSZXBvc2l0b3J555qE5LqL5Lu2JylcbiAgICAgICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9LCByZXBvKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVwbyA9IHJlcG8udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBpZiAocmVwby5zcGxpdCgnLycpLmxlbmd0aCAhPT0gMikgcmV0dXJuICfml6DmlYjlnLDlnYAnO1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSBhd2FpdCBjb2xsLmZpbmRPbmUoeyBfaWQ6IHJlcG8gfSk7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgY29sbC51cGRhdGVPbmUoXG4gICAgICAgICAgICAgICAgICAgICAgICB7IF9pZDogcmVwbyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgeyAkYWRkVG9TZXQ6IHsgdGFyZ2V0OiBgJHtzZXNzaW9uLnBsYXRmb3JtfToke3Nlc3Npb24uZ3JvdXBJZH1gIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgdXBzZXJ0OiB0cnVlIH0sXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgV2F0Y2hpbmcgJHtyZXBvfWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGF3YWl0IGNvbGwuaW5zZXJ0T25lKHsgX2lkOiByZXBvLCB0YXJnZXQ6IFtgJHtzZXNzaW9uLnBsYXRmb3JtfToke3Nlc3Npb24uZ3JvdXBJZH1gXSB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYFdhdGNoaW5nICR7cmVwb31cbijor7fliJvlu7ogd2ViaG9vayDmipXpgJLoh7MgaHR0cHM6Ly9naXRodWIudW5kZWZpbmVkLm1vZS93ZWJob29rIO+8jOagvOW8jyBhcHBsaWNhdGlvbi9qc29uIClgO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgYXBwLnNlbGVjdCgnZ3JvdXBJZCcpLmNvbW1hbmQoJ2dpdGh1Yi5saXN0JywgJ0xpc3QgcmVwb3MnKVxuICAgICAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXBvcyA9IGF3YWl0IGNvbGwuZmluZCh7IHRhcmdldDogYCR7c2Vzc2lvbi5wbGF0Zm9ybX06JHtzZXNzaW9uLmdyb3VwSWR9YCB9KS5wcm9qZWN0KHsgX2lkOiAxIH0pLnRvQXJyYXkoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVwb3MubWFwKChkb2MpID0+IGRvYy5faWQpLmpvaW4oJ1xcbicpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgYXBwLnNlbGVjdCgnZ3JvdXBJZCcpLmNvbW1hbmQoJ2dpdGh1Yi5jYW5jZWwgPHJlcG8+JywgJ+WPlua2iOS4gOS4qlJlcG9zaXRvcnnnmoTkuovku7YnKVxuICAgICAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0sIHJlcG8pID0+IHtcbiAgICAgICAgICAgICAgICBhd2FpdCBjb2xsLnVwZGF0ZU9uZShcbiAgICAgICAgICAgICAgICAgICAgeyBfaWQ6IHJlcG8udG9Mb3dlckNhc2UoKSB9LFxuICAgICAgICAgICAgICAgICAgICB7ICRwdWxsOiB7IHRhcmdldDogYCR7c2Vzc2lvbi5wbGF0Zm9ybX06JHtzZXNzaW9uLmdyb3VwSWR9YCB9IH0sXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYENhbmNlbGxlZCAke3JlcG99LmA7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBhcHAuY29tbWFuZCgnZ2l0aHViLnRva2VuIDx0b2tlbj4nLCAn6K6+572udG9rZW4nKVxuICAgICAgICAgICAgLnVzZXJGaWVsZHMoWydHaXRodWJUb2tlbiddKVxuICAgICAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0sIHRva2VuKSA9PiB7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbi51c2VyLkdpdGh1YlRva2VuID0ge1xuICAgICAgICAgICAgICAgICAgICBhY2Nlc3NfdG9rZW46IHRva2VuLFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoX3Rva2VuOiAnJyxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiAn6K6+572u5oiQ5YqfJztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGFwcC5jb21tYW5kKCdnaXRodWIuYXV0aCA8dXNlcm5hbWU+JywgJ+eZu+W9lei0puWPtycpXG4gICAgICAgICAgICAudXNlckZpZWxkcyhbJ0dpdGh1YlRva2VuJ10pXG4gICAgICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSwgbG9naW4pID0+IGDor7fngrnlh7vkuIvpnaLnmoTpk77mjqXnu6fnu63mk43kvZzvvJpcbmh0dHBzOi8vZ2l0aHViLmNvbS9sb2dpbi9vYXV0aC9hdXRob3JpemU/Y2xpZW50X2lkPSR7Y29uZmlnLmNsaWVudF9pZH0mc3RhdGU9JHtzZXNzaW9uLnBsYXRmb3JtfToke3Nlc3Npb24udXNlcklkfSZyZWRpcmVjdF91cmw9JHtjb25maWcucmVkaXJlY3RfdXJpfSZzY29wZT1hZG1pbiUzQXJlcG9faG9vayUyQ3JlcG8mbG9naW49JHtsb2dpbn1gKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIH0pO1xufTtcbiIsImltcG9ydCB7IGV4ZWMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgdG1wZGlyIH0gZnJvbSAnb3MnO1xuaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gJ2tvaXNoaS1jb3JlJztcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSAna29pc2hpLXV0aWxzJztcbmltcG9ydCB7IHVubGluayB9IGZyb20gJ2ZzLWV4dHJhJztcblxuZXhwb3J0IGNvbnN0IGFwcGx5ID0gKGN0eDogQ29udGV4dCkgPT4ge1xuICAgIGN0eC5jb21tYW5kKCdnbGFkb3MgPG1lc3NhZ2U6dGV4dD4nLCAnR2xhZG9zJywgeyBtaW5JbnRlcnZhbDogMzAwMDAgfSlcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0sIHRleHQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygpO1xuICAgICAgICAgICAgY29uc3Qgd2F2ID0gcGF0aC5yZXNvbHZlKHRtcGRpcigpLCBgJHtpZH0ud2F2YCk7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGV4ZWMoYHdnZXQgLS10cmllcz01MCAtTyAke3dhdn0gaHR0cHM6Ly9nbGFkb3MuYy1uZXQub3JnL2dlbmVyYXRlP3RleHQ9JHtlbmNvZGVVUklDb21wb25lbnQodGV4dCl9YCwgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSByZXNvbHZlKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgICAgICAgIHNlc3Npb24uc2VuZCgn6K+35rGC5q2j5Zyo5aSE55CG5Lit77yM6K+356iN5ZCO77yI6L+Z5Y+v6IO96ZyA6KaB5pWw5YiG6ZKf77yJJyk7XG4gICAgICAgICAgICAgICAgYXdhaXQgc2xlZXAoMTAwMDAwKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXMxID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXhlYyhgd2dldCAtLXRyaWVzPTUwIC1PICR7d2F2fSBodHRwczovL2dsYWRvcy5jLW5ldC5vcmcvZ2VuZXJhdGU/dGV4dD0ke2VuY29kZVVSSUNvbXBvbmVudCh0ZXh0KX1gLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSByZXNvbHZlKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChyZXMxKSB0aHJvdyBuZXcgRXJyb3IoJ1NlcnZpY2UgRXJyb3InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHNlc3Npb24uc2VuZChgW0NROnJlY29yZCxmaWxlPWZpbGU6Ly8ke3dhdn1dYCk7XG4gICAgICAgICAgICBhd2FpdCB1bmxpbmsod2F2KTtcbiAgICAgICAgfSk7XG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgZ2xvYmFsLXJlcXVpcmUgKi9cbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHN1cGVyYWdlbnQgZnJvbSAnc3VwZXJhZ2VudCc7XG5pbXBvcnQgeyB3cml0ZUZpbGUgfSBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgeyBBcHAgfSBmcm9tICdrb2lzaGktY29yZSc7XG5cbmNvbnN0IGRiID0ge307XG5cbnRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnJlc29sdmVkXG4gICAgY29uc3QgYyA9IHJlcXVpcmUoJy4uLy4uLy5jYWNoZS9oc19jYXJkX3poQ04uanNvbicpO1xuICAgIGZvciAoY29uc3QgY2FyZCBvZiBjKSB7XG4gICAgICAgIGRiW2NhcmQuaWRdID0gY2FyZC5pZDtcbiAgICAgICAgZGJbY2FyZC5uYW1lXSA9IGNhcmQuaWQ7XG4gICAgfVxufSBjYXRjaCAoZSkge1xuICAgIC8vIElnbm9yZVxufVxuXG50cnkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW5yZXNvbHZlZFxuICAgIGNvbnN0IGMgPSByZXF1aXJlKCcuLi8uLi8uY2FjaGUvaHNfY2FyZF9lblVTLmpzb24nKTtcbiAgICBmb3IgKGNvbnN0IGNhcmQgb2YgYykge1xuICAgICAgICBkYltjYXJkLm5hbWVdID0gY2FyZC5pZDtcbiAgICB9XG59IGNhdGNoIChlKSB7XG4gICAgLy8gSWdub3JlXG59XG5cbmFzeW5jIGZ1bmN0aW9uIF9jYXJkKHsgc2Vzc2lvbiB9LCBpZCkge1xuICAgIGNvbnN0IHVybCA9IGlkLnRyaW0oKTtcbiAgICBpZiAoIXVybCkgcmV0dXJuIGF3YWl0IHNlc3Npb24uc2VuZCgn6K+36L6T5YWl6KaB5p+l55yL55qEQ2FyZCBJRC9OYW1lJyk7XG4gICAgaWYgKCFPYmplY3Qua2V5cyhkYikubGVuZ3RoKSB7XG4gICAgICAgIC8vIExvYWQgQ05cbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgc3VwZXJhZ2VudC5nZXQoJ2h0dHBzOi8vYXBpLmhlYXJ0aHN0b25lanNvbi5jb20vdjEvbGF0ZXN0L3poQ04vY2FyZHMuY29sbGVjdGlibGUuanNvbicpO1xuICAgICAgICBhd2FpdCB3cml0ZUZpbGUocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJy4uJywgJy5jYWNoZScsICdoc19jYXJkX3poQ04uanNvbicpLCBKU09OLnN0cmluZ2lmeShyZXMuYm9keSkpO1xuICAgICAgICBmb3IgKGNvbnN0IGNhcmQgb2YgcmVzLmJvZHkpIHtcbiAgICAgICAgICAgIGRiW2NhcmQuaWRdID0gY2FyZC5pZDtcbiAgICAgICAgICAgIGRiW2NhcmQubmFtZV0gPSBjYXJkLmlkO1xuICAgICAgICB9XG4gICAgICAgIC8vIExvYWQgRU5cbiAgICAgICAgY29uc3QgcmUgPSBhd2FpdCBzdXBlcmFnZW50LmdldCgnaHR0cHM6Ly9hcGkuaGVhcnRoc3RvbmVqc29uLmNvbS92MS9sYXRlc3QvZW5VUy9jYXJkcy5jb2xsZWN0aWJsZS5qc29uJyk7XG4gICAgICAgIGF3YWl0IHdyaXRlRmlsZShwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnLi4nLCAnLmNhY2hlJywgJ2hzX2NhcmRfZW5VUy5qc29uJyksIEpTT04uc3RyaW5naWZ5KHJlLmJvZHkpKTtcbiAgICAgICAgZm9yIChjb25zdCBjYXJkIG9mIHJlLmJvZHkpIHtcbiAgICAgICAgICAgIGRiW2NhcmQubmFtZV0gPSBjYXJkLmlkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghZGJbaWRdKSByZXR1cm4gYXdhaXQgc2Vzc2lvbi5zZW5kKCdOb3RGb3VuZCcpO1xuICAgIHJldHVybiBzZXNzaW9uLnNlbmQoYFtDUTppbWFnZSxmaWxlPWh0dHBzOi8vYXJ0LmhlYXJ0aHN0b25lanNvbi5jb20vdjEvcmVuZGVyL2xhdGVzdC96aENOLzUxMngvJHtkYltpZF19LnBuZ11gKTtcbn1cblxuZXhwb3J0IGNvbnN0IGFwcGx5ID0gKGFwcDogQXBwKSA9PiB7XG4gICAgYXBwLmNvbW1hbmQoJ2NhcmQgPG5hbWUvaWQ6dGV4dD4nLCAnR2V0IGEgY2FyZCcpLmFjdGlvbihfY2FyZCk7XG59O1xuIiwiaW1wb3J0IHsgQXBwIH0gZnJvbSAna29pc2hpLWNvcmUnO1xuXG5jb25zdCBBTExPVyA9IFtcbiAgICAnMTAwJywgJzEwMScsICcyMDAnLCAnMjAxJywgJzIwMicsXG4gICAgJzIwNCcsICcyMDYnLCAnMjA3JywgJzMwMCcsICczMDEnLFxuICAgICczMDInLCAnMzAzJywgJzMwNCcsICczMDUnLCAnMzA3JyxcbiAgICAnNDAwJywgJzQwMScsICc0MDInLCAnNDAzJywgJzQwNCcsXG4gICAgJzQwNScsICc0MDYnLCAnNDA4JywgJzQwOScsICc0MTAnLFxuICAgICc0MTEnLCAnNDEyJywgJzQxMycsICc0MTQnLCAnNDE1JyxcbiAgICAnNDE2JywgJzQxNycsICc0MTgnLCAnNDIwJywgJzQyMScsXG4gICAgJzQyMicsICc0MjMnLCAnNDI0JywgJzQyNScsICc0MjYnLFxuICAgICc0MjknLCAnNDMxJywgJzQ0NCcsICc0NTAnLCAnNDUxJyxcbiAgICAnNDk5JywgJzUwMCcsICc1MDEnLCAnNTAyJywgJzUwMycsXG4gICAgJzUwNCcsICc1MDUnLCAnNTA2JywgJzUwNycsICc1MDgnLFxuICAgICc1MDknLCAnNTEwJywgJzUxMScsICc1OTknLFxuXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5KGFwcDogQXBwKSB7XG4gICAgYXBwLmNvbW1hbmQoJ2NhdCA8aWQ+JywgJ2h0dHAuY2F0JywgeyBtaW5JbnRlcnZhbDogMTAwMCB9KVxuICAgICAgICAuYWN0aW9uKGFzeW5jIChfLCBpZCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFBTExPVy5pbmNsdWRlcyhpZCkpIHJldHVybiBg5L2g5a62aHR0cOWNj+iuruS8mui/lOWbniR7aWR977yfYDtcbiAgICAgICAgICAgIHJldHVybiBgW0NROmltYWdlLGZpbGU9aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2h0dHBjYXRzL2h0dHAuY2F0L3B1YmxpYy9pbWFnZXMvJHtpZH0uanBnXWA7XG4gICAgICAgIH0pO1xufVxuIiwiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L25vLWR5bmFtaWMtcmVxdWlyZSAqL1xuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IHN1cGVyYWdlbnQgZnJvbSAnc3VwZXJhZ2VudCc7XG5pbXBvcnQgeyBjcmVhdGVIYXNoIH0gZnJvbSAnY3J5cHRvJztcbmltcG9ydCB7IENvbnRleHQsIExvZ2dlciwgc2VnbWVudCB9IGZyb20gJ2tvaXNoaS1jb3JlJztcbmltcG9ydCB5YW1sIGZyb20gJ2pzLXlhbWwnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IHJlYWRGaWxlIH0gZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHNoYXJwIGZyb20gJ3NoYXJwJztcblxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcignaW1hZ2V0YWcnKTtcbmNvbnN0IGltYWdlUkUgPSAvKFxcW0NROmltYWdlLGZpbGU9W14sXSssdXJsPVteXFxdXStcXF0pLztcbmNvbnN0IGNoZWNrR3JvdXBBZG1pbiA9ICh7IHNlc3Npb24gfSkgPT4gKFxuICAgIChzZXNzaW9uLnVzZXIuYXV0aG9yaXR5ID49IDQgfHwgc2Vzc2lvbi5hdXRob3Iucm9sZXMuaW5jbHVkZXMoJ2FkbWluJykgfHwgc2Vzc2lvbi5hdXRob3Iucm9sZXMuaW5jbHVkZXMoJ293bmVyJykpXG4gICAgICAgID8gbnVsbFxuICAgICAgICA6ICfku4XnrqHnkIblkZjlj6/miafooYzor6Xmk43kvZzjgIInXG4pO1xuXG5pbnRlcmZhY2UgSW1hZ2VUYWdDYWNoZSB7XG4gICAgX2lkOiBzdHJpbmcsXG4gICAgbWQ1OiBzdHJpbmcsXG4gICAgdHh0OiBzdHJpbmcsXG59XG5kZWNsYXJlIG1vZHVsZSAna29pc2hpLWNvcmUnIHtcbiAgICBpbnRlcmZhY2UgQ2hhbm5lbCB7XG4gICAgICAgIGVuYWJsZUF1dG9UYWc/OiBudW1iZXIsXG4gICAgfVxuICAgIGludGVyZmFjZSBUYWJsZXMge1xuICAgICAgICAnaW1hZ2UudGFnJzogSW1hZ2VUYWdDYWNoZVxuICAgIH1cbn1cblxuZnVuY3Rpb24gTUQ1KGJ1ZmZlcjogQnVmZmVyKSB7XG4gICAgY29uc3QgaGFzaCA9IGNyZWF0ZUhhc2goJ21kNScpO1xuICAgIGhhc2gudXBkYXRlKGJ1ZmZlcik7XG4gICAgcmV0dXJuIGhhc2guZGlnZXN0KCdoZXgnKTtcbn1cblxuZXhwb3J0IGNvbnN0IGFwcGx5ID0gYXN5bmMgKGN0eDogQ29udGV4dCwgY29uZmlnOiBhbnkgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHRyYW5zZmlsZSA9IGF3YWl0IHJlYWRGaWxlKHJlc29sdmUocHJvY2Vzcy5jd2QoKSwgJ2RhdGFiYXNlJywgJ2ltYWdlLnRhZ3MudHJhbnNsYXRpb24ueWFtbCcpKTtcbiAgICBjb25zdCB0cmFucyA9IHlhbWwuc2FmZUxvYWQodHJhbnNmaWxlLnRvU3RyaW5nKCkpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1ldmFsXG4gICAgY29uc3QgbmFtZXMgPSBldmFsKCdyZXF1aXJlJykoYCR7cHJvY2Vzcy5jd2QoKX0vZGF0YWJhc2UvY2xhc3NfbmFtZXNfNjAwMC5qc29uYCk7XG5cbiAgICBjdHgub24oJ2JlZm9yZS1hdHRhY2gtY2hhbm5lbCcsIChfLCBmaWVsZHMpID0+IHtcbiAgICAgICAgZmllbGRzLmFkZCgnZW5hYmxlQXV0b1RhZycpO1xuICAgIH0pO1xuXG4gICAgY3R4Lm1pZGRsZXdhcmUoYXN5bmMgKHNlc3Npb24sIG5leHQpID0+IHtcbiAgICAgICAgY29uc3QgY2FwdHVyZSA9IGltYWdlUkUuZXhlYyhzZXNzaW9uLmNvbnRlbnQpO1xuICAgICAgICBpZiAoY2FwdHVyZSkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgaWYgKHNlc3Npb24uY2hhbm5lbC5lbmFibGVBdXRvVGFnID09PSAyKSBzZXNzaW9uLmV4ZWN1dGVTaWxlbnQoYHRhZyAke2NhcHR1cmVbMV19YCk7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBlbHNlIGlmIChzZXNzaW9uLmNoYW5uZWwuZW5hYmxlQXV0b1RhZyA9PT0gMSkgc2Vzc2lvbi5leGVjdXRlKGB0YWcgJHtjYXB0dXJlWzFdfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgfSk7XG5cbiAgICBjdHguYXBwLm9uKCdjb25uZWN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBjb2xsID0gY3R4LmFwcC5kYXRhYmFzZS5tb25nby5jb2xsZWN0aW9uKCdpbWFnZS50YWcnKTtcbiAgICAgICAgY29sbC5jcmVhdGVJbmRleCh7IG1kNTogMSB9LCB7IHVuaXF1ZTogdHJ1ZSB9KTtcblxuICAgICAgICBjdHguY29tbWFuZCgndGFnIFtpbWFnZV0nLCAnR2V0IGltYWdlIHRhZycsIHsgaGlkZGVuOiB0cnVlLCBtaW5JbnRlcnZhbDogMjAwMCB9KVxuICAgICAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0sIGltYWdlKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbWFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2Vzc2lvbi5zZW5kKCfor7flj5HpgIHlm77niYfjgIInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlID0gYXdhaXQgc2Vzc2lvbi5wcm9tcHQoMzAwMDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBpZDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHVybCA9IGltYWdlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlID0gc2VnbWVudC5mcm9tKGltYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlLnR5cGUgIT09ICdpbWFnZScpIHRocm93IG5ldyBFcnJvcign5rKh5pyJ5Y+R546w5Zu+54mH44CCJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSBmaWxlLmRhdGEudXJsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQgPSBmaWxlLmRhdGEuZmlsZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIXVybC5zdGFydHNXaXRoKCdodHRwJykpIHRocm93IG5ldyBFcnJvcign5rKh5pyJ5Y+R546w5Zu+54mH44CCJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaWQpIGlkID0gQnVmZmVyLmZyb20odXJsKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjID0gYXdhaXQgY29sbC5maW5kT25lKHsgX2lkOiBpZCB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMpIHJldHVybiBjLnR4dDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBheGlvcy5nZXQ8QXJyYXlCdWZmZXI+KHVybCwgeyByZXNwb25zZVR5cGU6ICdhcnJheWJ1ZmZlcicgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZiA9IEJ1ZmZlci5hbGxvYyhkYXRhLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmLmxlbmd0aDsgKytpKSBidWZbaV0gPSB2aWV3W2ldO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtZDUgPSBNRDUoYnVmKTtcbiAgICAgICAgICAgICAgICAgICAgYyA9IGF3YWl0IGNvbGwuZmluZE9uZSh7IG1kNSB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMpIHJldHVybiBjLnR4dDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW1nID0gKGF3YWl0IHNoYXJwKGJ1ZikucG5nKCkudG9CdWZmZXIoKSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbygnZG93bmxvYWRlZCcpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGE6IHByb2JzIH0gPSBhd2FpdCBheGlvcy5wb3N0KCdodHRwOi8vMTI3LjAuMC4xOjEwMzc3LycsIHsgaW1nIH0pIGFzIGFueTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9icyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlcnJtc2cgPSBwcm9icy5zcGxpdCgnSFRUUCcpWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb2JzLmluY2x1ZGVzKCdvdXRwdXQgd2l0aCBzaGFwZScpIHx8IHByb2JzLmluY2x1ZGVzKCdzaXplIG9mIHRlbnNvcicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJybXNnID0gJ+S4jeaUr+aMgeeahOWbvueJh+agvOW8j++8iOivt+WwneivleaIquWbvuWPkemAge+8iSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgY29sbC5pbnNlcnRPbmUoeyBfaWQ6IGlkLCBtZDUsIHR4dDogZXJybXNnIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm1zZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdHh0ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiBwcm9icykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFncy5wdXNoKG5hbWVzW2lbMF1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR4dCArPSBgJHt0cmFuc1tuYW1lc1tpWzBdXV0gfHwgbmFtZXNbaVswXV19OiR7TWF0aC5mbG9vcihpWzFdICogMTAwKX0lICBgO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKHR4dCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25maWcudXJsICYmIGNvbmZpZy50YWdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRhZyBvZiB0YWdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZy50YWdzLmluY2x1ZGVzKHRhZykgfHwgdGFncy5sZW5ndGggPiA3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyYWdlbnQuZ2V0KGAke2NvbmZpZy51cmx9JnNvdXJjZT0ke2VuY29kZVVSSUNvbXBvbmVudCh1cmwpfSZmb3JtYXQ9anNvbmApLmVuZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgY29sbC5pbnNlcnRPbmUoeyBfaWQ6IGlkLCBtZDUsIHR4dCB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHR4dDtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnRvU3RyaW5nKCkuc3BsaXQoJ1xcbicpWzBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGN0eC5jb21tYW5kKCd0YWcuZGlzYWJsZScsICflnKjnvqTlhoXnpoHnlKgnLCB7IG5vUmVkaXJlY3Q6IHRydWUgfSlcbiAgICAgICAgICAgIC51c2VyRmllbGRzKFsnYXV0aG9yaXR5J10pXG4gICAgICAgICAgICAuY2hlY2soY2hlY2tHcm91cEFkbWluKVxuICAgICAgICAgICAgLmNoYW5uZWxGaWVsZHMoWydlbmFibGVBdXRvVGFnJ10pXG4gICAgICAgICAgICAuYWN0aW9uKCh7IHNlc3Npb24gfSkgPT4ge1xuICAgICAgICAgICAgICAgIHNlc3Npb24uY2hhbm5lbC5lbmFibGVBdXRvVGFnID0gMDtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0Rpc2FibGVkJztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGN0eC5jb21tYW5kKCd0YWcuZW5hYmxlJywgJ+WcqOe+pOWGheWQr+eUqCcsIHsgbm9SZWRpcmVjdDogdHJ1ZSB9KVxuICAgICAgICAgICAgLm9wdGlvbignc2lsZW50JywgJy1zJylcbiAgICAgICAgICAgIC51c2VyRmllbGRzKFsnYXV0aG9yaXR5J10pXG4gICAgICAgICAgICAuY2hlY2soY2hlY2tHcm91cEFkbWluKVxuICAgICAgICAgICAgLmNoYW5uZWxGaWVsZHMoWydlbmFibGVBdXRvVGFnJ10pXG4gICAgICAgICAgICAuYWN0aW9uKCh7IHNlc3Npb24sIG9wdGlvbnMgfSkgPT4ge1xuICAgICAgICAgICAgICAgIHNlc3Npb24uY2hhbm5lbC5lbmFibGVBdXRvVGFnID0gb3B0aW9ucy5zaWxlbnQgPyAyIDogMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VuYWJsZWQnO1xuICAgICAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuIiwiaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gJ2tvaXNoaS1jb3JlJztcblxuZGVjbGFyZSBtb2R1bGUgJ2tvaXNoaS1jb3JlJyB7XG4gICAgaW50ZXJmYWNlIENoYW5uZWwge1xuICAgICAgICBqand6OiBbbnVtYmVyLCBzdHJpbmddW11cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseShjdHg6IENvbnRleHQpIHtcbiAgICBjdHguY29tbWFuZCgnamp3eicsICfnu53lj6Xmlofnq6AnKTtcbiAgICBjdHguY29tbWFuZCgnamp3ei5hZGQgPGNvbnRlbnQ6dGV4dD4nLCAn5Yib5bu6L+a3u+WKoCcpXG4gICAgICAgIC5jaGFubmVsRmllbGRzKFsnamp3eiddKVxuICAgICAgICAudXNlckZpZWxkcyhbJ2lkJ10pXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9LCBjb250ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoY29udGVudC5sZW5ndGggPiA3KSByZXR1cm4gJ+S9oOaAjuS5iOWGmei/meS5iOmVvyc7XG4gICAgICAgICAgICBpZiAoIXNlc3Npb24uY2hhbm5lbC5qand6KSBzZXNzaW9uLmNoYW5uZWwuamp3eiA9IFtdO1xuICAgICAgICAgICAgZWxzZSBpZiAoKHNlc3Npb24uY2hhbm5lbC5qand6W3Nlc3Npb24uY2hhbm5lbC5qand6Lmxlbmd0aCAtIDFdIHx8IFtdKVswXSA9PT0gK3Nlc3Npb24udXNlci5pZCkgcmV0dXJuICfkvaDkuI3og73ov57nu63mt7vliqAnO1xuICAgICAgICAgICAgc2Vzc2lvbi5jaGFubmVsLmpqd3oucHVzaChbK3Nlc3Npb24udXNlci5pZCwgY29udGVudF0pO1xuICAgICAgICAgICAgcmV0dXJuIGAke3Nlc3Npb24uY2hhbm5lbC5qand6Lm1hcCgoaSkgPT4gaVsxXSkuam9pbignJyl9Li4uYDtcbiAgICAgICAgfSk7XG5cbiAgICBjdHguY29tbWFuZCgnamp3ei5lbmQnLCAn57uT5p2fJylcbiAgICAgICAgLmNoYW5uZWxGaWVsZHMoWydqand6J10pXG4gICAgICAgIC51c2VyRmllbGRzKFsnaWQnXSlcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0pID0+IHtcbiAgICAgICAgICAgIGlmICghc2Vzc2lvbi5jaGFubmVsLmpqd3opIHJldHVybiAn6L+Y5pyq5byA5aeLJztcbiAgICAgICAgICAgIHNlc3Npb24uY2hhbm5lbC5qand6ID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBzZXNzaW9uLmNoYW5uZWwuamp3ei5tYXAoKGkpID0+IGlbMV0pLmpvaW4oJycpO1xuICAgICAgICB9KTtcblxuICAgIGN0eC5jb21tYW5kKCdqand6LmVkaXQgPGNvbnRlbnQ6dGV4dD4nLCAn57yW6L6RJylcbiAgICAgICAgLmNoYW5uZWxGaWVsZHMoWydqand6J10pXG4gICAgICAgIC51c2VyRmllbGRzKFsnaWQnXSlcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0sIGNvbnRlbnQpID0+IHtcbiAgICAgICAgICAgIGlmICghc2Vzc2lvbi5jaGFubmVsLmpqd3opIHJldHVybiAn6L+Y5pyq5byA5aeLJzsgaWYgKGNvbnRlbnQubGVuZ3RoID4gNykgcmV0dXJuICfkvaDmgI7kuYjlhpnov5nkuYjplb8nO1xuICAgICAgICAgICAgaWYgKHNlc3Npb24uY2hhbm5lbC5qand6W3Nlc3Npb24uY2hhbm5lbC5qand6Lmxlbmd0aCAtIDFdWzBdICE9PSArc2Vzc2lvbi51c2VyLmlkKSByZXR1cm4gJ+S4iuS4gOadoeS4jeaYr+S9oOaJgOe8lui+kSc7XG4gICAgICAgICAgICBzZXNzaW9uLmNoYW5uZWwuamp3eltzZXNzaW9uLmNoYW5uZWwuamp3ei5sZW5ndGggLSAxXVsxXSA9IGNvbnRlbnQ7XG4gICAgICAgICAgICByZXR1cm4gYCR7c2Vzc2lvbi5jaGFubmVsLmpqd3oubWFwKChpKSA9PiBpWzFdKS5qb2luKCcnKX0uLi5gO1xuICAgICAgICB9KTtcblxuICAgIGN0eC5jb21tYW5kKCdqand6LmRlbCcsICfliKDpmaQnKVxuICAgICAgICAuY2hhbm5lbEZpZWxkcyhbJ2pqd3onXSlcbiAgICAgICAgLnVzZXJGaWVsZHMoWydpZCddKVxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFzZXNzaW9uLmNoYW5uZWwuamp3eikgcmV0dXJuICfov5jmnKrlvIDlp4snO1xuICAgICAgICAgICAgaWYgKHNlc3Npb24uY2hhbm5lbC5qand6W3Nlc3Npb24uY2hhbm5lbC5qand6Lmxlbmd0aCAtIDFdWzBdICE9PSArc2Vzc2lvbi51c2VyLmlkKSByZXR1cm4gJ+S4iuS4gOadoeS4jeaYr+S9oOaJgOe8lui+kSc7XG4gICAgICAgICAgICBzZXNzaW9uLmNoYW5uZWwuamp3ei5wb3AoKTtcbiAgICAgICAgICAgIHJldHVybiBgJHtzZXNzaW9uLmNoYW5uZWwuamp3ei5tYXAoKGkpID0+IGlbMV0pLmpvaW4oJycpfS4uLmA7XG4gICAgICAgIH0pO1xufVxuIiwiaW1wb3J0IHsgQXBwIH0gZnJvbSAna29pc2hpLWNvcmUnO1xuaW1wb3J0IHsgT2JqZWN0SUQgfSBmcm9tICdtb25nb2RiJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IGVuZE9mVG9kYXkgfSBmcm9tICcuLi9saWIvZXhwaXJlJztcblxubW9tZW50LmxvY2FsZSgnemgtY24nKTtcblxuaW50ZXJmYWNlIFByaWNlIHtcbiAgICBfaWQ6IG51bWJlcixcbiAgICBwcmljZTogbnVtYmVyLFxuICAgIGV4cGlyZTogRGF0ZSxcbiAgICBib3VnaHQ6IG51bWJlcixcbn1cblxuaW50ZXJmYWNlIFN0b2NrIHtcbiAgICBfaWQ6IE9iamVjdElELFxuICAgIHVzZXJJZDogbnVtYmVyLFxuICAgIG51bWJlcjogbnVtYmVyLFxuICAgIGJ1eVByaWNlOiBudW1iZXIsXG4gICAgZXhwaXJlOiBEYXRlLFxufVxuZGVjbGFyZSBtb2R1bGUgJ2tvaXNoaS1jb3JlJyB7XG4gICAgaW50ZXJmYWNlIFRhYmxlcyB7XG4gICAgICAgICdrYWJ1LnByaWNlJzogUHJpY2UsXG4gICAgICAgICdrYWJ1LnN0b2NrJzogU3RvY2ssXG4gICAgfVxufVxuXG5pbnRlcmZhY2UgQ29uZmlnIHtcbiAgICBleHBpcmVEYXlzPzogbnVtYmVyLFxuICAgIHNlcnZpY2VGZWU/OiBudW1iZXIsXG4gICAgbWF4QnV5UGVyRGF5PzogbnVtYmVyLFxufVxuXG5jb25zdCBkZWZhdWx0Q29uZmlnID0ge1xuICAgIGV4cGlyZURheXM6IDcsXG4gICAgc2VydmljZUZlZTogMC4wMyxcbiAgICBtYXhCdXlQZXJEYXk6IDEwLFxufTtcblxuZXhwb3J0IGNvbnN0IGFwcGx5ID0gKGFwcDogQXBwLCBjb25maWc6IENvbmZpZykgPT4ge1xuICAgIGNvbmZpZyA9IHsgLi4uZGVmYXVsdENvbmZpZywgLi4uY29uZmlnIH07XG5cbiAgICBhcHAub24oJ2Nvbm5lY3QnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHByaWNlQ29sbCA9IGFwcC5kYXRhYmFzZS5tb25nby5jb2xsZWN0aW9uKCdrYWJ1LnByaWNlJyk7XG4gICAgICAgIHByaWNlQ29sbC5jcmVhdGVJbmRleCgnZXhwaXJlJywgeyBleHBpcmVBZnRlclNlY29uZHM6IDAgfSk7XG5cbiAgICAgICAgY29uc3Qgc3RvY2tDb2xsID0gYXBwLmRhdGFiYXNlLm1vbmdvLmNvbGxlY3Rpb24oJ2thYnUuc3RvY2snKTtcbiAgICAgICAgc3RvY2tDb2xsLmNyZWF0ZUluZGV4KHsgdXNlcklkOiAxLCBleHBpcmU6IDEgfSk7XG4gICAgICAgIHN0b2NrQ29sbC5jcmVhdGVJbmRleCgnZXhwaXJlJywgeyBleHBpcmVBZnRlclNlY29uZHM6IDAgfSk7XG5cbiAgICAgICAgYXN5bmMgZnVuY3Rpb24gcHJpY2VUb2RheShfaWQ6IG51bWJlcikge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcHJpY2VDb2xsLmZpbmRPbmUoeyBfaWQgfSk7XG4gICAgICAgICAgICBpZiAocmVzKSByZXR1cm4gW3Jlcy5wcmljZSwgcmVzLmJvdWdodCB8fCAwXTtcbiAgICAgICAgICAgIGNvbnN0IHByaWNlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpIDwgMC41ID8gMTAgKyBNYXRoLnNxcnQoTWF0aC5yYW5kb20oKSAqIDQwMCkgOiA1MCAtIE1hdGguc3FydChNYXRoLnJhbmRvbSgpICogNDAwKSk7XG4gICAgICAgICAgICBhd2FpdCBwcmljZUNvbGwuaW5zZXJ0T25lKHtcbiAgICAgICAgICAgICAgICBfaWQsIHByaWNlLCBleHBpcmU6IGVuZE9mVG9kYXkoKSwgYm91Z2h0OiAwLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gW3ByaWNlLCAwXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFwcC5jb21tYW5kKCdrYWJ1LnF1ZXJ5JywgJ+afpeivouiHquW3seeahOW6k+WtmOS7peWPiuS7iuaXpeWkp+WktOiPnOS7t+agvCcpXG4gICAgICAgICAgICAuc2hvcnRjdXQoJ+afpeivouWkp+WktOiPnCcsIHsgcHJlZml4OiBmYWxzZSB9KVxuICAgICAgICAgICAgLnVzZXJGaWVsZHMoWydjb2luJywgJ2lkJ10pXG4gICAgICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IFtyZXMsIGNvdW50XSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICAgICAgc3RvY2tDb2xsLmZpbmQoeyB1c2VySWQ6ICtzZXNzaW9uLnVzZXIuaWQgfSkuc29ydCgnZXhwaXJlJywgMSkubGltaXQoMTApLnRvQXJyYXkoKSxcbiAgICAgICAgICAgICAgICAgICAgc3RvY2tDb2xsLmZpbmQoeyB1c2VySWQ6ICtzZXNzaW9uLnVzZXIuaWQgfSkuY291bnQoKSxcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICBsZXQgc3RvY2tMaXN0ID0gJyc7XG4gICAgICAgICAgICAgICAgbGV0IHN1bSA9IDA7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB7IG51bWJlciwgYnV5UHJpY2UsIGV4cGlyZSB9IG9mIHJlcykge1xuICAgICAgICAgICAgICAgICAgICBzdW0gKz0gbnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICBzdG9ja0xpc3QgKz0gYOS9oOaciSAke251bWJlcn0g5qO15LulICR7YnV5UHJpY2V9IOS4quehrOW4geavj+ajteS5sOWFpeeahOWkp+WktOiPnO+8jOWug+S7rOS8muWcqCAke21vbWVudChleHBpcmUpLmZyb21Ob3coKX0g54OC5o6J44CCXFxuYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgW3ByaWNlLCBib3VnaHRdID0gYXdhaXQgcHJpY2VUb2RheSgrc2Vzc2lvbi51c2VyLmlkKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjYW5CdXkgPSBjb25maWcubWF4QnV5UGVyRGF5IC0gYm91Z2h0O1xuICAgICAgICAgICAgICAgIGlmICghc2Vzc2lvbi51c2VyLmNvaW4pIHNlc3Npb24udXNlci5jb2luID0gMDtcbiAgICAgICAgICAgICAgICBpZiAoY291bnQgPT09IDApIHN0b2NrTGlzdCA9IGDkvaDnjrDlnKjmiYvkuIrov5jmsqHmnInlpKflpLToj5wkeyhzZXNzaW9uLnVzZXIuY29pbiA+PSBwcmljZSAmJiBjYW5CdXkpID8gJ++8jOimgeadpeS5sOeCueWQl++8nycgOiAn44CCJ31gO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvdW50ID4gcmVzLmxlbmd0aCkgc3RvY2tMaXN0ICs9IGDpmpDol4/kuoYgJHtjb3VudCAtIHJlcy5sZW5ndGh9IOS4quadoeebruOAgmA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGDkvaDnjrDlnKjlhbHmnIkgJHtzdW19IOajteWkp+WktOiPnOWSjCAke3Nlc3Npb24udXNlci5jb2lufSDkuKrnoazluIHjgIJcbuS7iuWkqeWNlue7mSAke3Nlc3Npb24udXNlcm5hbWV9IOeahOWkp+WktOiPnOS7t+agvOaYr+avj+ajtSAke3ByaWNlfSDnoazluIHjgILmgqjku4rlpKnov5jlj6/otK3lhaUke2NhbkJ1eX3kuKrlpKflpLToj5zjgIJcbiR7c3RvY2tMaXN0fWA7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBhcHAuY29tbWFuZCgna2FidS5idXkgW251bWJlcl0nLCBg6LSt5Lmw5aSn5aS06I+c44CC6Iul5LiN5oyH5a6a5pWw6YeP5YiZ5bC96YeP5aSa5Zyw6LSt5Lmw44CC5omL57ut6LS5ICR7Y29uZmlnLnNlcnZpY2VGZWUgKiAxMDB9JeOAgmAsIHsgbm9SZWRpcmVjdDogdHJ1ZSB9KVxuICAgICAgICAgICAgLnNob3J0Y3V0KCfotK3kubDlpKflpLToj5wnLCB7IHByZWZpeDogZmFsc2UsIGZ1enp5OiB0cnVlIH0pXG4gICAgICAgICAgICAudXNlckZpZWxkcyhbJ2NvaW4nLCAnaWQnXSlcbiAgICAgICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9LCBhcmcpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBbcHJpY2UsIGJvdWdodF0gPSBhd2FpdCBwcmljZVRvZGF5KCtzZXNzaW9uLnVzZXIuaWQpO1xuICAgICAgICAgICAgICAgIGlmICghc2Vzc2lvbi51c2VyLmNvaW4pIHNlc3Npb24udXNlci5jb2luID0gMDtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXhOdW1iZXIgPSBNYXRoLmZsb29yKHNlc3Npb24udXNlci5jb2luIC8gcHJpY2UgLyAoMSArIGNvbmZpZy5zZXJ2aWNlRmVlKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbnVtYmVyID0gTWF0aC5taW4oY29uZmlnLm1heEJ1eVBlckRheSAtIGJvdWdodCwgKyhhcmcgPz8gbWF4TnVtYmVyKSk7XG4gICAgICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcikgfHwgbnVtYmVyIDw9IDAgfHwgbnVtYmVyID4gbWF4TnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBg6LSt5Lmw5pWw6YeP6ZyA6KaB5pivIDF+JHttYXhOdW1iZXJ9IOS5i+mXtOeahOato+aVtOaVsOOAgmA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGV4cGlyZSA9IG1vbWVudCgpO1xuICAgICAgICAgICAgICAgIGV4cGlyZS5hZGQoY29uZmlnLmV4cGlyZURheXMsICdkYXlzJyk7XG4gICAgICAgICAgICAgICAgYXdhaXQgc3RvY2tDb2xsLmluc2VydE9uZSh7XG4gICAgICAgICAgICAgICAgICAgIF9pZDogbmV3IE9iamVjdElEKCksXG4gICAgICAgICAgICAgICAgICAgIHVzZXJJZDogK3Nlc3Npb24udXNlci5pZCxcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICBidXlQcmljZTogcHJpY2UsXG4gICAgICAgICAgICAgICAgICAgIGV4cGlyZTogZXhwaXJlLnRvRGF0ZSgpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvc3QgPSBNYXRoLmNlaWwoKDEgKyBjb25maWcuc2VydmljZUZlZSkgKiBwcmljZSAqIG51bWJlcik7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbi51c2VyLmNvaW4gLT0gY29zdDtcbiAgICAgICAgICAgICAgICBhd2FpdCBwcmljZUNvbGwudXBkYXRlT25lKFxuICAgICAgICAgICAgICAgICAgICB7IF9pZDogK3Nlc3Npb24udXNlci5pZCB9LFxuICAgICAgICAgICAgICAgICAgICB7ICRzZXQ6IHsgYm91Z2h0OiBudW1iZXIgKyBib3VnaHQgfSB9LFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGDkvaDoirHkuoYgJHtjb3N0fSDkuKrnoazluIHvvIjlkKsgJHtjb3N0IC0gcHJpY2UgKiBudW1iZXJ9IOS4quehrOW4geeahOaJi+e7rei0ue+8ieS7pSAke3ByaWNlfSDmr4/mo7XnmoTku7fmoLzotK3kubDkuoYgJHtudW1iZXJ9IOajteWkp+WktOiPnOOAglxu6KaB5piv5L2g5rKh5pyJ5ZyoICR7Y29uZmlnLmV4cGlyZURheXN9IOWkqeWGheaKiuWkp+WktOiPnOWNluaOie+8jOWug+S7rOWwseS8muWFqOmDqOeDguaOie+8jOWus+S9oOWkp+S6j+acrO+8geS4gOWumuimgeazqOaEj+i/meS4gOeCueWWlOOAgmA7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBhcHAuY29tbWFuZCgna2FidS5zZWxsIFtudW1iZXJdJywgYOWNluWHuuacgOaXqei0reS5sO+8iOacgOWFiOeDguaOie+8ieeahOWkp+WktOiPnOOAguiLpeS4jeaMh+WumuaVsOmHj+WImeWFqOmDqOWNluWHuuOAguaJi+e7rei0uSAke2NvbmZpZy5zZXJ2aWNlRmVlICogMTAwfSXjgIJgLCB7IG5vUmVkaXJlY3Q6IHRydWUgfSlcbiAgICAgICAgICAgIC5zaG9ydGN1dCgn5Y2W5Ye65aSn5aS06I+cJywgeyBwcmVmaXg6IGZhbHNlLCBmdXp6eTogdHJ1ZSB9KVxuICAgICAgICAgICAgLnVzZXJGaWVsZHMoWydjb2luJywgJ2lkJ10pXG4gICAgICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSwgYXJnKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsbE51bWJlciA9ICsoYXJnID8/IEluZmluaXR5KTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsbE51bWJlciAhPT0gSW5maW5pdHkgJiYgKCFOdW1iZXIuaXNJbnRlZ2VyKHNlbGxOdW1iZXIpIHx8IHNlbGxOdW1iZXIgPD0gMCkpIHJldHVybiAn5Y2W5Ye655qE5pWw6YeP6ZyA6KaB5piv5LiA5Liq5q2j5pW05pWwJztcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBzdG9ja0NvbGwuZmluZCh7IHVzZXJJZDogK3Nlc3Npb24udXNlci5pZCB9KS5zb3J0KCdleHBpcmUnLCAxKS50b0FycmF5KCk7XG4gICAgICAgICAgICAgICAgbGV0IHN1bSA9IDA7XG4gICAgICAgICAgICAgICAgbGV0IHVwZGF0ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsZXRlSWRzID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHJlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3VtICsgaXRlbS5udW1iZXIgPD0gc2VsbE51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VtICs9IGl0ZW0ubnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlSWRzLnB1c2goaXRlbS5faWQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN1bSA8IHNlbGxOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZSA9IHsgX2lkOiBpdGVtLl9pZCwgbmV3TnVtYmVyOiBpdGVtLm51bWJlciAtIChzZWxsTnVtYmVyIC0gc3VtKSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VtID0gc2VsbE51bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzdW0gPT09IDAgfHwgKHNlbGxOdW1iZXIgIT09IEluZmluaXR5ICYmIHN1bSAhPT0gc2VsbE51bWJlcikpIHJldHVybiAn5L2g5rKh5pyJ6Laz5aSf5aSa55qE5aSn5aS06I+c5p2l5Y2W5Ye677yBJztcbiAgICAgICAgICAgICAgICBjb25zdCBbcHJpY2VdID0gYXdhaXQgcHJpY2VUb2RheSgrc2Vzc2lvbi51c2VyLmlkKTtcbiAgICAgICAgICAgICAgICBpZiAoIXNlc3Npb24udXNlci5jb2luKSBzZXNzaW9uLnVzZXIuY29pbiA9IDA7XG4gICAgICAgICAgICAgICAgY29uc3QgZ2FpbiA9IE1hdGguZmxvb3IoKDEgLSBjb25maWcuc2VydmljZUZlZSkgKiBzdW0gKiBwcmljZSk7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbi51c2VyLmNvaW4gKz0gZ2FpbjtcbiAgICAgICAgICAgICAgICBpZiAoZGVsZXRlSWRzLmxlbmd0aCkgYXdhaXQgc3RvY2tDb2xsLmRlbGV0ZU1hbnkoeyBfaWQ6IHsgJGluOiBkZWxldGVJZHMgfSB9KTtcbiAgICAgICAgICAgICAgICBpZiAodXBkYXRlKSBhd2FpdCBzdG9ja0NvbGwudXBkYXRlT25lKHsgX2lkOiB1cGRhdGUuX2lkIH0sIHsgJHNldDogeyBudW1iZXI6IHVwZGF0ZS5uZXdOdW1iZXIgfSB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYOS9oOW3suaIkOWKn+WNluWHuiAke3N1bX0g5qO15aSn5aS06I+c77yM6I635b6X5LqGICR7Z2Fpbn0g5Liq56Gs5biB77yI5bey5omj6ZmkICR7c3VtICogcHJpY2UgLSBnYWlufSDkuKrnoazluIHnmoTmiYvnu63otLnvvInvvIFgO1xuICAgICAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBhcHAuY29tbWFuZCgna2FidScsICflpKflpLToj5wnKTtcbn07XG4iLCJpbXBvcnQgc3VwZXJhZ2VudCBmcm9tICdzdXBlcmFnZW50JztcbmltcG9ydCB7IENvbnRleHQsIExvZ2dlciB9IGZyb20gJ2tvaXNoaS1jb3JlJztcblxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcignbHVvZ3UnKTtcblxuZXhwb3J0IGNvbnN0IGFwcGx5ID0gKGN0eDogQ29udGV4dCkgPT4ge1xuICAgIGN0eC5jb21tYW5kKCdvaScsICdPSSByZWxhdGVkJyk7XG4gICAgY3R4LmNvbW1hbmQoJ29pL2x1b2d1JywgJ0x1b2d1Jyk7XG5cbiAgICBjdHguY29tbWFuZCgnb2kvbHVvZ3UucHJvYmxlbSA8cGlkPicsICfojrflj5ZMdW9ndemimOebricpXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKF8sIGlkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYWdlID0gYXdhaXQgY3R4LmFwcC5wdXBwZXRlZXIucGFnZSgpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCBwYWdlLmdvdG8oYGh0dHBzOi8vd3d3Lmx1b2d1LmNvbS5jbi9wcm9ibGVtLyR7aWR9YCwge1xuICAgICAgICAgICAgICAgICAgICB3YWl0VW50aWw6ICduZXR3b3JraWRsZTAnLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBwYWdlLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfor7fmsYLotoXml7bjgIInO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGF3YWl0IHBhZ2UuJCgnLnByb2JsZW0tY2FyZCcpO1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuc2NyZWVuc2hvdCh7fSkudGhlbihhc3luYyAoYnVmZmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgcGFnZS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBgW0NROmltYWdlLGZpbGU9YmFzZTY0Oi8vJHtidWZmZXIudG9TdHJpbmcoJ2Jhc2U2NCcpfV1gO1xuICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgcGFnZS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhlcnJvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfmiKrlm77lpLHotKXjgIInO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgY3R4LmNvbW1hbmQoJ29pL2x1b2d1LnVzZXIgPHVpZD4nLCAn5p+l6K+i55So5oi3JylcbiAgICAgICAgLmFjdGlvbihhc3luYyAoXywgaWQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHN1cGVyYWdlbnQuZ2V0KGBodHRwczovL3d3dy5sdW9ndS5jb20uY24vdXNlci8ke2lkfT9fY29udGVudE9ubHk9MWApXG4gICAgICAgICAgICAgICAgLnNldCgnVXNlci1BZ2VudCcsICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXT1c2NDsgVHJpZGVudC83LjA7IHJ2OjExLjApIGxpa2UgR2Vja28nKTtcbiAgICAgICAgICAgIGlmIChyZXMuYm9keS5jb2RlID09PSAnNDA0JykgcmV0dXJuICfmsqHov5nkuKrkurohJztcbiAgICAgICAgICAgIGNvbnN0IHVkb2MgPSByZXMuYm9keS5jdXJyZW50RGF0YS51c2VyO1xuICAgICAgICAgICAgY29uc3QgbGV2ZWwgPSB1ZG9jLmNjZkxldmVsID09PSAwXG4gICAgICAgICAgICAgICAgPyAn5pegL+iXj+S6huS7peaWueS+v+WBhydcbiAgICAgICAgICAgICAgICA6IHVkb2MuY2NmTGV2ZWw7XG4gICAgICAgICAgICByZXR1cm4gYCR7dWRvYy5uYW1lfVxu5YWz5rOoOiAke3Vkb2MuZm9sbG93aW5nQ291bnR9XG7nsonkuJ06ICR7dWRvYy5mb2xsb3dlckNvdW50fSR7dWRvYy5wYXNzZWRQcm9ibGVtQ291bnQgPyBgXG5BQ3MvU3VibWl0czogJHt1ZG9jLnBhc3NlZFByb2JsZW1Db3VudH0vJHt1ZG9jLnN1Ym1pdHRlZFByb2JsZW1Db3VudH1gIDogJyd9XG7popzoibI6ICR7dWRvYy5jb2xvcn1cbkNDRuivhOe6pzoke2xldmVsfWA7XG4gICAgICAgIH0pO1xufTtcbiIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBDb250ZXh0IH0gZnJvbSAna29pc2hpLWNvcmUnO1xuXG5leHBvcnQgY29uc3QgYXBwbHkgPSAoY3R4OiBDb250ZXh0KSA9PiB7XG4gICAgY3R4Lm1pZGRsZXdhcmUoYXN5bmMgKHNlc3Npb24sIG5leHQpID0+IHtcbiAgICAgICAgaWYgKHNlc3Npb24uY29udGVudC5pbmNsdWRlcygnaHR0cHM6Ly9ib3QtYXBpLmx4bnMubmV0L2JvdC1tZXNzYWdlLycpKSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5nZXQoYGh0dHBzOi8vJHtzZXNzaW9uLmNvbnRlbnQuc3BsaXQoJ2h0dHBzOi8vJylbMV19YCk7XG4gICAgICAgICAgICBzZXNzaW9uLmNvbnRlbnQgPSByZXMuZGF0YS5yZXBsYWNlKC88Lio/Pi9nLCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgbmV4dCgpO1xuICAgIH0sIHRydWUpO1xufTtcbiIsImltcG9ydCB7IEFwcCwgc2VnbWVudCB9IGZyb20gJ2tvaXNoaS1jb3JlJztcbmltcG9ydCBzdXBlcmFnZW50IGZyb20gJ3N1cGVyYWdlbnQnO1xuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHkoYXBwOiBBcHApIHtcbiAgICBhcHAuY29tbWFuZCgndG9vbHMnLCAn5a6e55So5bel5YW3Jyk7XG5cbiAgICBhcHAuY29tbWFuZCgndG9vbHMvb2NyIFtpbWFnZV0nLCB7IG1pbkludGVydmFsOiAzMDAwIH0pXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9LCBpbWFnZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFpbWFnZSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHNlc3Npb24uc2VuZFF1ZXVlZCgn6K+35Y+R6YCB5Zu+54mH44CCJyk7XG4gICAgICAgICAgICAgICAgaW1hZ2UgPSBhd2FpdCBzZXNzaW9uLnByb21wdCgzMDAwMCkgYXMgc3RyaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpbWFnZSkgcmV0dXJuICfmsqHmnInmo4DmtYvliLDlm77niYfjgIInO1xuICAgICAgICAgICAgY29uc3QgaW1nID0gc2VnbWVudC5mcm9tKGltYWdlKTtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHN1cGVyYWdlbnQuZ2V0KGBodHRwczovL2FpLnFxLmNvbS9jZ2ktYmluL2FwcGRlbW9faW1hZ2V0cmFuc2xhdGU/aW1hZ2VfdXJsPSR7aW1nLmRhdGEudXJsfWApO1xuICAgICAgICAgICAgaWYgKHJlcy5ib2R5LnJldCAhPT0gMCkgcmV0dXJuIHJlcy5ib2R5Lm1zZztcbiAgICAgICAgICAgIHJldHVybiByZXMuYm9keS5kYXRhLmltYWdlX3JlY29yZHMubWFwKChub2RlKSA9PiBub2RlLnNvdXJjZV90ZXh0KS5qb2luKCcnKTtcbiAgICAgICAgfSk7XG59XG4iLCJpbXBvcnQgeyBBcHAgfSBmcm9tICdrb2lzaGktY29yZSc7XG5pbXBvcnQgc3VwZXJhZ2VudCBmcm9tICdzdXBlcmFnZW50JztcbmltcG9ydCB7IHRha2UgfSBmcm9tICdsb2Rhc2gnO1xuXG5jb25zdCBHRU5ERVIgPSB7XG4gICAgJy0xJzogJ+WlsycsXG4gICAgMDogJ+acquefpScsXG4gICAgMTogJ+eUtycsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHkoYXBwOiBBcHApIHtcbiAgICBhcHAuY29tbWFuZCgnb2knLCAnT0kgUmVsYXRlZCcpO1xuXG4gICAgYXBwLmNvbW1hbmQoJ29pL29pZXIgPHF1ZXJ5PicsICfmn6Xor6JvaWVyJywgeyBtaW5JbnRlcnZhbDogMzAwMDAgfSlcbiAgICAgICAgLmFjdGlvbihhc3luYyAoXywgcXVlcnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHN1cGVyYWdlbnQuZ2V0KGBodHRwczovL2J5dGV3Lm5ldC9PSWVyL3NlYXJjaC5waHA/bWV0aG9kPW5vcm1hbCZxPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHF1ZXJ5KX1gKTtcbiAgICAgICAgICAgIGNvbnN0IHsgcmVzdWx0OiByZXN1bHRzIH0gPSBKU09OLnBhcnNlKHJlcy50ZXh0KTtcbiAgICAgICAgICAgIGxldCBtZXNzYWdlID0gJyc7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJlc3VsdCBvZiB0YWtlPGFueT4ocmVzdWx0cywgMykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhd2FyZHMgPSBKU09OLnBhcnNlKHJlc3VsdC5hd2FyZHMucmVwbGFjZSgvJy9nbWksICdcIicpKTtcbiAgICAgICAgICAgICAgICBtZXNzYWdlICs9IGDlp5PlkI3vvJoke3Jlc3VsdC5uYW1lfSAg55Sf55CG5oCn5Yir77yaJHtHRU5ERVJbcmVzdWx0LnNleF19XFxuYDtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGF3YXJkIG9mIHRha2U8YW55Pihhd2FyZHMsIDUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gYOS6jiR7YXdhcmQuZ3JhZGV95pe25ZyoJHthd2FyZC5wcm92aW5jZX0ke2F3YXJkLnNjaG9vbH3lj4LliqAke2F3YXJkLmlkZW50aXR5fe+8jGA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhd2FyZC5zY29yZSkgbWVzc2FnZSArPSBg5LulJHthd2FyZC5zY29yZX3nmoTmiJDnu6lgO1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlICs9IGDlj5blvpcke2F3YXJkLmF3YXJkX3R5cGV977yM5o6S5ZCNJHthd2FyZC5yYW5rfeOAglxcbmA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhd2FyZHMubGVuZ3RoID4gNSkgbWVzc2FnZSArPSBgJHthd2FyZHMubGVuZ3RoIC0gNX3kuKrlpZbpobnooqvpmpDol4/jgIJcXG5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc3VsdHMubGVuZ3RoID4gMykgbWVzc2FnZSArPSBgJHtyZXN1bHRzLmxlbmd0aCAtIDN95Liq5pCc57Si57uT5p6c6KKr6ZqQ6JeP44CCYDtcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgICB9KTtcbn1cbiIsImltcG9ydCB7IENvbnRleHQsIFNlc3Npb24gfSBmcm9tICdrb2lzaGktY29yZSc7XG5cbmV4cG9ydCBjb25zdCBhcHBseSA9IChjdHg6IENvbnRleHQpID0+IHtcbiAgICBjdHguY29tbWFuZCgncHJveHkgPGNvbW1hbmQ6dGV4dD4nLCAnUHJveHkgYSBjb21tYW5kJywgeyBoaWRkZW46IHRydWUsIGF1dGhvcml0eTogNCB9KVxuICAgICAgICAub3B0aW9uKCd1c2VyJywgJy11IDx1c2VySWQ+JylcbiAgICAgICAgLm9wdGlvbignc2VsZicsICctcyA8c2VsZklkPicpXG4gICAgICAgIC5vcHRpb24oJ2dyb3VwJywgJy1nIDxncm91cElkPicpXG4gICAgICAgIC5vcHRpb24oJ2xlbmd0aCcsICctbCA8bGVuZ3RoPicsIHsgZmFsbGJhY2s6IDEgfSlcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uLCBvcHRpb25zIH0sIGNvbW1hbmQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Nlc3Npb24gPSBuZXcgU2Vzc2lvbihjdHguYXBwLCBzZXNzaW9uKTtcbiAgICAgICAgICAgIGRlbGV0ZSBuZXdTZXNzaW9uLmdyb3VwSWQ7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5ncm91cCkge1xuICAgICAgICAgICAgICAgIG5ld1Nlc3Npb24uZ3JvdXBJZCA9IG9wdGlvbnMuZ3JvdXA7XG4gICAgICAgICAgICAgICAgbmV3U2Vzc2lvbi5zdWJ0eXBlID0gJ2dyb3VwJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3U2Vzc2lvbi5ncm91cElkID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIG5ld1Nlc3Npb24uc3VidHlwZSA9ICdwcml2YXRlJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNlbGYpIG5ld1Nlc3Npb24uc2VsZklkID0gb3B0aW9ucy5zZWxmO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMudXNlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gb3B0aW9ucy51c2VyO1xuICAgICAgICAgICAgICAgIGlmICghaWQpIHJldHVybiAn5pyq5oyH5a6a55uu5qCH44CCJztcbiAgICAgICAgICAgICAgICBuZXdTZXNzaW9uLnVzZXJJZCA9IGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgbmV3U2Vzc2lvbi5zZW5kKGNvbW1hbmQpO1xuICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSAnJztcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hd2FpdC1pbi1sb29wXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBvcHRpb25zLmxlbmd0aDsgaSsrKSBtZXNzYWdlICs9IGF3YWl0IG5ld1Nlc3Npb24ucHJvbXB0KDMwMDAwKTtcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgICB9KTtcbn07XG4iLCJpbXBvcnQgQXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSAna29pc2hpLWNvcmUnO1xuaW1wb3J0IHsgdGV4dDJwbmcgfSBmcm9tICcuLi9saWIvZ3JhcGgnO1xuaW1wb3J0IHsgfSBmcm9tICdrb2lzaGktcGx1Z2luLXB1cHBldGVlcic7XG5cbmNvbnN0IExBTkdTID0ge1xuICAgIGM6IHtcbiAgICAgICAgdHlwZTogJ2NvbXBpbGVyJyxcbiAgICAgICAgY29tcGlsZTogWycvdXNyL2Jpbi9nY2MnLCAnLU8yJywgJy1XYWxsJywgJy1zdGQ9Yzk5JywgJy1vJywgJ2NvZGUnLCAnZm9vLmMnLCAnLWxtJywgJy1mZGlhZ25vc3RpY3MtY29sb3I9YWx3YXlzJ10sXG4gICAgICAgIGNvZGVfZmlsZTogJ2Zvby5jJyxcbiAgICAgICAgZXhlY3V0ZTogWycvdy9jb2RlJ10sXG4gICAgfSxcbiAgICBjYzoge1xuICAgICAgICB0eXBlOiAnY29tcGlsZXInLFxuICAgICAgICBjb21waWxlOiBbJy91c3IvYmluL2crKy03JywgJy1PMicsICctV2FsbCcsICctc3RkPWMrKzExJywgJy1vJywgJ2NvZGUnLCAnZm9vLmNjJywgJy1sbScsICctZmRpYWdub3N0aWNzLWNvbG9yPWFsd2F5cyddLFxuICAgICAgICBjb2RlX2ZpbGU6ICdmb28uY2MnLFxuICAgICAgICBleGVjdXRlOiBbJy93L2NvZGUnXSxcbiAgICB9LFxuICAgIHBhczoge1xuICAgICAgICB0eXBlOiAnY29tcGlsZXInLFxuICAgICAgICBjb21waWxlOiBbJy91c3IvYmluL2ZwYycsICctTzInLCAnLW8vdy9jb2RlJywgJ2Zvby5wYXMnXSxcbiAgICAgICAgY29kZV9maWxlOiAnZm9vLnBhcycsXG4gICAgICAgIGV4ZWN1dGU6IFsnL3cvY29kZSddLFxuICAgIH0sXG4gICAgcHk6IHtcbiAgICAgICAgdHlwZTogJ2ludGVycHJldGVyJyxcbiAgICAgICAgY29kZV9maWxlOiAnZm9vLnB5JyxcbiAgICAgICAgZXhlY3V0ZTogWycvdXNyL2Jpbi9weXRob24nLCAnZm9vLnB5J10sXG4gICAgfSxcbiAgICBweTI6IHtcbiAgICAgICAgdHlwZTogJ2ludGVycHJldGVyJyxcbiAgICAgICAgY29kZV9maWxlOiAnZm9vLnB5JyxcbiAgICAgICAgZXhlY3V0ZTogWycvdXNyL2Jpbi9weXRob24nLCAnZm9vLnB5J10sXG4gICAgfSxcbiAgICBweTM6IHtcbiAgICAgICAgdHlwZTogJ2ludGVycHJldGVyJyxcbiAgICAgICAgY29kZV9maWxlOiAnZm9vLnB5JyxcbiAgICAgICAgZXhlY3V0ZTogWycvdXNyL2Jpbi9weXRob24zJywgJ2Zvby5weSddLFxuICAgIH0sXG4gICAgamF2YToge1xuICAgICAgICB0eXBlOiAnY29tcGlsZXInLFxuICAgICAgICBjb21waWxlOiBbJy91c3IvYmluL2phdmFjJywgJy1kJywgJy93JywgJy1lbmNvZGluZycsICd1dGY4JywgJy4vTWFpbi5qYXZhJ10sXG4gICAgICAgIGNvZGVfZmlsZTogJ01haW4uamF2YScsXG4gICAgICAgIGNvcHlPdXQ6ICdNYWluLmNsYXNzJyxcbiAgICAgICAgZXhlY3V0ZTogWycvdXNyL2Jpbi9qYXZhJywgJ01haW4nXSxcbiAgICB9LFxuICAgIHBocDoge1xuICAgICAgICB0eXBlOiAnaW50ZXJwcmV0ZXInLFxuICAgICAgICBjb2RlX2ZpbGU6ICdmb28ucGhwJyxcbiAgICAgICAgZXhlY3V0ZTogWycvdXNyL2Jpbi9waHAnLCAnZm9vLnBocCddLFxuICAgIH0sXG4gICAganM6IHtcbiAgICAgICAgdHlwZTogJ2ludGVycHJldGVyJyxcbiAgICAgICAgY29kZV9maWxlOiAnZm9vLmpzJyxcbiAgICAgICAgZXhlY3V0ZTogWycvdXNyL2Jpbi9qc2MnLCAnL3cvZm9vLmpzJ10sXG4gICAgfSxcbiAgICBnbzoge1xuICAgICAgICB0eXBlOiAnY29tcGlsZXInLFxuICAgICAgICBjb21waWxlOiBbJy91c3IvYmluL2dvJywgJ2J1aWxkJywgJy1vJywgJ2ZvbycsICdmb28uZ28nXSxcbiAgICAgICAgY29kZV9maWxlOiAnZm9vLmdvJyxcbiAgICAgICAgZXhlY3V0ZTogWycvdy9mb28nXSxcbiAgICB9LFxuICAgIHNoOiB7XG4gICAgICAgIHR5cGU6ICdpbnRlcnByZXRlcicsXG4gICAgICAgIGNvZGVfZmlsZTogJ2Zvby5zaCcsXG4gICAgICAgIGV4ZWN1dGU6IFsnL2Jpbi9iYXNoJywgJ2Zvby5zaCddLFxuICAgIH0sXG4gICAgY3M6IHtcbiAgICAgICAgdHlwZTogJ2NvbXBpbGVyJyxcbiAgICAgICAgY29tcGlsZTogWycvdXNyL2Jpbi9tY3MnLCAnLW9wdGltaXplKycsICctb3V0Oi93L2ZvbycsICcvdy9mb28uY3MnXSxcbiAgICAgICAgY29kZV9maWxlOiAnZm9vLmNzJyxcbiAgICAgICAgZXhlY3V0ZTogWycvdXNyL2Jpbi9tb25vJywgJ2ZvbyddLFxuICAgIH0sXG59O1xuY29uc3QgZW52ID0gWydQQVRIPS91c3IvbG9jYWwvc2JpbjovdXNyL2xvY2FsL2JpbjovdXNyL3NiaW46L3Vzci9iaW46L3NiaW46L2JpbicsICdIT01FPS93J107XG5jb25zdCBheGlvcyA9IEF4aW9zLmNyZWF0ZSh7IGJhc2VVUkw6ICdodHRwOi8vbG9jYWxob3N0OjUwNTAnIH0pO1xuXG5hc3luYyBmdW5jdGlvbiBfcG9zdChhcmdzOiBzdHJpbmdbXSwge1xuICAgIHRpbWVfbGltaXRfbXMgPSA1MDAwLFxuICAgIG1lbW9yeV9saW1pdF9tYiA9IDI1NixcbiAgICBwcm9jZXNzX2xpbWl0ID0gMzIsXG4gICAgc3RkaW4gPSAnJywgY29weUluID0ge30sIGNvcHlPdXQgPSBbXSwgY29weU91dENhY2hlZCA9IG51bGwsXG59ID0ge30pIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIGxldCBib2R5O1xuICAgIHRyeSB7XG4gICAgICAgIGJvZHkgPSB7XG4gICAgICAgICAgICBjbWQ6IFt7XG4gICAgICAgICAgICAgICAgYXJncyxcbiAgICAgICAgICAgICAgICBlbnYsXG4gICAgICAgICAgICAgICAgZmlsZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgc3RkaW4gPyB7IGNvbnRlbnQ6IHN0ZGluIH0gOiB7IGNvbnRlbnQ6ICcnIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogJ3N0ZG91dCcsIG1heDogMjA0ODAgfSxcbiAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiAnc3RkZXJyJywgbWF4OiAyMDQ4MCB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgY3B1TGltaXQ6IHRpbWVfbGltaXRfbXMgKiAxMDAwICogMTAwMCxcbiAgICAgICAgICAgICAgICByZWFkQ3B1TGltaXQ6IHRpbWVfbGltaXRfbXMgKiAxMjAwICogMTAwMCxcbiAgICAgICAgICAgICAgICBtZW1vcnlMaW1pdDogbWVtb3J5X2xpbWl0X21iICogMTAyNCAqIDEwMjQsXG4gICAgICAgICAgICAgICAgcHJvY0xpbWl0OiBwcm9jZXNzX2xpbWl0LFxuICAgICAgICAgICAgICAgIGNvcHlJbixcbiAgICAgICAgICAgICAgICBjb3B5T3V0LFxuICAgICAgICAgICAgICAgIGNvcHlPdXRDYWNoZWQsXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgYXhpb3MucG9zdCgnL3J1bicsIGJvZHkpO1xuICAgICAgICByZXN1bHQgPSByZXMuZGF0YVswXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICB0aHJvdyBlO1xuICAgIH1cbiAgICBjb25zdCByZXQ6IGFueSA9IHtcbiAgICAgICAgc3RhdHVzOiByZXN1bHQuc3RhdHVzLFxuICAgICAgICB0aW1lX3VzYWdlX21zOiByZXN1bHQudGltZSAvIDEwMDAwMDAsXG4gICAgICAgIG1lbW9yeV91c2FnZV9rYjogcmVzdWx0Lm1lbW9yeSAvIDEwMjQsXG4gICAgICAgIGZpbGVzOiByZXN1bHQuZmlsZXMsXG4gICAgfTtcbiAgICByZXN1bHQuZmlsZXMgPSByZXN1bHQuZmlsZXMgfHwge307XG4gICAgcmV0LnN0ZG91dCA9IHJlc3VsdC5maWxlcy5zdGRvdXQgfHwgJyc7XG4gICAgcmV0LnN0ZGVyciA9IHJlc3VsdC5maWxlcy5zdGRlcnIgfHwgJyc7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikge1xuICAgICAgICByZXQuZXJyb3IgPSByZXN1bHQuZXJyb3I7XG4gICAgfVxuICAgIHJldC5maWxlcyA9IHJlc3VsdC5maWxlcztcbiAgICBpZiAocmVzdWx0LmZpbGVJZHMpIHJldC5maWxlSWRzID0gcmVzdWx0LmZpbGVJZHM7XG4gICAgcmV0dXJuIHJldDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gX3J1bihjb2RlOiBzdHJpbmcsIGxhbmc6IHN0cmluZywgaW5wdXQ6IHN0cmluZykge1xuICAgIGNvbnN0IGNvcHlJbiA9IHt9O1xuICAgIGNvbnN0IGluZm8gPSBMQU5HU1tsYW5nXTtcbiAgICBpZiAoIUxBTkdTW2xhbmddKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0dXM6ICdTeXN0ZW1FcnJvcicsXG4gICAgICAgICAgICBzdGRvdXQ6ICfkuI3mlK/mjIHnmoTor63oqIAnLFxuICAgICAgICAgICAgc3RkZXJyOiAn55uu5YmN5pSv5oyBc2gsYyxjYyxwYXMscHkyLHB5MyxqcyxjcyxnbyxwaHAsamF2YScsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvcHlJbltpbmZvLmNvZGVfZmlsZV0gPSB7IGNvbnRlbnQ6IGNvZGUgfTtcbiAgICBpZiAoaW5mby50eXBlID09PSAnY29tcGlsZXInKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0YXR1cywgc3Rkb3V0LCBzdGRlcnIsIGZpbGVJZHMsXG4gICAgICAgIH0gPSBhd2FpdCBfcG9zdChcbiAgICAgICAgICAgIGluZm8uY29tcGlsZSwgeyBjb3B5SW4sIGNvcHlPdXRDYWNoZWQ6IFtpbmZvLmNvcHlPdXQgfHwgJ2NvZGUnXSB9LFxuICAgICAgICApO1xuICAgICAgICBpZiAoc3RhdHVzICE9PSAnQWNjZXB0ZWQnKSByZXR1cm4geyBzdGF0dXM6IGBDb21waWxlIEVycm9yOiR7c3RhdHVzfWAsIHN0ZG91dCwgc3RkZXJyIH07XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IF9wb3N0KFxuICAgICAgICAgICAgaW5mby5leGVjdXRlLCB7IGNvcHlJbjogeyBbaW5mby5jb3B5T3V0IHx8ICdjb2RlJ106IHsgZmlsZUlkOiBmaWxlSWRzW2luZm8uY29weU91dCB8fCAnY29kZSddIH0gfSB9LFxuICAgICAgICApO1xuICAgICAgICBhd2FpdCBheGlvcy5kZWxldGUoYC9maWxlLyR7ZmlsZUlkc1tpbmZvLmNvcHlPdXQgfHwgJ2NvZGUnXX1gKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGlmIChpbmZvLnR5cGUgPT09ICdpbnRlcnByZXRlcicpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IF9wb3N0KGluZm8uZXhlY3V0ZSwgeyBjb3B5SW4sIHN0ZGluOiBpbnB1dCB9KTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJ1bihjb2RlOiBzdHJpbmcsIGxhbmc6IHN0cmluZywgaW5wdXQ6IHN0cmluZykge1xuICAgIGNvbnN0IHsgc3RhdHVzLCBzdGRvdXQsIHN0ZGVyciB9ID0gYXdhaXQgX3J1bihjb2RlLCBsYW5nLCBpbnB1dCkuY2F0Y2goKGUpID0+ICh7XG4gICAgICAgIHN0YXR1czogJ1N5c3RlbUVycm9yJyxcbiAgICAgICAgc3Rkb3V0OiBlLnRvU3RyaW5nKCksXG4gICAgICAgIHN0ZGVycjogJycsXG4gICAgfSkpO1xuICAgIHJldHVybiAoc3RhdHVzID09PSAnQWNjZXB0ZWQnKVxuICAgICAgICA/IGBFeGVjdXRlIHJlc3VsdDogXFxuJHtzdGRvdXR9XFxuJHtzdGRlcnJ9YFxuICAgICAgICA6IGBFcnJvcjogJHtzdGF0dXN9XFxuJHtzdGRvdXR9XFxuJHtzdGRlcnJ9YDtcbn1cblxuZXhwb3J0IGNvbnN0IGFwcGx5ID0gKGFwcDogQXBwKSA9PiB7XG4gICAgYXBwLmNvbW1hbmQoJ3Rvb2xzJywgJ+WunueUqOW3peWFtycpO1xuXG4gICAgYXBwLmNvbW1hbmQoJ3Rvb2xzL3J1biA8bGFuZ3VhZ2U+IDxjb2RlOnRleHQ+JywgJ+i/kOihjOeoi+W6jycsIHsgbWluSW50ZXJ2YWw6IDEwMDAgfSlcbiAgICAgICAgLmFsaWFzKCdjb2RlJylcbiAgICAgICAgLm9wdGlvbignaW5wdXQnLCAn5ZCv55Soc3RkaW4nKVxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24sIG9wdGlvbnMgfSwgbGFuZywgY29kZSkgPT4ge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaW5wdXQpIHNlc3Npb24uc2VuZCgnUGxlYXNlIGlucHV0OicpO1xuICAgICAgICAgICAgY29uc3QgaW5wdXQ6IHN0cmluZyA9IChvcHRpb25zLmlucHV0KVxuICAgICAgICAgICAgICAgID8gYXdhaXQgc2Vzc2lvbi5wcm9tcHQoMTAwMDApIGFzIHN0cmluZ1xuICAgICAgICAgICAgICAgIDogJyc7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJ1bihjb2RlLnJlcGxhY2UoL1xcci9nbWksICcnKS5kZWNvZGUoKSwgbGFuZywgaW5wdXQuZGVjb2RlKCkpO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmxlbmd0aCA+IDI1NiB8fCByZXNwb25zZS5zcGxpdCgnXFxuJykubGVuZ3RoID4gMTApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYWdlID0gYXdhaXQgYXBwLnB1cHBldGVlci5wYWdlKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaW1nID0gYXdhaXQgdGV4dDJwbmcocGFnZSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiBgW0NROmltYWdlLGZpbGU9YmFzZTY0Oi8vJHtpbWd9XWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH0pO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXRlbXBsYXRlLWN1cmx5LWluLXN0cmluZyAqL1xuaW1wb3J0IHsgdG90YWxtZW0sIGZyZWVtZW0gfSBmcm9tICdvcyc7XG5pbXBvcnQgeyBDb250ZXh0LCB0ZW1wbGF0ZSB9IGZyb20gJ2tvaXNoaS1jb3JlJztcbmltcG9ydCAqIGFzIEtvaXNoaVBsdWdpblN0YXR1cyBmcm9tICdrb2lzaGktcGx1Z2luLXdlYnVpJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuZGVjbGFyZSBtb2R1bGUgJ2tvaXNoaS1wbHVnaW4td2VidWknIHtcbiAgICBpbnRlcmZhY2UgU3RhdHVzIHtcbiAgICAgICAgdG90YWxTZW5kQ291bnQ6IG51bWJlcixcbiAgICAgICAgdG90YWxSZWNlaXZlQ291bnQ6IG51bWJlcixcbiAgICAgICAgdXNlZG1lbTogbnVtYmVyLFxuICAgICAgICB0b3RhbG1lbTogbnVtYmVyLFxuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFwcGx5KGN0eDogQ29udGV4dCwgY29uZmlnOiBhbnkpIHtcbiAgICBjb25maWcudGl0bGUgPSAnQm90OjpDb25zb2xlJztcbiAgICBjdHgucGx1Z2luKEtvaXNoaVBsdWdpblN0YXR1cywgY29uZmlnKTtcbiAgICB0ZW1wbGF0ZS5zZXQoJ3N0YXR1cycsIHtcbiAgICAgICAgYm90OiAne3sgdXNlcm5hbWUgfX3vvJp7eyBjb2RlID8gYOaXoOazlei/nuaOpWAgOiBg5bel5L2c5Lit77yIJHtjdXJyZW50UmF0ZVswXX0vbWlu77yJYCB9fScsXG4gICAgICAgIG91dHB1dDogW1xuICAgICAgICAgICAgJ3t7IGJvdHMgfX0nLFxuICAgICAgICAgICAgJz09PT09PT09PT0nLFxuICAgICAgICAgICAgJ+a0u+i3g+eUqOaIt+aVsOmHj++8mnt7IGFjdGl2ZVVzZXJzIH19JyxcbiAgICAgICAgICAgICfmtLvot4PnvqTmlbDph4/vvJp7eyBhY3RpdmVHcm91cHMgfX0nLFxuICAgICAgICAgICAgJ0NQVSDkvb/nlKjnjofvvJp7eyAoY3B1WzBdICogMTAwKS50b0ZpeGVkKCkgfX0lIC8ge3sgKGNwdVsxXSAqIDEwMCkudG9GaXhlZCgpIH19JScsXG4gICAgICAgICAgICAn5YaF5a2Y5L2/55So546H77yae3sgKG1lbW9yeVswXSAqIDEwMCkudG9GaXhlZCgpIH19JSAvIHt7IChtZW1vcnlbMV0gKiAxMDApLnRvRml4ZWQoKSB9fSUnLFxuICAgICAgICBdLmpvaW4oJ1xcbicpLFxuICAgIH0pO1xuXG4gICAgY3R4LmFwcC5vbignY29ubmVjdCcsICgpID0+IHtcbiAgICAgICAgY29uc3QgYyA9IGN0eC5hcHAuZGF0YWJhc2UubW9uZ28uY29sbGVjdGlvbignbWVzc2FnZScpO1xuXG4gICAgICAgIGN0eC5hcHAud2VidWkuc291cmNlcy5tZXRhLmV4dGVuZChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdGF0dXM6IGFueSA9IHt9O1xuICAgICAgICAgICAgY29uc3QgdWRvY3MgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgICAgICAgICBjdHguYXBwLmJvdHMubWFwKChib3QpID0+IGN0eC5hcHAuZGF0YWJhc2UuZ2V0VXNlcihib3QucGxhdGZvcm0sIGJvdC5zZWxmSWQudG9TdHJpbmcoKSkpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNvbnN0IGlkcyA9IHVkb2NzLm1hcCgoaSkgPT4gaT8uaWQpLmZpbHRlcigoaSkgPT4gISFpKTtcbiAgICAgICAgICAgIGNvbnN0IHRpbWUgPSB7IHRpbWU6IHsgJGd0OiBtb21lbnQoKS5hZGQoLTEsICdkYXknKS50b0RhdGUoKSB9IH07XG4gICAgICAgICAgICBzdGF0dXMuYWN0aXZlVXNlcnMgPSBhd2FpdCBjdHguYXBwLmRhdGFiYXNlLm1vbmdvLnVzZXIuZmluZCh7fSkuY291bnQoKTtcbiAgICAgICAgICAgIHN0YXR1cy50b3RhbFNlbmRDb3VudCA9IGF3YWl0IGMuZmluZCh7IC4uLnRpbWUsIHNlbmRlcjogeyAkaW46IGlkcy5tYXAocGFyc2VJbnQpIH0gfSkuY291bnQoKTtcbiAgICAgICAgICAgIHN0YXR1cy50b3RhbFJlY2VpdmVDb3VudCA9IGF3YWl0IGMuZmluZCh7IC4uLnRpbWUsIHNlbmRlcjogeyAkbmluOiBpZHMubWFwKHBhcnNlSW50KSB9IH0pLmNvdW50KCk7XG4gICAgICAgICAgICBzdGF0dXMudXNlZG1lbSA9IE1hdGguZmxvb3IoKHRvdGFsbWVtKCkgLSBmcmVlbWVtKCkpIC8gMTAyNCAvIDEwMjQpO1xuICAgICAgICAgICAgc3RhdHVzLnRvdGFsbWVtID0gTWF0aC5mbG9vcih0b3RhbG1lbSgpIC8gMTAyNCAvIDEwMjQpO1xuICAgICAgICAgICAgcmV0dXJuIHN0YXR1cztcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4iLCJpbXBvcnQgeyBDb250ZXh0IH0gZnJvbSAna29pc2hpLWNvcmUnO1xuXG5kZWNsYXJlIG1vZHVsZSAna29pc2hpLWNvcmUnIHtcbiAgICBpbnRlcmZhY2UgVXNlciB7XG4gICAgICAgIHN1ZG9lcj86IGJvb2xlYW4sXG4gICAgfVxuICAgIGludGVyZmFjZSBTZXNzaW9uIHtcbiAgICAgICAgX3N1ZG8/OiBib29sZWFuLFxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5KGN0eDogQ29udGV4dCkge1xuICAgIGN0eC5jb21tYW5kKCdzdWRvIDxjb21tYW5kOnRleHQ+JywgeyBoaWRkZW46IHRydWUsIG5vUmVkaXJlY3Q6IHRydWUgfSlcbiAgICAgICAgLnVzZXJGaWVsZHMoWydzdWRvZXInLCAnYXV0aG9yaXR5J10pXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9LCBjb21tYW5kKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXNlc3Npb24udXNlci5zdWRvZXIpIHRocm93IG5ldyBFcnJvcignWW91IGFyZSBub3QgaW4gdGhlIHN1ZG9lcnMgZmlsZS4nKTtcbiAgICAgICAgICAgIGNvbnN0IG9sZCA9IHNlc3Npb24udXNlci5hdXRob3JpdHk7XG4gICAgICAgICAgICBzZXNzaW9uLnVzZXIuYXV0aG9yaXR5ID0gNTtcbiAgICAgICAgICAgIHNlc3Npb24uX3N1ZG8gPSB0cnVlO1xuICAgICAgICAgICAgYXdhaXQgc2Vzc2lvbi5leGVjdXRlKGNvbW1hbmQpO1xuICAgICAgICAgICAgc2Vzc2lvbi51c2VyLmF1dGhvcml0eSA9IG9sZDtcbiAgICAgICAgfSk7XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1hd2FpdC1pbi1sb29wICovXG5pbXBvcnQgeyBDb250ZXh0IH0gZnJvbSAna29pc2hpLWNvcmUnO1xuaW1wb3J0ICogYXMgIEtvaXNoaVBsdWdpblRlYWNoIGZyb20gJ2tvaXNoaS1wbHVnaW4tdGVhY2gnO1xuaW1wb3J0IHR5cGUgeyBEaWFsb2d1ZSB9IGZyb20gJ2tvaXNoaS1wbHVnaW4tdGVhY2gvbGliL3V0aWxzJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBCaW5hcnkgfSBmcm9tICdtb25nb2RiJztcblxuaW50ZXJmYWNlIEltYWdlU2VydmVyU3RhdHVzIHtcbiAgICB0b3RhbFNpemU6IG51bWJlclxuICAgIHRvdGFsQ291bnQ6IG51bWJlclxufVxuaW50ZXJmYWNlIEltYWdlRG9jIHtcbiAgICBfaWQ6IHN0cmluZyxcbiAgICBkYXRhOiBCaW5hcnlcbn1cbmRlY2xhcmUgbW9kdWxlICdrb2lzaGktY29yZScge1xuICAgIG5hbWVzcGFjZSBDb21tYW5kIHtcbiAgICAgICAgaW50ZXJmYWNlIENvbmZpZyB7XG4gICAgICAgICAgICBub1JlZGlyZWN0PzogYm9vbGVhbixcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbnRlcmZhY2UgU2Vzc2lvbiB7XG4gICAgICAgIF9kaWFsb2d1ZT86IERpYWxvZ3VlXG4gICAgfVxuICAgIGludGVyZmFjZSBBcHAge1xuICAgICAgICBnZXRJbWFnZVNlcnZlclN0YXR1cygpOiBQcm9taXNlPEltYWdlU2VydmVyU3RhdHVzPlxuICAgIH1cbiAgICBpbnRlcmZhY2UgVGFibGVzIHtcbiAgICAgICAgaW1hZ2U6IEltYWdlRG9jXG4gICAgfVxufVxuZGVjbGFyZSBtb2R1bGUgJ2tvaXNoaS1wbHVnaW4tdGVhY2gnIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93XG4gICAgbmFtZXNwYWNlIERpYWxvZ3VlIHtcbiAgICAgICAgaW50ZXJmYWNlIENvbmZpZyB7XG4gICAgICAgICAgICBpbWFnZVBhdGg/OiBzdHJpbmdcbiAgICAgICAgICAgIGltYWdlU2VydmVyPzogc3RyaW5nXG4gICAgICAgICAgICB1cGxvYWRLZXk/OiBzdHJpbmdcbiAgICAgICAgICAgIHVwbG9hZFBhdGg/OiBzdHJpbmdcbiAgICAgICAgICAgIHVwbG9hZFNlcnZlcj86IHN0cmluZ1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jb25zdCBpbWFnZVJFID0gL1xcW0NROmltYWdlLGZpbGU9KFteLF0rKSx1cmw9KFteXFxdXSspXFxdLztcbmNvbnN0IFJFaW1hZ2UgPSAvXFxbQ1E6aW1hZ2UsZmlsZT1pbWFnZTpcXC9cXC8oW14sXSspXFxdLztcblxuZXhwb3J0IGNvbnN0IGFwcGx5ID0gKGN0eDogQ29udGV4dCwgY29uZmlnOiBEaWFsb2d1ZS5Db25maWcpID0+IHtcbiAgICBjb25zdCBsb2dnZXIgPSBjdHgubG9nZ2VyKCd0ZWFjaCcpO1xuXG4gICAgY3R4LnBsdWdpbihLb2lzaGlQbHVnaW5UZWFjaCwgY29uZmlnKTtcbiAgICBjdHguY29tbWFuZCgndGVhY2gnLCB7IGNoZWNrQXJnQ291bnQ6IGZhbHNlIH0pO1xuXG4gICAgY3R4Lm9uKCdiZWZvcmUtY29tbWFuZCcsIGFzeW5jICh7IHNlc3Npb24sIGNvbW1hbmQgfSkgPT4ge1xuICAgICAgICBjb25zdCBub1JlZGlyZWN0ID0gY29tbWFuZC5nZXRDb25maWcoJ25vUmVkaXJlY3QnLCBzZXNzaW9uKTtcbiAgICAgICAgaWYgKG5vUmVkaXJlY3QgJiYgc2Vzc2lvbi5fcmVkaXJlY3RlZCkge1xuICAgICAgICAgICAgY29uc3QgY3JlYXRvciA9IGF3YWl0IGN0eC5hcHAuZGF0YWJhc2UuZ2V0VXNlcignaWQnLCBzZXNzaW9uLl9kaWFsb2d1ZS53cml0ZXIsIFsnYXV0aG9yaXR5J10pO1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgaWYgKGNyZWF0b3IuYXV0aG9yaXR5IDwgNSAmJiAhY3JlYXRvci5zdWRvZXIpIHJldHVybiAn5LiN5pSv5oyB5Zyo5o+S5YC85Lit6LCD55So6K+l5ZG95Luk44CCJztcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgY3R4Lm9uKCdjb25uZWN0JywgKCkgPT4ge1xuICAgICAgICBjb25zdCBjb2xsID0gY3R4LmFwcC5kYXRhYmFzZS5tb25nby5jb2xsZWN0aW9uKCdpbWFnZScpO1xuXG4gICAgICAgIGNvbnN0IGRvd25sb2FkRmlsZSA9IGFzeW5jIChmaWxlOiBzdHJpbmcsIHVybDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBpZiAoYXdhaXQgY29sbC5maW5kT25lKHsgX2lkOiBmaWxlIH0pKSByZXR1cm47XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IGF4aW9zLmdldDxBcnJheUJ1ZmZlcj4odXJsLCB7IHJlc3BvbnNlVHlwZTogJ2FycmF5YnVmZmVyJyB9KTtcbiAgICAgICAgICAgIGNvbnN0IGJ1ZiA9IEJ1ZmZlci5hbGxvYyhkYXRhLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgY29uc3QgdmlldyA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWYubGVuZ3RoOyArK2kpIGJ1ZltpXSA9IHZpZXdbaV07XG4gICAgICAgICAgICBhd2FpdCBjb2xsLmluc2VydE9uZSh7IF9pZDogZmlsZSwgZGF0YTogbmV3IEJpbmFyeShidWYpIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGN0eC5vbignZGlhbG9ndWUvZGV0YWlsJywgYXN5bmMgKGRpYWxvZ3VlLCBvdXRwdXQpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIGluIG91dHB1dCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2FwdHVyZTogUmVnRXhwRXhlY0FycmF5O1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uZC1hc3NpZ25cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNhcHR1cmUgPSBSRWltYWdlLmV4ZWMob3V0cHV0W2ldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW3RleHQsIGZpbGVdID0gY2FwdHVyZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgKz0gb3V0cHV0W2ldLnNsaWNlKDAsIGNhcHR1cmUuaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W2ldID0gb3V0cHV0W2ldLnNsaWNlKGNhcHR1cmUuaW5kZXggKyB0ZXh0Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBjb2xsLmZpbmRPbmUoeyBfaWQ6IGZpbGUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ICs9IGBbQ1E6aW1hZ2UsZmlsZT1iYXNlNjQ6Ly8ke3Jlcy5kYXRhLmJ1ZmZlci50b1N0cmluZygnYmFzZTY0Jyl9XWA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0W2ldID0gdCArIG91dHB1dFtpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign5LiL6L295Zu+54mH5pe25Y+R55Sf6ZSZ6K+v44CCJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGN0eC5vbignZGlhbG9ndWUvYmVmb3JlLXNlbmQnLCBhc3luYyAoc3RhdGUpID0+IHtcbiAgICAgICAgICAgIGxldCB7IGFuc3dlciB9ID0gc3RhdGU7XG4gICAgICAgICAgICBpZiAoIWFuc3dlcikgcmV0dXJuO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBsZXQgb3V0cHV0ID0gJyc7XG4gICAgICAgICAgICAgICAgbGV0IGNhcHR1cmU6IFJlZ0V4cEV4ZWNBcnJheTtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uZC1hc3NpZ25cbiAgICAgICAgICAgICAgICB3aGlsZSAoY2FwdHVyZSA9IFJFaW1hZ2UuZXhlYyhhbnN3ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFt0ZXh0LCBmaWxlXSA9IGNhcHR1cmU7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCArPSBhbnN3ZXIuc2xpY2UoMCwgY2FwdHVyZS5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGFuc3dlciA9IGFuc3dlci5zbGljZShjYXB0dXJlLmluZGV4ICsgdGV4dC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBjb2xsLmZpbmRPbmUoeyBfaWQ6IGZpbGUgfSk7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCArPSBgW0NROmltYWdlLGZpbGU9YmFzZTY0Oi8vJHtyZXMuZGF0YS5idWZmZXIudG9TdHJpbmcoJ2Jhc2U2NCcpfV1gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdGF0ZS5hbnN3ZXIgPSBvdXRwdXQgKyBhbnN3ZXI7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign5LiL6L295Zu+54mH5pe25Y+R55Sf6ZSZ6K+v44CCJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGN0eC5vbignZGlhbG9ndWUvYmVmb3JlLW1vZGlmeScsIGFzeW5jICh7IG9wdGlvbnMgfSkgPT4ge1xuICAgICAgICAgICAgbGV0IHsgYW5zd2VyIH0gPSBvcHRpb25zO1xuICAgICAgICAgICAgaWYgKCFhbnN3ZXIpIHJldHVybjtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbGV0IG91dHB1dCA9ICcnO1xuICAgICAgICAgICAgICAgIGxldCBjYXB0dXJlOiBSZWdFeHBFeGVjQXJyYXk7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbmQtYXNzaWduXG4gICAgICAgICAgICAgICAgd2hpbGUgKGNhcHR1cmUgPSBpbWFnZVJFLmV4ZWMoYW5zd2VyKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBbdGV4dCwgZmlsZSwgdXJsXSA9IGNhcHR1cmU7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCArPSBhbnN3ZXIuc2xpY2UoMCwgY2FwdHVyZS5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGFuc3dlciA9IGFuc3dlci5zbGljZShjYXB0dXJlLmluZGV4ICsgdGV4dC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBkb3dubG9hZEZpbGUoZmlsZSwgdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9IGBbQ1E6aW1hZ2UsZmlsZT1pbWFnZTovLyR7ZmlsZX1dYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hbnN3ZXIgPSBvdXRwdXQgKyBhbnN3ZXI7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiK5Lyg5Zu+54mH5pe25Y+R55Sf6ZSZ6K+v44CCJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tYXdhaXQtaW4tbG9vcCAqL1xuaW1wb3J0IHN1cGVyYWdlbnQgZnJvbSAnc3VwZXJhZ2VudCc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHNoYXJwIGZyb20gJ3NoYXJwJztcbmltcG9ydCB7IENvbnRleHQgfSBmcm9tICdrb2lzaGktY29yZSc7XG5pbXBvcnQgeyB0YWtlLCBmaWx0ZXIgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0ICogYXMgS29pc2hpUGx1Z2luSW1hZ2VTZWFyY2ggZnJvbSAna29pc2hpLXBsdWdpbi1pbWFnZS1zZWFyY2gnO1xuaW1wb3J0ICogYXMgS29pc2hpUGx1Z2luVG9vbHMgZnJvbSAna29pc2hpLXBsdWdpbi10b29scyc7XG5pbXBvcnQgeyBleGlzdHNTeW5jIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgdGV4dDJwbmcgfSBmcm9tICcuLi9saWIvZ3JhcGgnO1xuaW1wb3J0IHNoZWxsRXhlY3V0ZSBmcm9tICcuLi9saWIvc2hlbGwnO1xuXG5leHBvcnQgY29uc3QgYXBwbHkgPSAoY3R4OiBDb250ZXh0KSA9PiB7XG4gICAgY3R4LnBsdWdpbihLb2lzaGlQbHVnaW5Ub29scywge1xuICAgICAgICBiaWxpYmlsaTogZmFsc2UsXG4gICAgICAgIG1hZ2k6IGZhbHNlLFxuICAgICAgICBvZWlzOiBmYWxzZSxcbiAgICB9KTtcbiAgICBjdHgucGx1Z2luKEtvaXNoaVBsdWdpbkltYWdlU2VhcmNoKTtcbiAgICBjdHguY29tbWFuZCgnc2VhcmNoJywgJycsIHsgbWF4VXNhZ2U6IDUsIG1pbkludGVydmFsOiA2MDAwMCB9KTtcblxuICAgIGN0eC5jb21tYW5kKCd0b29scy90ZXggPGNvZGU6dGV4dD4nLCAnS2FUZVgg5riy5p+TJywgeyBtaW5JbnRlcnZhbDogMTAwMCB9KVxuICAgICAgICAuYWxpYXMoJ2thdGV4IDxjb2RlOnRleHQ+JylcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0sIHRleCkgPT4ge1xuICAgICAgICAgICAgbGV0IHsgZGF0YTogc3ZnIH0gPSBhd2FpdCBheGlvcy5nZXQoYGh0dHBzOi8vd3d3LnpoaWh1LmNvbS9lcXVhdGlvbj90ZXg9JHtlbmNvZGVVUklDb21wb25lbnQodGV4KX1gKTtcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSBzdmcubWF0Y2goLz4oW148XSspPFxcL3RleHQ+Lyk7XG4gICAgICAgICAgICBpZiAodGV4dCkgcmV0dXJuIHNlc3Npb24uc2VuZCh0ZXh0WzFdKTtcbiAgICAgICAgICAgIGNvbnN0IHZpZXdCb3ggPSBzdmcubWF0Y2goLyB2aWV3Qm94PVwiMCAoLT9cXGQqKC5cXGQrKT8pIC0/XFxkKiguXFxkKyk/IC0/XFxkKiguXFxkKyk/XCIgLyk7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICAgICAgICAgICAgaWYgKHZpZXdCb3gpIHN2ZyA9IHN2Zy5yZXBsYWNlKCdcXG4nLCBgXFxuPHJlY3QgeD1cIjBcIiB5PVwiJHt2aWV3Qm94WzFdfVwiIHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjEwMCVcIiBmaWxsPVwid2hpdGVcIj48L3JlY3Q+XFxuYCk7IC8vIGxndG0gW2pzL2luY29tcGxldGUtc2FuaXRpemF0aW9uXVxuICAgICAgICAgICAgY29uc3QgcG5nID0gYXdhaXQgc2hhcnAoQnVmZmVyLmZyb20oc3ZnKSkucG5nKCkudG9CdWZmZXIoKTtcbiAgICAgICAgICAgIHJldHVybiBgW0NROmltYWdlLGZpbGU9YmFzZTY0Oi8vJHtwbmcudG9TdHJpbmcoJ2Jhc2U2NCcpfV1gO1xuICAgICAgICB9KTtcblxuICAgIGN0eC5jb21tYW5kKCd0b29scy9pcCA8aXA+JywgJ+afpeivomlwJylcbiAgICAgICAgLmFjdGlvbihhc3luYyAoXywgYXJncykgPT4ge1xuICAgICAgICAgICAgY29uc3QgdXJsID0gYGh0dHA6Ly9mcmVlYXBpLmlwaXAubmV0LyR7YXJnc31gO1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgc3VwZXJhZ2VudC5nZXQodXJsKTtcbiAgICAgICAgICAgIHJldHVybiByZXMuYm9keS5qb2luKCcgJyk7XG4gICAgICAgIH0pO1xuXG4gICAgY3R4LmNvbW1hbmQoJ3Rvb2xzL29laXMgPHNlcXVlbmNlPicsICfkvb/nlKggT0VJUyDov5vooYzmlbDliJfmn6Xor6InLCB7IG1heFVzYWdlOiAxMCB9KVxuICAgICAgICAub3B0aW9uKCdzdGFydCcsICctcyA8c3RhcnQ+IOiuvue9rui1t+Wni+mhteeggScsIHsgZmFsbGJhY2s6IDAgfSlcbiAgICAgICAgLnVzYWdlKCfovpPlhaXnlKjpgJflj7fpmpTlvIDnmoTmlbDkvZzkuLropoHmn6Xor6LnmoTmlbDliJfnmoTliY3lh6DpobnvvIzmiJbogIXnm7TmjqXovpPlhaXku6UgaWQ6QSDmiZPlpLTnmoTmlbDliJfnvJblj7fjgIInKVxuICAgICAgICAuZXhhbXBsZSgnb2VpcyAxLDIsMyw2LDExLDIzLDQ3LDEwNiwyMzUnKVxuICAgICAgICAuZXhhbXBsZSgnb2VpcyBpZDpBMDAwMDU1JylcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBvcHRpb25zLCBzZXNzaW9uIH0sIHNlcXVlbmNlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGJvZHkgfSA9IGF3YWl0IHN1cGVyYWdlbnQuZ2V0KGBodHRwczovL29laXMub3JnL3NlYXJjaD9mbXQ9anNvbiZxPSR7c2VxdWVuY2V9JnN0YXJ0PSR7b3B0aW9ucy5zdGFydH1gKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBmaWx0ZXIoYm9keS5yZXN1bHRzLCAocmVzdWx0KSA9PiAhcmVzdWx0Lm5hbWUuc3RhcnRzV2l0aCgnRHVwbGljYXRlJykpO1xuICAgICAgICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgdGFrZShyZXN1bHRzLCAzKSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHNlc3Npb24uc2VuZFF1ZXVlZChbXG4gICAgICAgICAgICAgICAgICAgIGBodHRwczovL29laXMub3JnL0Eke1N0cmluZyhyZXN1bHQubnVtYmVyKS5wYWRTdGFydCg2LCAnMCcpfWAsXG4gICAgICAgICAgICAgICAgICAgIGAke3Jlc3VsdC5uYW1lfSR7cmVzdWx0LmlkID8gYCAoJHtyZXN1bHQuaWR9KWAgOiAnJ31gLFxuICAgICAgICAgICAgICAgICAgICBgJHt0YWtlKHJlc3VsdC5kYXRhLnNwbGl0KCcsJyksIDEwKS5qb2luKCcsJyl9YCxcbiAgICAgICAgICAgICAgICBdLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICBjdHguY29tbWFuZCgndG9vbHMvcG9ybmh1YiA8dGV4dDE+IDx0ZXh0Mj4nLCAn55Sf5oiQUG9ybkh1YumjjuagvExvZ28nKVxuICAgICAgICAuYWN0aW9uKGFzeW5jIChfLCB0ZXh0MSwgdGV4dDIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhZ2UgPSBhd2FpdCBjdHguYXBwLnB1cHBldGVlci5wYWdlKCk7XG4gICAgICAgICAgICBhd2FpdCBwYWdlLmdvdG8oJ2h0dHBzOi8vd3d3LmR1dGUub3JnL3Bvcm5odWItbG9nbycpO1xuICAgICAgICAgICAgYXdhaXQgcGFnZS5ldmFsdWF0ZSgodGV4dDEsIHRleHQyKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncG9ybmh1Yi1wcmVmaXgnKVswXS5pbm5lckhUTUwgPSB0ZXh0MTtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwb3JuaHViLXBvc3RmaXgnKVswXS5pbm5lckhUTUwgPSB0ZXh0MjtcbiAgICAgICAgICAgIH0sIHRleHQxLCB0ZXh0Mik7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gYXdhaXQgcGFnZS4kKCcuc2NyZWVuc2hvdGFibGUnKTtcbiAgICAgICAgICAgIGNvbnN0IGJ1ZiA9IGF3YWl0IGVsZW1lbnQuc2NyZWVuc2hvdCh7fSk7XG4gICAgICAgICAgICBhd2FpdCBwYWdlLmNsb3NlKCk7XG4gICAgICAgICAgICByZXR1cm4gYFtDUTppbWFnZSxmaWxlPWJhc2U2NDovLyR7YnVmLnRvU3RyaW5nKCdiYXNlNjQnKX1dYDtcbiAgICAgICAgfSk7XG5cbiAgICBpZiAoZXhpc3RzU3luYygnL3Vzci9iaW4vd2QnKSkge1xuICAgICAgICBjdHguY29tbWFuZCgndG9vbHMvZGljdCA8d29yZD4nLCAn5L2/55So5peg6YGT6K+N5YW45p+l6K+NJylcbiAgICAgICAgICAgIC5leGFtcGxlKCdkaWN0IGhlbGxvJylcbiAgICAgICAgICAgIC5hbGlhcygnd2QnKVxuICAgICAgICAgICAgLmFjdGlvbihhc3luYyAoXywgd29yZCkgPT4ge1xuICAgICAgICAgICAgICAgIHdvcmQgPSB3b3JkLnNwbGl0KCcnKS5maWx0ZXIoKHcpID0+IC9bLWEtekEtWjAtOV0vLnRlc3QodykpLmpvaW4oJycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBhd2FpdCBzaGVsbEV4ZWN1dGUoYC91c3IvYmluL3dkICR7d29yZH1gKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYWdlID0gYXdhaXQgY3R4LmFwcC5wdXBwZXRlZXIucGFnZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGltZyA9IGF3YWl0IHRleHQycG5nKHBhZ2UsIHApO1xuICAgICAgICAgICAgICAgIHBhZ2UuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYFtDUTppbWFnZSxmaWxlPWJhc2U2NDovLyR7aW1nfV1gO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxufTtcbiIsImltcG9ydCB7IEFwcCB9IGZyb20gJ2tvaXNoaS1jb3JlJztcblxuY29uc3QgZ2V0Rmlyc3RQaW55aW4gPSAoZGF0YSkgPT4gKGRhdGEucGlueWluLnNwbGl0KC9cXHMrLykuc2hpZnQoKSB8fCAnJylcbiAgICAucmVwbGFjZSgvW8SBw6HHjsOgXS9nLCAnYScpLnJlcGxhY2UoL1vFjcOzx5LDsl0vZywgJ28nKS5yZXBsYWNlKC9bxJPDqcSbw6jDql0vZywgJ2UnKVxuICAgIC5yZXBsYWNlKC9bxKvDrceQw6xdL2csICdpJylcbiAgICAucmVwbGFjZSgvW8Wrw7rHlMO5XS9nLCAndScpXG4gICAgLnJlcGxhY2UoL1vHlseYx5rHnMO8XS9nLCAndicpO1xuY29uc3QgZ2V0TGFzdFBpbnlpbiA9IChkYXRhKSA9PiAoZGF0YS5waW55aW4uc3BsaXQoL1xccysvKS5wb3AoKSB8fCAnJylcbiAgICAucmVwbGFjZSgvW8SBw6HHjsOgXS9nLCAnYScpLnJlcGxhY2UoL1vFjcOzx5LDsl0vZywgJ28nKS5yZXBsYWNlKC9bxJPDqcSbw6jDql0vZywgJ2UnKVxuICAgIC5yZXBsYWNlKC9bxKvDrceQw6xdL2csICdpJylcbiAgICAucmVwbGFjZSgvW8Wrw7rHlMO5XS9nLCAndScpXG4gICAgLnJlcGxhY2UoL1vHlseYx5rHnMO8XS9nLCAndicpO1xuY29uc3QgZml4ID0gKGRhdGEpID0+IHtcbiAgICBpZiAoZGF0YS53b3JkID09PSAn5ZGz5ZCM5Zq86JyhJykgZGF0YS5waW55aW4gPSBkYXRhLnBpbnlpbi5yZXBsYWNlKCdjw7knLCAnbMOgJyk7XG4gICAgaWYgKGRhdGEud29yZC5lbmRzV2l0aCgn5L+pJykpIGRhdGEucGlueWluID0gZGF0YS5waW55aW4ucmVwbGFjZSgnbGnHjm5nJywgJ2xpx44nKTtcbiAgICBkYXRhLnBpbnlpbiA9IGRhdGEucGlueWluLnJlcGxhY2UoL3lpKFvEk8OpxJvDqMOqZV0pL2csICd5JDEnKTtcbiAgICByZXR1cm4gZGF0YTtcbn07XG5jb25zdCBpbmRleGVkID0gKGpzb24pID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSB7IGZpcnN0UGlueWluOiB7fSwgbGFzdFBpbnlpbjoge30sIHdvcmQ6IHt9IH07XG4gICAgZm9yIChjb25zdCBkYXRhIG9mIGpzb24pIHtcbiAgICAgICAgZml4KGRhdGEpO1xuICAgICAgICBpZiAoZGF0YS53b3JkLmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgICAgY29uc3Qga2V5MSA9IGdldExhc3RQaW55aW4oZGF0YSk7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZXMxID0gcmVzdWx0Lmxhc3RQaW55aW5ba2V5MV0gfHwgW107XG4gICAgICAgICAgICByZXN1bHQubGFzdFBpbnlpbltrZXkxXSA9IHZhbHVlczE7XG4gICAgICAgICAgICB2YWx1ZXMxLnB1c2goZGF0YSk7XG4gICAgICAgICAgICBjb25zdCBrZXkyID0gZ2V0Rmlyc3RQaW55aW4oZGF0YSk7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZXMyID0gcmVzdWx0LmZpcnN0UGlueWluW2tleTJdIHx8IFtdO1xuICAgICAgICAgICAgcmVzdWx0LmZpcnN0UGlueWluW2tleTJdID0gdmFsdWVzMjtcbiAgICAgICAgICAgIHZhbHVlczIucHVzaChkYXRhKTtcbiAgICAgICAgICAgIHJlc3VsdC53b3JkW2RhdGEud29yZF0gPSBkYXRhO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBwaW55aW5zID0gbmV3IFNldChbJ3lpJ10pO1xuICAgIGZvciAobGV0IGxldmVsID0gMTsgcGlueWlucy5zaXplID4gMDsgKytsZXZlbCkge1xuICAgICAgICBjb25zdCBuZXdwaW55aW5zOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcbiAgICAgICAgcGlueWlucy5mb3JFYWNoKChwaW55aW4pID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZGF0YSBvZiByZXN1bHQubGFzdFBpbnlpbltwaW55aW5dIHx8IFtdKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFkYXRhLmxldmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEubGV2ZWwgPSBsZXZlbDtcbiAgICAgICAgICAgICAgICAgICAgbmV3cGlueWlucy5hZGQoZ2V0Rmlyc3RQaW55aW4oZGF0YSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHBpbnlpbnMgPSBuZXdwaW55aW5zO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuY29uc3QgZGIgPSBpbmRleGVkKGV2YWwoJ3JlcXVpcmUnKShgJHtwcm9jZXNzLmN3ZCgpfS9kYXRhYmFzZS95aUdlRGluZ0xpYS5qc29uYCkpO1xuXG5jb25zdCBoYW5kbGUgPSAoaW5wdXQ6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGxldCBkYXRhID0gZGIud29yZFtpbnB1dF07XG4gICAgd2hpbGUgKGRhdGEgJiYgZGF0YS5sZXZlbCkge1xuICAgICAgICBjb25zdCB7IGxldmVsIH0gPSBkYXRhO1xuICAgICAgICByZXN1bHQucHVzaChkYXRhKTtcbiAgICAgICAgaWYgKGxldmVsID4gMSkge1xuICAgICAgICAgICAgY29uc3QgbmV4dCA9IGRiLmZpcnN0UGlueWluW2dldExhc3RQaW55aW4oZGF0YSldO1xuICAgICAgICAgICAgY29uc3QgZmlsdGVyZWQgPSBuZXh0LmZpbHRlcigoZCkgPT4gZC5sZXZlbCAmJiBkLmxldmVsIDwgbGV2ZWwpO1xuICAgICAgICAgICAgZGF0YSA9IGZpbHRlcmVkW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGZpbHRlcmVkLmxlbmd0aCldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goeyB3b3JkOiAn5LiA5Liq6aG25L+pJywgcGlueWluOiAnecSrIGfDqCBkx5BuZyBsaceOJyB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBjb25zdCBhcHBseSA9IChhcHA6IEFwcCkgPT4ge1xuICAgIGFwcC5jb21tYW5kKCfmiJDor63mjqXpvpkgPOaIkOivrT4nLCAn5oiQ6K+t5o6l6b6ZJywgeyBtaW5JbnRlcnZhbDogMTAwMCwgY2hlY2tBcmdDb3VudDogZmFsc2UgfSlcbiAgICAgICAgLmFjdGlvbigoXywgYXJncykgPT4ge1xuICAgICAgICAgICAgaWYgKCFhcmdzKSByZXR1cm4gJ+ivt+i+k+WFpeaIkOivreOAgic7XG4gICAgICAgICAgICBjb25zdCBkID0gaGFuZGxlKGFyZ3MpO1xuICAgICAgICAgICAgaWYgKGQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIGluIGQpIHJlcy5wdXNoKGRbaV0ud29yZCwgJyAnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLmpvaW4oJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbn07XG4iLCJ2YXIgbWFwID0ge1xuXHRcIi4vYXV0b2tpY2tcIjogNjI4Nixcblx0XCIuL2F1dG9raWNrLnRzXCI6IDYyODYsXG5cdFwiLi9iaWxpYmlsaVwiOiAxMjk4LFxuXHRcIi4vYmlsaWJpbGkudHNcIjogMTI5OCxcblx0XCIuL2JvdHRsZVwiOiAyOTMyLFxuXHRcIi4vYm90dGxlLnRzXCI6IDI5MzIsXG5cdFwiLi9idXN5Ym94XCI6IDQ0NTQsXG5cdFwiLi9idXN5Ym94LnRzXCI6IDQ0NTQsXG5cdFwiLi9jYWxjXCI6IDgzNDIsXG5cdFwiLi9jYWxjLnRzXCI6IDgzNDIsXG5cdFwiLi9jb2RlZm9yY2VzXCI6IDYxMzQsXG5cdFwiLi9jb2RlZm9yY2VzLnRzXCI6IDYxMzQsXG5cdFwiLi9kcmVzc1wiOiAxOTE2LFxuXHRcIi4vZHJlc3MudHNcIjogMTkxNixcblx0XCIuL2Vjb25vbXlcIjogNTI4Mixcblx0XCIuL2Vjb25vbXkudHNcIjogNTI4Mixcblx0XCIuL2V2YWxcIjogNzI3Nixcblx0XCIuL2V2YWwudHNcIjogNzI3Nixcblx0XCIuL2dpdGh1YlwiOiA4Mzk0LFxuXHRcIi4vZ2l0aHViLnRzXCI6IDgzOTQsXG5cdFwiLi9nbGFkb3NcIjogNDgxOSxcblx0XCIuL2dsYWRvcy50c1wiOiA0ODE5LFxuXHRcIi4vaGVhcnRoc3RvbmVcIjogNzc4MCxcblx0XCIuL2hlYXJ0aHN0b25lLnRzXCI6IDc3ODAsXG5cdFwiLi9odHRwY2F0XCI6IDEyNjMsXG5cdFwiLi9odHRwY2F0LnRzXCI6IDEyNjMsXG5cdFwiLi9pbWFnZXRhZ1wiOiA1Nzc4LFxuXHRcIi4vaW1hZ2V0YWcudHNcIjogNTc3OCxcblx0XCIuL2pqd3pcIjogMTkyNSxcblx0XCIuL2pqd3oudHNcIjogMTkyNSxcblx0XCIuL2thYnVcIjogMjE3OSxcblx0XCIuL2thYnUudHNcIjogMjE3OSxcblx0XCIuL2x1b2d1XCI6IDE3ODcsXG5cdFwiLi9sdW9ndS50c1wiOiAxNzg3LFxuXHRcIi4vbHhib3RcIjogNzc1MCxcblx0XCIuL2x4Ym90LnRzXCI6IDc3NTAsXG5cdFwiLi9vY3JcIjogMTA3OCxcblx0XCIuL29jci50c1wiOiAxMDc4LFxuXHRcIi4vb2llclwiOiA4MTQwLFxuXHRcIi4vb2llci50c1wiOiA4MTQwLFxuXHRcIi4vcHJveHlcIjogNTQwNSxcblx0XCIuL3Byb3h5LnRzXCI6IDU0MDUsXG5cdFwiLi9ydW5cIjogMzM3Mixcblx0XCIuL3J1bi50c1wiOiAzMzcyLFxuXHRcIi4vc3RhdHVzXCI6IDcwODgsXG5cdFwiLi9zdGF0dXMudHNcIjogNzA4OCxcblx0XCIuL3N1ZG9cIjogOTg5MSxcblx0XCIuL3N1ZG8udHNcIjogOTg5MSxcblx0XCIuL3RlYWNoXCI6IDQ3NSxcblx0XCIuL3RlYWNoLnRzXCI6IDQ3NSxcblx0XCIuL3Rvb2xzXCI6IDg0MjQsXG5cdFwiLi90b29scy50c1wiOiA4NDI0LFxuXHRcIi4vd29yZGNsb3VkXCI6IDc1NTgsXG5cdFwiLi93b3JkY2xvdWQudHNcIjogNzU1OCxcblx0XCIuL3lnZGxcIjogMjQ2OCxcblx0XCIuL3lnZGwudHNcIjogMjQ2OFxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDUzMDU7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLmNhY2hlL2hzX2NhcmRfZW5VUy5qc29uXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uY2FjaGUvaHNfY2FyZF96aENOLmpzb25cIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImFuc2lfdXBcIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImF4aW9zXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjaGlsZF9wcm9jZXNzXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjcnlwdG9cIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImZzXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJmcy1leHRyYVwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwianMteWFtbFwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwia29pc2hpLWFkYXB0ZXItb25lYm90XCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJrb2lzaGktYWRhcHRlci10ZWxlZ3JhbVwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwia29pc2hpLWNvcmVcIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImtvaXNoaS1wbHVnaW4tY29tbW9uXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJrb2lzaGktcGx1Z2luLWV2YWxcIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImtvaXNoaS1wbHVnaW4taW1hZ2Utc2VhcmNoXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJrb2lzaGktcGx1Z2luLW1vbmdvXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJrb2lzaGktcGx1Z2luLXRlYWNoXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJrb2lzaGktcGx1Z2luLXRvb2xzXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJrb2lzaGktcGx1Z2luLXdlYnVpXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJrb2lzaGktdXRpbHNcIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImxvZGFzaFwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibW9tZW50XCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJtb25nb2RiXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJvc1wiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicGF0aFwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwic2hhcnBcIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInN1cGVyYWdlbnRcIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInN1cGVyYWdlbnQtcHJveHlcIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInV0aWxcIik7OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkwNjMpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==