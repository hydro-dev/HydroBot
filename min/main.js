(()=>{var __webpack_modules__={7547:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.endOfToday=void 0;const i=n(o(2470));t.endOfToday=function(){return i.default().utc().add(8,"hours").endOf("day").subtract(8,"hours").toDate()}},2519:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.text2png=void 0;const i=new(n(o(4768)).default);t.text2png=async function(e,t){const o=`<pre style="font-family:'Source Code Pro', Consolas, 'Microsoft Yahei', HYShuaiXianTiW;font-size:14px;max-width:630px">${i.ansi_to_html(t)}</pre>`;let n,a;try{await e.setViewport({height:100,width:30}),await e.setContent(o);const t=await e.$("pre"),i=await e.evaluate((()=>{const e=document.getElementsByTagName("pre")[0];return{width:e.scrollWidth,height:e.scrollHeight}})),a=await t.boundingBox();await e.setViewport({width:Math.ceil(i.width+14),height:Math.ceil(a.height+14)}),n=await e.screenshot({})}catch(e){a=e}if(a)throw a;return(n||Buffer.from("")).toString("base64")}},9137:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.registerItem=t.Items=void 0,t.Items={fallback:{id:"fallback",weight:0,name:"未知物品",description:"未知物品"}},t.registerItem=function(e,o,n,i){t.Items[e]={id:e,weight:o,name:n,description:i}}},7286:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=o(3129);t.default=async function(e){let t;try{t=await new Promise(((t,o)=>{n.exec(e,((e,n,i)=>{e&&o(e),t(n+i)}))}))}catch(e){return e.toString()}return t.trim().length?t:"(execute success)"}},9063:function(module,__unused_webpack_exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};const path_1=__importDefault(__webpack_require__(5622)),koishi_core_1=__webpack_require__(8664),koishi_utils_1=__webpack_require__(280),fs_extra_1=__importDefault(__webpack_require__(4298)),koishi_plugin_mongo_1=__webpack_require__(9585);__webpack_require__(8573),__webpack_require__(9711),process.on("unhandledRejection",((e,t)=>{console.log("Unhandled Rejection:",t)})),koishi_utils_1.Logger.showDiff=!1,koishi_utils_1.Logger.showTime="MM-DD hh:mm:ss",koishi_core_1.Command.defaultConfig.checkArgCount=!0,String.prototype.decode=function(){return this.replace(/&#91;/gm,"[").replace(/&#93;/gm,"]").replace(/&amp;/gm,"&")},String.prototype.encode=function(){return this.replace(/&/gm,"&amp;").replace(/\[/gm,"&#91;").replace(/\]/gm,"&#93;")},koishi_core_1.Session.prototype.executeSilent=function(e,t){return this._silent=!0,this.send=koishi_utils_1.noop,this.sendQueued=koishi_utils_1.noop,this.execute(e,t)};class Main{constructor(e){this.logger=new koishi_utils_1.Logger("main"),this.config=e.config,this.app=new koishi_core_1.App({port:this.config.port,bots:this.config.bots,type:this.config.type,onebot:this.config.onebot,telegram:this.config.telegram,prefix:this.config.prompt,autoAuthorize:1,autoAssign:!0,minSimilarity:.7}),this.run()}async run(){fs_extra_1.default.ensureDirSync(path_1.default.resolve(__dirname,"..",".cache")),this.app.plugin(koishi_plugin_mongo_1.apply,this.config.db),this.app.on("connect",(async()=>{for(const e of this.config.admin){const t=e.split("&");let o;for(const e of t){const[t,n]=e.split(":");await this.app.database.getUser(t,n)&&(o=[t,n])}const n=Object.assign({},...t.map((e=>e.split(":"))).map((e=>({[e[0]]:e[1]}))));o&&this.app.database.setUser(o[0],o[1],{...n,authority:5,sudoer:!0}),this.logger.info(`Opped ${e}`)}})),await this.load(),await this.app.start()}async load(){for(const plugin of this.config.enabledplugins)try{"string"==typeof plugin?plugin.startsWith("~")?this.app.plugin(__webpack_require__(5305)(`./${plugin.split("~")[1]}`)):this.app.plugin(eval("require")(plugin).apply):plugin instanceof Array&&(plugin[0].startsWith("~")?this.app.plugin(__webpack_require__(5305)(`./${plugin[0].split("~")[1]}`),plugin[1]):this.app.plugin(eval("require")(plugin[0]).apply,plugin[1]))}catch(e){this.logger.error("Failed to load ",plugin,e)}}}global.Main=Main,module.exports=Main},6286:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=o(8664),a=o(3804),s=n(o(2470));i.Channel.extend((()=>({kick:0}))),t.apply=async function(e){e.select("platform","onebot").command("autokick <count>","",{hidden:!0,authority:4}).channelFields(["kick"]).action((async({session:e},t)=>(e.channel.kick=+t,`set to ${t}`))),e.app.on("connect",(()=>{const t=e.app.database.mongo.collection("autokick");e.select("platform","onebot").command("autokick.run","",{hidden:!0,authority:4}).channelFields(["kick"]).option("dry","dry run",{authority:2}).action((async({session:e,options:o})=>{const n=await e.bot.getGroup(e.groupId);let i=await e.bot.$getGroupMemberList(n.groupId);const r=(await t.find({groupId:e.groupId}).toArray()).map((e=>e.userId));if(i=a.filter(i,(e=>!r.includes(e.userId))),e.channel.kick&&e.channel.kick<i.length){let r;i=a.sortBy(i.map((e=>({...e,sort:Math.max(e.lastSentTime,e.joinTime)}))),"sort");for(const o of i){if(!await t.findOne({groupId:e.groupId,userId:o.userId})){r=o;break}}await e.send([`将 ${r.nickname||r.card} (${r.userId}) 移出群`,`（${s.default(1e3*r.joinTime||0).fromNow()}加入，上次发言 ${s.default(1e3*r.lastSentTime||0).fromNow()}）`].join("\n")),o.dry||await Promise.all([e.bot.$setGroupKick(n.groupId,r.userId),t.insertOne({groupId:e.groupId,userId:r.userId})])}}))}))}},1298:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(4515)),a={};for(let e=0;e<58;e++)a["fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF"[e]]=e;const s=[11,10,3,8,4,6],r=["B","V","1","","","4","","1","","7","",""];function c(e){if(12!==e.length||(e[0]+e[1]+e[2]+e[5]+e[7]+e[9]).toUpperCase()!==r.join(""))return null;let t=0;for(let o=0;o<6;o++)t+=a[e[s[o]]]*58**o;return t=t-8728348608^177451812,t>0&&t<1e9?t:null}const l=[[/(BV[0-9a-zA-Z]{10})/gim,e=>c(e[1])],[/av([0-9]+)/gim,e=>parseInt(e[1],10)],[/b23\.tv\/([a-zA-Z0-9]+)/gim,async e=>{const t=`https://b23.tv/${e[1]}`;return c((await new Promise((e=>{i.default.get(t).buffer(!1).end(((o,n)=>{e(n.redirects.length?n.redirects.pop():t)}))}))).split("video/")[1].split("?")[0])}]];t.apply=e=>{e.command("bilibili <avid>",{hidden:!0}).action((async({session:e},t)=>{const o=await i.default.get(`http://api.bilibili.com/x/web-interface/view?aid=${t}`);0===o.body.code&&await e.send(`bilibili.com/video/av${t}\n${o.body.data.title}\n[CQ:image,file=${o.body.data.pic}]`)})),e.middleware((async(e,t)=>{let o;await t();for(const t of l){const n=t[0].exec(e.content);if(n){const e=t[1](n);o=e instanceof Promise?await e:e;break}}o&&await e.execute(`bilibili ${o}`)}))}},2932:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;t.apply=e=>{e.on("connect",(async()=>{const t=e.database.mongo.collection("bottle");e.command("bottle.throw <content:text>","丢漂流瓶",{noRedirect:!0}).alias("丢漂流瓶").userFields(["id"]).action((async({session:e},o)=>`已丢出。(${(await t.insertOne({groupId:`${e.platform}:${e.groupId}`,userId:+e.user.id,content:o.trim(),pick:0})).insertedId})`)),e.command("bottle.pick","捡漂流瓶").alias("捡漂流瓶").action((async()=>{const e=await t.find({}).count();if(!e)return"没有捡到";const o=Math.floor(Math.random()*e),[n]=await t.find({}).skip(o).limit(1).toArray();return Math.random()>.5?await t.deleteOne({_id:n._id}):await t.updateOne({_id:n._id},{$inc:{pick:1}}),`被捡起 ${n.pick+1} 次\n时间：${new Date(1e3*n._id.generationTime).toLocaleString()}\n内容：${n.content}`})),e.command("bottle.del <query:text>",{authority:5,hidden:!0}).action((async(e,o)=>(await t.deleteMany(JSON.parse(o.decode()))).deletedCount.toString()))})),e.command("bottle","漂流瓶")}},4454:function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.apply=void 0;const child_process_1=__importDefault(__webpack_require__(3129)),util_1=__webpack_require__(1669),koishi_core_1=__webpack_require__(8664),koishi_plugin_common_1=__webpack_require__(4393),moment_1=__importDefault(__webpack_require__(2470)),graph_1=__webpack_require__(2519),shell_1=__importDefault(__webpack_require__(7286));koishi_core_1.Channel.extend((()=>({disallowedCommands:[]})));const groupMap={},userMap={};async function getGroupName(e){if("private"===e.subtype)return"私聊";const t=Date.now(),o=e.channelId;if(!groupMap[o]||t-groupMap[o][1]>=koishi_core_1.Time.hour){const n=e.bot.getGroup(o).then((e=>e.groupName),(()=>o));groupMap[o]=[n,t]}let n=await groupMap[o][0];return n!==`${o}`&&(n+=` (${o})`),n}async function formatMessage(e){const t=koishi_core_1.segment.parse(e.content);let o="";for(const n of t)if("string"==typeof n)o+=n;else if("text"===n.type)o+=n.data.content;else if("at"===n.type)if("all"===n.data.qq)o+="@全体成员";else{const t=n.data.qq,i=Date.now();if(!userMap[t]||i-userMap[t][1]>=koishi_core_1.Time.hour){const o=e.bot.getGroupMember(e.groupId,t).then((e=>e.nickname||e.username),(()=>t));userMap[t]=[o,i]}o+=`@${await userMap[t][0]}`}else"face"===n.type?o+=`[face ${n.data.id}]`:"image"===n.type?o+=`[image ${(n.data.url||"").split("?")[0]}]`:"reply"===n.type?o+=`[reply ${n.data.id}]`:o+=`[${n.type}]`;return o}const checkGroupAdmin=({session:e})=>e.user.authority>=4||e.author.roles.includes("admin")||e.author.roles.includes("owner")?null:"仅管理员可执行该操作。",apply=(ctx,config={})=>{var _a,_b;const logger=new koishi_core_1.Logger("busybox");koishi_core_1.Logger.levels.message=3,koishi_core_1.Time.setTimezoneOffset(null!==(_a=config.timezoneOffset)&&void 0!==_a?_a:-480),config.recordMessage=null===(_b=config.recordMessage)||void 0===_b||_b,ctx.plugin(koishi_plugin_common_1.apply,{}),ctx.command("help",{authority:1,hidden:!0}),ctx.command("tex",{authority:1}),ctx.command("_","管理工具"),ctx.select("groupId").command("_.assign","assign",{authority:4}).channelFields(["assignee"]).action((async({session:e})=>{e.channel.assignee=e.selfId.toString()})),ctx.command("_.echo <msg:text>","echo",{noRedirect:!0,authority:3}).action(((e,t)=>t.decode())),ctx.command("_.eval <expr:text>",{authority:5,noRedirect:!0,hidden:!0}).option("i","Output as image").userFields(koishi_core_1.User.fields).channelFields(koishi_core_1.Channel.fields).action((async({session,options},input)=>{let res;const expr=`        (async function f() {\n            return ${input.decode()}\n        })()`;try{res=await eval(expr)}catch(e){res=e}const output=util_1.inspect(res,!1,3);if(!options.i)return output;const page=await ctx.app.browser.newPage(),img=await graph_1.text2png(page,output);return page.close(),`[CQ: image, file = base64://${img}]`})),ctx.command("_.sh <command:text>","执行shell命令",{authority:5,noRedirect:!0}).option("i","Output as image").action((async({options:e},t)=>{const o=await shell_1.default(t.decode());if(!e.i)return o;const n=await ctx.app.browser.newPage(),i=await graph_1.text2png(n,o);return n.close(),`[CQ:image,file=base64://${i}]`})),ctx.command("_.shutdown","关闭机器人",{authority:5,noRedirect:!0}).action((()=>(setTimeout((()=>{process.env.pm_id?child_process_1.default.exec(`pm2 stop ${process.env.pm_id}`):process.exit(0)}),3e3),"Exiting in 3 secs..."))),ctx.command("_.restart","重启机器人",{authority:5,noRedirect:!0}).action((()=>process.env.pm_id?(setTimeout((()=>{child_process_1.default.exec(`pm2 restart ${process.env.pm_id}`)}),3e3),"Restarting in 3 secs..."):"Cannot restart: not pm2 environment")),ctx.select("platform").command("_.leave","退出该群",{noRedirect:!0}).userFields(["authority"]).check(checkGroupAdmin).action((async({session:e})=>{await e.bot.$setGroupLeave(e.groupId)})),ctx.command("_.setPriv <userId> <authority>","设置用户权限",{authority:5,noRedirect:!0}).action((async({session:e},t,o)=>("null"===o?(await ctx.database.setUser(e.platform,t,{flag:koishi_core_1.User.Flag.ignore}),o="0"):await ctx.database.setUser(e.platform,t,{flag:0}),await e.app.database.setUser(e.platform,t,{authority:+o}),`Set ${e.platform}:${t} to ${o}`))),ctx.command("_.boardcast <message:text>","全服广播",{authority:5,noRedirect:!0}).option("forced","-f 无视 silent 标签进行广播").action((async({options:e,session:t},o)=>{if(!o)return"请输入要发送的文本。";let n=await ctx.database.getAssignedChannels(["id","flag"]);e.forced||(n=n.filter((e=>!(e.flag&koishi_core_1.Channel.Flag.silent)))),n.forEach((e=>{t.bot.sendMessage(e.id,o)}))})),ctx.command("contextify <command:text>","在特定上下文中触发指令",{authority:4,noRedirect:!0}),ctx.command("_.deactivate","在群内禁用",{noRedirect:!0}).userFields(["authority"]).check(checkGroupAdmin).channelFields(["flag"]).action((({session:e})=>(e.channel.flag|=koishi_core_1.Channel.Flag.ignore,"Deactivated"))),ctx.command("_.activate","在群内启用",{noRedirect:!0}).userFields(["authority"]).check(checkGroupAdmin).channelFields(["flag"]).action((({session:e})=>(e.channel.flag&=~koishi_core_1.Channel.Flag.ignore,"Activated"))),ctx.command("_.switch <command>","启用/停用命令",{noRedirect:!0}).userFields(["authority"]).channelFields(["disallowedCommands"]).check(checkGroupAdmin).action((({session:e},t)=>{if(e.channel.disallowedCommands=e.channel.disallowedCommands||[],e.channel.disallowedCommands.includes(t)){const o=new Set(e.channel.disallowedCommands);return o.delete(t),e.channel.disallowedCommands=Array.from(o),`${t} 命令为启用状态。`}return e.channel.disallowedCommands.push(t),`${t} 命令为禁用状态。`})),ctx.command("_.mute <user> <periodSecs>","禁言用户",{noRedirect:!0}).userFields(["authority"]).check(checkGroupAdmin).action((({session:e},t,o="600000")=>e.bot.$setGroupBan(e.groupId,t,parseInt(o,10)))),ctx.on("message",(async e=>{const t=await getGroupName(e),o=`${e.username}(${e.userId})`,n=await formatMessage(e);if(logger.info(`[${t}] ${o}: ${n}`),e.groupId&&">_.activate"===e.content){if((await ctx.database.getUser(e.platform,e.userId)).authority>=4||e.author.roles.includes("admin")||e.author.roles.includes("owner")){const t=(await ctx.database.getChannel(e.platform,e.groupId)).flag&~koishi_core_1.Channel.Flag.ignore;await ctx.database.setChannel(e.platform,e.groupId,{flag:t}),await e.send("Activated")}else await e.send("您没有权限执行该操作")}})),ctx.on("before-send",(e=>{Promise.all([getGroupName(e),formatMessage(e)]).then((([t,o])=>logger.info(`send [${t}] ${e.selfId}: ${o}`)))})),ctx.on("group-member/ban",(e=>{e.userId.toString()===e.selfId.toString()&&console.log(e)})),ctx.on("group-member-added",(async e=>{const t=await e.app.database.getChannel(e.platform,e.groupId);logger.info("Event.Group_Increase",e,t),t.welcomeMsg&&await e.send(t.welcomeMsg.replace(/%@/gim,`[CQ:at,qq=${e.userId}`))})),ctx.on("group-member-deleted",(async e=>{const t=await ctx.database.getUser(e.platform,e.userId);logger.info("Event.Group_Decrease",e,t),e.send(`${e.username} 退出了群聊。`)})),ctx.on("before-command",(({session:e,command:t})=>{if(e.channel)return(e.channel.disallowedCommands||[]).includes(t.name)?"":void 0})),ctx.on("before-attach-user",((e,t)=>{t.add("id")})),ctx.on("before-attach-channel",((e,t)=>{t.add("disallowedCommands")})),ctx.app.on("friend-request",(e=>e.bot.$setFriendAddRequest(e.messageId,!0))),ctx.app.on("group-request",(async e=>{const t=await ctx.database.getUser(e.platform,e.userId);(config.public||[]).includes(`${e.platform}:${e.selfId}`)||5===(null==t?void 0:t.authority)?(logger.info("Approve Invite Request",e,t),e.bot.$setGroupAddRequest(e.messageId,e.subtype,!0)):(logger.info("Denied Invite Request",e,t),e.bot.$setGroupAddRequest(e.messageId,e.subtype,!1,"此账号不对外开放，请使用其他账号。"))})),ctx.on("connect",(async()=>{const e=ctx.database.mongo.collection("message");logger.info("Ensuring index..."),await e.createIndex({time:-1,group:1,user:1}),logger.info("Done."),ctx.command("_.recall","撤回消息").userFields(["authority"]).check(checkGroupAdmin).option("count","-c <count> 数量",{fallback:1}).action((async({session:t,options:o})=>{const n=await t.app.database.getUser(t.platform,t.selfId.toString()),i=await e.find({group:t.groupId,sender:+n.id}).sort({time:-1}).limit(o.count).toArray();logger.info("deleting message: %o",i);for(const e of i)await t.bot.deleteMessage(t.groupId,e.id)})),ctx.command("_.stat [duration]","stat").option("total","-t Total").action((async({session:t,options:o},n="1day")=>{const[,i="1",a]=/(\d+)?(\w+)/.exec(n),s=`${t.platform}:${t.groupId}`,r=await t.app.database.getUser(t.platform,t.selfId.toString()),c=o.total?{}:{time:{$gt:moment_1.default().add(-i,a).toDate()}},l=await e.find({...c,sender:+r.id}).count(),u=await e.find({...c,group:s,sender:+r.id}).count(),d=await e.find({...c,sender:{$ne:+r.id}}).count(),p=await e.find({...c,group:s,sender:{$ne:+r.id}}).count();return`统计信息${o.total?"（总计）":`（${n}）`}\n发送消息${l}条，本群${u}条。\n收到消息${d}条，本群${p}条。`})),ctx.command("_.rank [duration]","rank").option("total","Total").action((async({session:t,options:o},n="1day")=>{var i;const[,a="1",s]=/(\d+)?(\w+)/.exec(n),r=`${t.platform}:${t.groupId}`,c=o.total?{group:r}:{time:{$gt:moment_1.default().add(-a,s).toDate()},group:r},l=await e.aggregate([{$match:c},{$group:{_id:"$sender",count:{$sum:1}}},{$sort:{count:-1}},{$limit:10}]).toArray(),u=await t.app.database.getUser("id",l.map((e=>e._id)),[t.platform,"name"]),d={};for(let e=0;e<l.length;e++){const o=l[e];try{d[o._id]=await t.bot.getGroupMember(t.groupId,u[e][t.platform])}catch(t){d[o._id]={username:(null===(i=u[e])||void 0===i?void 0:i.name)||o._id,nickname:""}}}return`群成员发言排行${o.total?"（共计）":`（${n}）`}\n${l.map((e=>`${d[e._id].nickname||d[e._id].username} ${e.count}条`)).join("\n")}`})),config.recordMessage&&(ctx.middleware(((t,o)=>{if(!t.groupId)return o();const n=`${t.platform}:${t.groupId}`;e.insertOne({group:n,message:t.content,sender:t.user.id,time:new Date,id:t.messageId})})),ctx.on("send",(async t=>{if(!t.groupId)return;const o=`${t.platform}:${t.groupId}`,n=await t.app.database.getUser(t.platform,t.selfId.toString(),["id"]);e.insertOne({time:new Date,sender:+n.id,group:o,message:t.content,id:t.messageId})})))}))};exports.apply=apply},8342:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(2376));t.apply=function(e){e.command("tools/calc <expr:text>","calc",{minInterval:2e3}).shortcut(/^\?([\s\S]+)$/,{args:["$1"]}).option("full","-f, --full full output").option("raw","-r, --raw raw input",{authority:5}).example("calc 1+1").example("calc Solve[x^2+1==0,{x}]").example("calc FactorInteger[233333]").action((async({session:e,options:t},o)=>{const{data:n}=await i.default.post("http://127.0.0.1:10378/",{raw:t.raw?"1":null,input:o.decode(),type:t.full?"Image":"Result"});if(!n.startsWith("<?xml"))return n;const a=await e.app.browser.newPage();await a.setContent(n);const s=await a.$("svg"),r=await a.screenshot({clip:await s.boundingBox()});return a.close(),`[CQ:image,file=base64://${r.toString("base64")}]`})),e.command("tools/calc.zebra <image:image>","Horse to Zebra",{minInterval:2e3})}},6134:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(4515)),a=o(3804);t.apply=function(e){e.command("oi","OI related"),e.command("oi/cf","Codeforces"),e.command("oi/cf.user <name>","Codeforces User",{minInterval:3e3}).action((async(e,t)=>{const o=await i.default.get(`https://codeforces.com/api/user.info?handles=${t}`).catch((()=>{}));if(!o)return"CF 挂了！";if("FAILED"===o.body.status)return"没这个人!";const n=o.body.result[0];return`${n.handle} ${n.firstName||""} ${n.lastName||""} ${n.organization||""}\n[CQ:image,file=https:${n.avatar}]\nRating: ${n.rating}\nRank: ${n.rank}\nMaxRating: ${n.maxRating}\nMaxRank: ${n.maxRank}`})),e.command("oi/cf.contest","Codeforces Contest",{minInterval:3e3}).action((async()=>{const e=await i.default.get("https://codeforces.com/api/contest.list").catch((()=>{}));if(!e||"OK"!==e.body.status)return"CF 挂了！";const t=(new Date).getTime(),o=a.filter(e.body.result,(e=>1e3*e.startTimeSeconds>t));let n="最近的比赛：\n";for(let e=o.length-1;e>=Math.max(o.length-5,0);e--){const t=o[e];n+=`${t.name} ${new Date(1e3*t.startTimeSeconds).toLocaleString()}\n`}return n}))}},1916:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(4515));t.apply=function(e){e.command("github/dress <path>","komeiji-satori/Dress").example("dress wuxianucw/001.jpg").action((async({session:e},t)=>{try{const o=await i.default.get(`https://cdn.jsdelivr.net/gh/komeiji-satori/Dress/${t}`).buffer();await e.send(`[CQ:image,file=base64://${o.body.toString("base64")}]`)}catch(e){return e.toString()}}))}},5282:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const n=o(8664),i=o(9137);function a(...e){let t=0;for(const o of e)t+=o;return t}n.User.extend((()=>({coin:0,backpack:[]}))),t.apply=function(e){e.command("property","财产系统"),e.command("property/backpack","背包").userFields(["backpack"]).action((({session:e})=>e.user.backpack.length?[`你的背包共${a(...e.user.backpack.map((e=>e.count)))}个物品。`,...e.user.backpack.map((e=>`${(i.Items[e.id]||i.Items.fallback).name} * ${e.count}`))].join("\n"):"你的背包是空的！")),e.command("property/checkin","签到",{maxUsage:1}).shortcut("签到",{prefix:!1}).userFields(["coin"]).action((async({session:e})=>{const t=20+Math.floor(10*Math.random());return e.user.coin+=t,`签到成功，获得${t}个硬币（共有${e.user.coin}个）`})),e.command("property/pay <targetUserId> <count>","转账",{noRedirect:!0}).userFields(["coin"]).action((async({session:t},o,i)=>{const a=parseInt(i,10);if(!(Number.isSafeInteger(a)&&a>0))return"不合法的数值。";if(t.user.coin<a)return"你没有足够的硬币。";if(!o)return"未指定目标。";const s=new n.Session(e,t);s.userId=o,s.author.userId=o,delete s.user;const r=await s.observeUser(["coin"]);return t.user.coin-=a,r.coin+=a,await s.user._update(),`已转账${a}个硬币。`}))}},7276:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const n=o(8664),i=o(9160),a=o(280);t.apply=function(e,t){e.plugin(i.apply,t),e.command("evaluate").option("i","Output as image",{hidden:!0}).userFields(n.User.fields).channelFields(n.Channel.fields).check((({session:e})=>{if(!e._sudo)return;const t=e.argv.args[0].replace("eval ","");return e.argv.options.i&&e.execute(`_.eval -i ${t}`),e.execute(`_.eval ${t}`),""})),e.command("@","utils",{hidden:!0}),e.command("@.silent <command:text>",{hidden:!0}).action((({session:e},t)=>e.executeSilent(t))),e.command("@.sleep <duration> <command:text>",{hidden:!0}).action((async({session:e},t,o)=>{let n=Math.min(1e4,+t);!Number.isNaN(n)&&n||(n=0),await a.sleep(n),await e.execute(o)}))}},8394:function(e,t,o){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,o,n){void 0===n&&(n=o),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,n){void 0===n&&(n=o),e[n]=t[o]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&n(t,e,o);return i(t,e),t},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const r=s(o(6417)),c=a(o(4515)),l=s(o(3680)),u=o(280);l.default(c);const d=new u.Logger("github");class p extends Error{}function m(e){return e.replace(/^```(.*)$/gm,"").replace(/^<!--(.*)-->$/gm,"").replace(/\n\s*\n/g,"\n").replace(/(\r?\n *)+/gim,"\n")}async function f(e,t,o,n){const i=await e.newPage();try{await i.goto(t,{waitUntil:"networkidle0"});const e=await i.$(o);let a=await e.boundingBox();await i.setViewport({height:Math.ceil(a.y+a.height+50),width:1080}),a=await e.boundingBox(),a={x:a.x-n[0],y:a.y-n[1],width:a.width+n[2],height:a.height+n[3]};const s=await i.screenshot({encoding:"base64",clip:a});return await i.close(),s}catch(e){throw await i.close(),e}}t.apply=(e,t)=>{function o(e){return c.post(e).proxy(t.proxy).set("Accept","application/vnd.github.v3+json").set("User-Agent","HydroBot")}async function n(n,i,a,s){if(n.includes("!!link"))return[a.link];const r=await s();if(n.includes("!!merge")){const e=n.split("!!merge")[1];return await(l=`https://api.github.com/repos/${a.reponame}/pulls/${a.issueId}/merge`,c.put(l).proxy(t.proxy).set("Accept","application/vnd.github.v3+json").set("User-Agent","HydroBot")).set("Authorization",`token ${r}`).send({commit_title:e.trim()}),[]}var l;if(n.includes("!!approve"))return await o(`https://api.github.com/repos/${a.reponame}/pulls/${a.issueId}/reviews`).set("Authorization",`token ${r}`).send({event:"APPROVE"}),[];if(n.includes("!!diff")){return[`[CQ:image,file=base64://${await f(e.browser,`${a.link}/files`,".files-bucket",[0,0,0,0])}]`]}return await o(`https://api.github.com/repos/${a.reponame}/issues/${a.issueId}/comments`).set("Authorization",`token ${r}`).send({body:n}),[]}e.on("connect",(()=>{const o=e.database.mongo.collection("github_watch"),i=e.database.mongo.collection("github_data"),a={push:{async hook(e){const o=e.ref.split("/")[2],n=e.head_commit?e.head_commit.author.username:e.sender.login;let i=0,a=0,s=0,r=`Recent commit to ${e.repository.full_name}${"master"===o?"":`:${o}`} by ${n}`;if(t.sourcegraph)try{const o=await c.post("https://sourcegraph.com/.api/graphql").set("Authorization",`token ${t.sourcegraph}`).send({query:`query{\nrepository(name:"github.com/${e.repository.full_name}"){\n  comparison(base:"${e.before}",head:"${e.after}"){\n    fileDiffs{nodes{stat{added changed deleted}}}\n  }\n}\n}`});if(o.body.data)if(o.body.data.repository){const e=o.body.data.repository.comparison.fileDiffs.nodes;for(const t of e)i+=t.stat.added||0,a+=t.stat.deleted||0,s+=t.stat.changed||0}else d.info("Repo not found: %s",e.repository.full_name);else d.info(o.body)}catch(e){d.error(e)}(i||a||s)&&(r+=`\n${i}+ ${a}- ${s}M`);for(const t of e.commits){const e=[];t.added.length&&e.push(`${t.added.length}+`),t.removed.length&&e.push(`${t.removed.length}-`),t.modified.length&&e.push(`${t.modified.length}M`),r+=`\n${t.id.substr(0,6)} ${m(t.message).replace(/\n/g,"\r\n")} (${e.join(" ")})`}return[r,{link:e.compare}]},async interact(t,o,n){if(t.includes("!!link"))return[n.link];if(t.includes("!!diff")){return[`[CQ:image,file=base64://${await f(e.browser,n.link,".files-bucket",[0,0,0,0])}]`]}return[]}},fork:{merge:!0,hook:async e=>"created"===e.action?[`${e.sender.login} forked ${e.repository.full_name}`]:[]},issues:{merge:e=>e.repository.full_name+"/"+e.issue.number,async hook(t){var o;let n;if("opened"===t.action||"edited"===t.action){n=`${t.sender.login} ${t.action} issue ${t.repository.full_name}#${t.issue.number}`;try{const o=await f(e.browser,t.issue.html_url,".js-discussion",[68,130,92,130]);n+=`\n${u.segment.image(`base64://${o}`)}`}catch(e){new u.Logger("puppeteer").warn(e),n+=`\n${m(t.issue.title)}\n${m(t.issue.body||"")}`}}else if("assigned"===t.action)n=`${t.repository.full_name}#${t.issue.number}: Assigned ${t.assignee.login}`;else if("unassigned"===t.action)n=`${t.repository.full_name}#${t.issue.number}: Unassigned ${t.assignee.login}`;else if("closed"===t.action)n=`${t.sender.login} closed ${t.repository.full_name}#${t.issue.number}.`;else if(["reopened","locked","unlocked"].includes(t.action))n=`${t.sender.login} ${t.action} Issue:${t.repository.full_name}#${t.issue.number}`;else{if("labeled"===t.action)return[];n=`Unknown issue action: ${t.action}`}return[n,{link:(null===(o=t.comment)||void 0===o?void 0:o.html_url)||t.issue.html_url,reponame:t.repository.full_name,issueId:t.issue.number}]},async interact(e,o,n,i){if(e.includes("!!link"))return[n.link];const a=await i();var s;return await(s=`https://api.github.com/repos/${n.reponame}/issues/${n.issueId}/comments`,c.get(s).proxy(t.proxy).set("Accept","application/vnd.github.v3+json").set("User-Agent","HydroBot")).set("Authorization",`token ${a}`).send({body:e}),[]}},issue_comment:{merge:e=>e.repository.full_name+"/"+e.issue.number,async hook(t){let o;if("created"===t.action||"edited"===t.action){if("codecov[bot]"===t.comment.user.login)return[];o=`${t.comment.user.login} ${"created"===t.action?"commented":"edited a comment"} on ${t.repository.full_name}#${t.issue.number}\n${t.issue.title}`;try{const n=await f(e.browser,t.issue.html_url,`#${t.comment.html_url.split("#")[1]}`,[86,14,92,20]);o+=`\n${u.segment.image(`base64://${n}`)}`}catch(e){new u.Logger("puppeteer").warn(e),o+=`\n${m(t.comment.body)}`}}return[o,{link:t.issue.html_url,reponame:t.repository.full_name,issueId:t.issue.number}]},interact:n},pull_request:{merge:e=>e.repository.full_name+"/"+e.pull_request.number,async hook(t){let o;const{full_name:n,owner:i}=t.repository,{user:a,html_url:s,title:r,base:c,head:l,number:d,merged:p}=t.pull_request,g=new RegExp(`^${i.login}:`),h=c.label.replace(g,""),_=l.label.replace(g,"");if("opened"===t.action){o=`${a.login} opened an pull request for ${n}#${d}(${h}<${_})`;try{const t=await f(e.browser,s,".js-discussion",[68,130,92,130]);o+=`\n${u.segment.image(`base64://${t}`)}`}catch(e){new u.Logger("puppeteer").warn(e),o+=`\n${r}`,o+=`\n${m(t.pull_request.body||"")}`}}else if("created"===t.action)o=`${a.login} commented on ${n}#${d}(${h}<${_})`,o+=`\n${t.comment.body}`;else if("assigned"===t.action)o=`${n}#${d}: Assigned ${t.assignee.login}`;else if("unassigned"===t.action)o=`${n}#${d}: Unassigned ${t.assignee.login}`;else if("review_requested"===t.action)o=`${n}#${d}: Request a review.`;else if("closed"===t.action){const e=p?"merged":"closed";o=`${t.sender.login} ${e} ${n}#${d}(${h}<${_})`}else o=["reopened","locked","unlocked"].includes(t.action)?`${t.sender.login} ${t.action} PR:${n}#${d}`:["synchronize"].includes(t.action)?"":"ready_for_review"===t.action?`${n}#${d} is ready for review.`:`Unknown pull request action: ${t.action}`;return[o,{link:s,reponame:n,issueId:d}]},interact:n},pull_request_review:{merge:!0,hook:async e=>"commented"===e.review.state?[]:"approved"===e.review.state?[`${e.sender.login} approved ${e.repository.full_name}#${e.pull_request.number}`]:[void 0,{link:e.pull_request.html_url,reponame:e.repository.full_name,issueId:e.pull_request.number}],interact:n},pull_request_review_comment:{merge:!0,async hook(e){let t="";return"created"===e.action&&(t=`${e.comment.user.login} commented on ${e.repository.full_name}#${e.pull_request.number}\n`,t+=m(e.comment.body)),[t,{link:e.pull_request.html_url,reponame:e.repository.full_name,issueId:e.pull_request.number}]},interact:n},star:{merge:!0,hook:async e=>"created"===e.action?await i.findOne({type:"star",user:e.sender.login,repo:e.repository.full_name})?[]:[`${e.sender.login} starred ${e.repository.full_name} (total ${e.repository.stargazers_count} stargazers)`,{user:e.sender.login,repo:e.repository.full_name}]:[]},watch:{merge:!0,hook:async e=>"created"===e.action?await i.findOne({type:"watch",user:e.sender.login,repo:e.repository.full_name})?[]:[`${e.sender.login} is watching ${e.repository.full_name} (total ${e.repository.watchers_count} watchers)`,{user:e.sender.login,repo:e.repository.full_name}]:[]},project_card:{},project_column:{},check_run:{},check_suite:{},repository_vulnerability_alert:{},status:{},label:{},deployment_status:{},deployment:{},page_build:{}};e.router.post("/github",(async t=>{try{const s=t.request.headers["x-github-event"];let c;c="string"==typeof t.request.body.payload?JSON.parse(t.request.body.payload):t.request.body;const l=(n=JSON.stringify(c),r.default.createHash("sha256").update(n).digest("hex"));if(a[s]||(a[s]={hook:e=>Promise.resolve([`${e.repository.full_name} triggered an unknown event: ${s}`])}),a[s].hook){const n=c.repository.full_name,[r,u]=await a[s].hook(c);if(await i.findOne({_id:l}))t.body="Duplicate event";else{let a=[];if(r){const t=await o.findOne({_id:n.toLowerCase()});if(t)for(const o of t.target){const[t,n]=o.split(":"),i=await e.database.getChannel(t,n,["assignee"]);i.assignee&&e.bots[`${t}:${i.assignee}`]?a.push(e.bots[`${t}:${i.assignee}`].sendMessage(n,r)):d.warn("Cannot send message to %s:%d with assignee %d",t,o,i.assignee)}a=await Promise.all(a),await i.insertOne({_id:l,type:s,relativeIds:a,...u})}t.body=`Pushed to ${a.length} group(s)`}}else t.body="Event ignored."}catch(e){console.log(e),t.body=e.toString()}var n})),e.router.get("/github/authorize",(async o=>{const[n,i]=o.query.state.split(":"),a=o.query.code,s=await c.post("https://github.com/login/oauth/access_token").proxy(t.proxy).send({client_id:t.client_id,client_secret:t.client_secret,code:a,redirect_uri:t.redirect_uri,state:o.query.state});s.body.access_token?(await e.database.setUser(n,i,{GithubToken:s.body}),o.body="Done"):o.body="Error"})),e.middleware((async(o,n)=>{if(!o.quote)return n();const s=o.parsed.content.replace(/\[CQ:at,.*\]/g,"").replace(/\[CQ:image,file=(.*)\]/g,(e=>` ![](${/\[CQ:image,file=(.*)\]/g.exec(e)[1]}) `)).decode().trim();if(!s)return n();const[r,l]=await Promise.all([i.findOne({relativeIds:o.quote.messageId}),e.database.getUser(o.platform,o.userId,["GithubToken"])]);if(r&&a[r.type].interact){if(d.info(s),d.info("Reply: %s",r),s.startsWith("//"))return n();try{let n;try{n=await a[r.type].interact(s.trim(),o,r,(async function(){var n;if(!(null===(n=l.GithubToken)||void 0===n?void 0:n.access_token))throw new p;if(200!==(await c.get("https://api.github.com/").proxy(t.proxy).set("Authorization",`token ${l.GithubToken.access_token}`).set("User-Agent","HydroBot")).status){if(!l.GithubToken.refresh_token)throw new p;const n=await c.post("https://github.com/login/oauth/access_token").proxy(t.proxy).set("User-Agent","HydroBot").send({grant_type:"refresh_token",client_id:t.client_id,client_secret:t.client_secret,refresh_token:l.GithubToken.refresh_token});if(!n.body.access_token)throw new p;return await e.database.setUser(o.platform,o.userId,{GithubToken:n.body}),n.body.access_token}return l.GithubToken.access_token})),console.log(n)}catch(e){if(console.log("catch",e),e instanceof p)return o.send("请先使用 github.auth <username> 或 github.token <token> 设置凭据。");throw e}const[u,d]=n;u&&await o.send(u),d&&await i.updateOne({_id:r._id},{$set:d})}catch(e){o.send(e.message)}return n()}})),e.select("groupId").command("github.listen <repo>","监听一个Repository的事件").action((async({session:e},t)=>{if(2!==(t=t.toLowerCase()).split("/").length)return"无效地址";return await o.findOne({_id:t})?(await o.updateOne({_id:t},{$addToSet:{target:`${e.platform}:${e.groupId}`}},{upsert:!0}),`Watching ${t}`):(await o.insertOne({_id:t,target:[`${e.platform}:${e.groupId}`]}),`Watching ${t}\n(请创建 webhook 投递至 https://github.undefined.moe/webhook ，格式 application/json )`)})),e.select("groupId").command("github.list","List repos").action((async({session:e})=>(await o.find({target:`${e.platform}:${e.groupId}`}).project({_id:1}).toArray()).map((e=>e._id)).join("\n"))),e.select("groupId").command("github.cancel <repo>","取消一个Repository的事件").action((async({session:e},t)=>(await o.updateOne({_id:t.toLowerCase()},{$pull:{target:`${e.platform}:${e.groupId}`}}),`Cancelled ${t}.`))),e.command("github.token <token>","设置token").userFields(["GithubToken"]).action((async({session:e},t)=>(e.user.GithubToken={access_token:t,refresh_token:""},"设置成功"))),e.command("github.auth <username>","登录账号").userFields(["GithubToken"]).action((async({session:e},o)=>`请点击下面的链接继续操作：\nhttps://github.com/login/oauth/authorize?client_id=${t.client_id}&state=${e.platform}:${e.userId}&redirect_url=${t.redirect_uri}&scope=admin%3Arepo_hook%2Crepo&login=${o}`))}))}},4819:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=o(3129),a=n(o(5622)),s=o(2087),r=o(280),c=o(4298);t.apply=e=>{e.command("glados <message:text>","Glados",{minInterval:3e4}).action((async({session:e},t)=>{const o=Math.random().toString(),n=a.default.resolve(s.tmpdir(),`${o}.wav`);if(await new Promise((e=>{i.exec(`wget --tries=50 -O ${n} https://glados.c-net.org/generate?text=${encodeURIComponent(t)}`,(t=>{t&&e(t),e(void 0)}))}))){e.send("请求正在处理中，请稍后（这可能需要数分钟）"),await r.sleep(1e5);if(await new Promise((e=>{i.exec(`wget --tries=50 -O ${n} https://glados.c-net.org/generate?text=${encodeURIComponent(t)}`,(t=>{t&&e(t),e(void 0)}))})))throw new Error("Service Error")}await e.send(`[CQ:record,file=file://${n}]`),await c.unlink(n)}))}},7780:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(5622)),a=n(o(4515)),s=o(4298),r={};try{const e=o(9802);for(const t of e)r[t.id]=t.id,r[t.name]=t.id}catch(e){}try{const e=o(2293);for(const t of e)r[t.name]=t.id}catch(e){}async function c({session:e},t){if(!t.trim())return await e.send("请输入要查看的Card ID/Name");if(!Object.keys(r).length){const e=await a.default.get("https://api.hearthstonejson.com/v1/latest/zhCN/cards.collectible.json");await s.writeFile(i.default.resolve(__dirname,"..","..",".cache","hs_card_zhCN.json"),JSON.stringify(e.body));for(const t of e.body)r[t.id]=t.id,r[t.name]=t.id;const t=await a.default.get("https://api.hearthstonejson.com/v1/latest/enUS/cards.collectible.json");await s.writeFile(i.default.resolve(__dirname,"..","..",".cache","hs_card_enUS.json"),JSON.stringify(t.body));for(const e of t.body)r[e.name]=e.id}return r[t]?e.send(`[CQ:image,file=https://art.hearthstonejson.com/v1/render/latest/zhCN/512x/${r[t]}.png]`):await e.send("NotFound")}t.apply=e=>{e.command("card <name/id:text>","Get a card").action(c)}},1263:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const o=["100","101","200","201","202","204","206","207","300","301","302","303","304","305","307","400","401","402","403","404","405","406","408","409","410","411","412","413","414","415","416","417","418","420","421","422","423","424","425","426","429","431","444","450","451","499","500","501","502","503","504","505","506","507","508","509","510","511","599"];t.apply=function(e){e.command("cat <id>","http.cat",{minInterval:1e3}).action((async(e,t)=>o.includes(t)?`[CQ:image,file=https://cdn.jsdelivr.net/gh/httpcats/http.cat/public/images/${t}.jpg]`:`你家http协议会返回${t}？`))}},5778:function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.apply=void 0;const path_1=__webpack_require__(5622),crypto_1=__webpack_require__(6417),koishi_core_1=__webpack_require__(8664),js_yaml_1=__importDefault(__webpack_require__(6675)),axios_1=__importDefault(__webpack_require__(2376)),fs_extra_1=__webpack_require__(4298),sharp_1=__importDefault(__webpack_require__(742)),logger=new koishi_core_1.Logger("imagetag"),imageRE=/(\[CQ:image,file=[^,]+,url=[^\]]+\])/,checkGroupAdmin=({session:e})=>e.user.authority>=4||e.author.roles.includes("admin")||e.author.roles.includes("owner")?null:"仅管理员可执行该操作。";function MD5(e){const t=crypto_1.createHash("md5");return t.update(e),t.digest("hex")}const apply=async(ctx,config={})=>{const transfile=await fs_extra_1.readFile(path_1.resolve(process.cwd(),"database","image.tags.translation.yaml")),trans=js_yaml_1.default.safeLoad(transfile.toString()),names=eval("require")(`${process.cwd()}/database/class_names_6000.json`);ctx.on("before-attach-channel",((e,t)=>{t.add("enableAutoTag")})),ctx.middleware((async(e,t)=>{const o=imageRE.exec(e.content);return o&&(2===e.channel.enableAutoTag?e.executeSilent(`tag ${o[1]}`):1===e.channel.enableAutoTag&&e.execute(`tag ${o[1]}`)),t()})),ctx.app.on("connect",(async()=>{const e=ctx.app.database.mongo.collection("image.tag");e.createIndex({md5:1},{unique:!0}),ctx.command("tag [image]","Get image tag",{hidden:!0,minInterval:2e3}).action((async({session:t},o)=>{try{let n;o||(await t.send("请发送图片。"),o=await t.prompt(3e4));let i=o;const a=koishi_core_1.segment.from(o);if(a){if("image"!==a.type)throw new Error("没有发现图片。");i=a.data.url,n=a.data.file}if(!i.startsWith("http"))throw new Error("没有发现图片。");n||(n=Buffer.from(i).toString("base64"));let s=await e.findOne({_id:n});if(s)return s.txt;const{data:r}=await axios_1.default.get(i,{responseType:"arraybuffer"}),c=Buffer.alloc(r.byteLength),l=new Uint8Array(r);for(let e=0;e<c.length;++e)c[e]=l[e];const u=MD5(c);if(s=await e.findOne({md5:u}),s)return s.txt;const d=(await sharp_1.default(c).png().toBuffer()).toString("base64");logger.info("downloaded");const{data:p}=await axios_1.default.post("http://127.0.0.1:10377/",{img:d});if("string"==typeof p){let t=p.split("HTTP")[0];throw(p.includes("output with shape")||p.includes("size of tensor"))&&(t="不支持的图片格式（请尝试截图发送）",await e.insertOne({_id:n,md5:u,txt:t})),new Error(t)}const m=[];let f="";for(const e of p)m.push(names[e[0]]),f+=`${trans[names[e[0]]]||names[e[0]]}:${Math.floor(100*e[1])}%  `;if(logger.info(f),config.url&&config.tags)for(const e of m)if(config.tags.includes(e)||m.length>7){axios_1.default.get(`${config.url}&source=${encodeURIComponent(i)}&format=json`);break}return await e.insertOne({_id:n,md5:u,txt:f}),f}catch(e){return e.toString().split("\n")[0]}})),ctx.command("tag.disable","在群内禁用",{noRedirect:!0}).userFields(["authority"]).check(checkGroupAdmin).channelFields(["enableAutoTag"]).action((({session:e})=>(e.channel.enableAutoTag=0,"Disabled"))),ctx.command("tag.enable","在群内启用",{noRedirect:!0}).option("silent","-s").userFields(["authority"]).check(checkGroupAdmin).channelFields(["enableAutoTag"]).action((({session:e,options:t})=>(e.channel.enableAutoTag=t.silent?2:1,"enabled")))}))};exports.apply=apply},1925:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0,t.apply=function(e){e.command("jjwz","绝句文章"),e.command("jjwz.add <content:text>","创建/添加").channelFields(["jjwz"]).userFields(["id"]).action((async({session:e},t)=>{if(t.length>7)return"你怎么写这么长";if(e.channel.jjwz){if((e.channel.jjwz[e.channel.jjwz.length-1]||[])[0]===+e.user.id)return"你不能连续添加"}else e.channel.jjwz=[];return e.channel.jjwz.push([+e.user.id,t]),`${e.channel.jjwz.map((e=>e[1])).join("")}...`})),e.command("jjwz.end","结束").channelFields(["jjwz"]).userFields(["id"]).action((async({session:e})=>e.channel.jjwz?(e.channel.jjwz=null,e.channel.jjwz.map((e=>e[1])).join("")):"还未开始")),e.command("jjwz.edit <content:text>","编辑").channelFields(["jjwz"]).userFields(["id"]).action((async({session:e},t)=>e.channel.jjwz?t.length>7?"你怎么写这么长":e.channel.jjwz[e.channel.jjwz.length-1][0]!==+e.user.id?"上一条不是你所编辑":(e.channel.jjwz[e.channel.jjwz.length-1][1]=t,`${e.channel.jjwz.map((e=>e[1])).join("")}...`):"还未开始")),e.command("jjwz.del","删除").channelFields(["jjwz"]).userFields(["id"]).action((async({session:e})=>e.channel.jjwz?e.channel.jjwz[e.channel.jjwz.length-1][0]!==+e.user.id?"上一条不是你所编辑":(e.channel.jjwz.pop(),`${e.channel.jjwz.map((e=>e[1])).join("")}...`):"还未开始"))}},2179:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=o(7548),a=n(o(2470)),s=o(7547);a.default.locale("zh-cn");const r={expireDays:7,serviceFee:.03,maxBuyPerDay:10};t.apply=(e,t)=>{t={...r,...t},e.on("connect",(()=>{const o=e.database.mongo.collection("kabu.price");o.createIndex("expire",{expireAfterSeconds:0});const n=e.database.mongo.collection("kabu.stock");async function r(e){const t=await o.findOne({_id:e});if(t)return[t.price,t.bought||0];const n=Math.floor(Math.random()<.5?10+Math.sqrt(400*Math.random()):50-Math.sqrt(400*Math.random()));return await o.insertOne({_id:e,price:n,expire:s.endOfToday(),bought:0}),[n,0]}n.createIndex({userId:1,expire:1}),n.createIndex("expire",{expireAfterSeconds:0}),e.command("kabu.query","查询自己的库存以及今日大头菜价格").shortcut("查询大头菜",{prefix:!1}).userFields(["coin","id"]).action((async({session:e})=>{const[o,i]=await Promise.all([n.find({userId:+e.user.id}).sort("expire",1).limit(10).toArray(),n.find({userId:+e.user.id}).count()]);let s="",c=0;for(const{number:e,buyPrice:t,expire:n}of o)c+=e,s+=`你有 ${e} 棵以 ${t} 个硬币每棵买入的大头菜，它们会在 ${a.default(n).fromNow()} 烂掉。\n`;const[l,u]=await r(+e.user.id),d=t.maxBuyPerDay-u;return e.user.coin||(e.user.coin=0),0===i?s="你现在手上还没有大头菜"+(e.user.coin>=l&&d?"，要来买点吗？":"。"):i>o.length&&(s+=`隐藏了 ${i-o.length} 个条目。`),`你现在共有 ${c} 棵大头菜和 ${e.user.coin} 个硬币。\n今天卖给 ${e.username} 的大头菜价格是每棵 ${l} 硬币。您今天还可购入${d}个大头菜。\n${s}`})),e.command("kabu.buy [number]",`购买大头菜。若不指定数量则尽量多地购买。手续费 ${100*t.serviceFee}%。`,{noRedirect:!0}).shortcut("购买大头菜",{prefix:!1,fuzzy:!0}).userFields(["coin","id"]).action((async({session:e},s)=>{const[c,l]=await r(+e.user.id);e.user.coin||(e.user.coin=0);const u=Math.floor(e.user.coin/c/(1+t.serviceFee)),d=Math.min(t.maxBuyPerDay-l,+(null!=s?s:u));if(!Number.isInteger(d)||d<=0||d>u)return`购买数量需要是 1~${u} 之间的正整数。`;const p=a.default();p.add(t.expireDays,"days"),await n.insertOne({_id:new i.ObjectID,userId:+e.user.id,number:d,buyPrice:c,expire:p.toDate()});const m=Math.ceil((1+t.serviceFee)*c*d);return e.user.coin-=m,await o.updateOne({_id:+e.user.id},{$set:{bought:d+l}}),`你花了 ${m} 个硬币（含 ${m-c*d} 个硬币的手续费）以 ${c} 每棵的价格购买了 ${d} 棵大头菜。\n要是你没有在 ${t.expireDays} 天内把大头菜卖掉，它们就会全部烂掉，害你大亏本！一定要注意这一点喔。`})),e.command("kabu.sell [number]",`卖出最早购买（最先烂掉）的大头菜。若不指定数量则全部卖出。手续费 ${100*t.serviceFee}%。`,{noRedirect:!0}).shortcut("卖出大头菜",{prefix:!1,fuzzy:!0}).userFields(["coin","id"]).action((async({session:e},o)=>{const i=+(null!=o?o:1/0);if(i!==1/0&&(!Number.isInteger(i)||i<=0))return"卖出的数量需要是一个正整数";const a=await n.find({userId:+e.user.id}).sort("expire",1).toArray();let s=0,c=null;const l=[];for(const e of a)if(s+e.number<=i)s+=e.number,l.push(e._id);else if(s<i){c={_id:e._id,newNumber:e.number-(i-s)},s=i;break}if(0===s||i!==1/0&&s!==i)return"你没有足够多的大头菜来卖出！";const[u]=await r(+e.user.id);e.user.coin||(e.user.coin=0);const d=Math.floor((1-t.serviceFee)*s*u);return e.user.coin+=d,l.length&&await n.deleteMany({_id:{$in:l}}),c&&await n.updateOne({_id:c._id},{$set:{number:c.newNumber}}),`你已成功卖出 ${s} 棵大头菜，获得了 ${d} 个硬币（已扣除 ${s*u-d} 个硬币的手续费）！`}))})),e.command("kabu","大头菜")}},1787:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(4515)),a=new(o(8664).Logger)("luogu");t.apply=e=>{e.command("oi","OI related"),e.command("oi/luogu","Luogu"),e.command("oi/luogu.problem <pid>","获取Luogu题目").action((async(t,o)=>{const n=await e.app.browser.newPage();try{await n.goto(`https://www.luogu.com.cn/problem/${o}`,{waitUntil:"networkidle0"})}catch(e){return n.close(),"请求超时。"}return(await n.$(".problem-card")).screenshot({}).then((async e=>(n.close(),`[CQ:image,file=base64://${e.toString("base64")}]`)),(e=>(n.close(),a.debug(e),"截图失败。")))})),e.command("oi/luogu.user <uid>","查询用户").action((async(e,t)=>{const o=await i.default.get(`https://www.luogu.com.cn/user/${t}?_contentOnly=1`).set("User-Agent","Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko");if("404"===o.body.code)return"没这个人!";const n=o.body.currentData.user,a=0===n.ccfLevel?"无/藏了以方便假":n.ccfLevel;return`${n.name}\n关注: ${n.followingCount}\n粉丝: ${n.followerCount}${n.passedProblemCount?`\nACs/Submits: ${n.passedProblemCount}/${n.submittedProblemCount}`:""}\n颜色: ${n.color}\nCCF评级:${a}`}))}},7750:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(2376));t.apply=e=>{e.middleware((async(e,t)=>{if(e.content.includes("https://bot-api.lxns.net/bot-message/")){const t=await i.default.get(`https://${e.content.split("https://")[1]}`);e.content=t.data.replace(/<.*?>/g,"")}await t()}),!0)}},1078:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=o(8664),a=n(o(4515));t.apply=function(e){e.command("tools","实用工具"),e.command("tools/ocr [image]",{minInterval:3e3}).action((async({session:e},t)=>{if(t||(await e.sendQueued("请发送图片。"),t=await e.prompt(3e4)),!t)return"没有检测到图片。";const o=i.segment.from(t),n=await a.default.get(`https://ai.qq.com/cgi-bin/appdemo_imagetranslate?image_url=${o.data.url}`);return 0!==n.body.ret?n.body.msg:n.body.data.image_records.map((e=>e.source_text)).join("")}))}},8140:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(4515)),a=o(3804),s={"-1":"女",0:"未知",1:"男"};t.apply=function(e){e.command("oi","OI Related"),e.command("oi/oier <query>","查询oier",{minInterval:3e4}).action((async(e,t)=>{const o=await i.default.get(`https://bytew.net/OIer/search.php?method=normal&q=${encodeURIComponent(t)}`),{result:n}=JSON.parse(o.text);let r="";for(const e of a.take(n,3)){const t=JSON.parse(e.awards.replace(/'/gim,'"'));r+=`姓名：${e.name}  生理性别：${s[e.sex]}\n`;for(const e of a.take(t,5))r+=`于${e.grade}时在${e.province}${e.school}参加${e.identity}，`,e.score&&(r+=`以${e.score}的成绩`),r+=`取得${e.award_type}，排名${e.rank}。\n`;t.length>5&&(r+=t.length-5+"个奖项被隐藏。\n")}return n.length>3&&(r+=n.length-3+"个搜索结果被隐藏。"),r}))}},5405:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const n=o(8664);t.apply=e=>{e.command("proxy <command:text>","Proxy a command",{hidden:!0,authority:4}).option("user","-u <userId>").option("self","-s <selfId>").option("group","-g <groupId>").option("length","-l <length>",{fallback:1}).action((async({session:t,options:o},i)=>{const a=new n.Session(e.app,t);if(delete a.groupId,o.group?(a.groupId=o.group,a.subtype="group"):(a.groupId=void 0,a.subtype="private"),o.self&&(a.selfId=o.self),o.user){const e=o.user;if(!e)return"未指定目标。";a.userId=e}await a.send(i);let s="";for(let e=1;e<=o.length;e++)s+=await a.prompt(3e4);return s}))}},8414:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=t.defaultConfig=void 0;const n=o(280),i=o(1703),a=o(904);t.defaultConfig={loadTimeout:1e4,idleTimeout:3e4,maxLength:1e6};const s=["http","https"],r=new n.Logger("puppeteer");t.apply=function(e,o){o={...t.defaultConfig,...o},e.plugin(a.apply,o),e.command("shot").dispose(),e.command("page <url:text>","Get page",{authority:3,minInterval:3e3}).alias("screenshot","shot").option("full","-f Full page").option("element","-e, --element <selector:string> Element Selector").option("viewport","<viewport> 指定Viewport",{fallback:"1600x900"}).action((async({session:t,options:a},c="")=>{let l=c.trim();if(!l)return"请输入网址。";const u=a.viewport.split("x");if(2!==u.length)return"Invalid viewport";const d=/^(\w+):\/\//.exec(l);if(d){if(!s.includes(d[1]))return"请输入正确的网址。"}else l=`http://${l}`;const p=await e.browser.newPage();let m=!1;p.on("load",(()=>m=!0)),await p.setViewport({width:parseInt(u[0],10),height:parseInt(u[1],10),deviceScaleFactor:1});try{await new Promise(((e,n)=>{const i=setTimeout((()=>m?t.send("正在加载中，请稍等片刻~"):n(new Error("navigation timeout"))),o.loadTimeout),a=()=>{clearTimeout(i),e(void 0)};p.goto(l,{waitUntil:"networkidle0",timeout:o.idleTimeout}).then(a,(()=>m?a():n(new Error("navigation timeout"))))}))}catch(e){return p.close(),r.debug(e),"无法打开页面。"}return(a.element?await p.$(a.element):p).screenshot({fullPage:a.full}).then((async e=>(p.close(),e.byteLength>o.maxLength&&await new Promise(((t,o)=>{(new i.PNG).parse(e,((e,n)=>e?o(e):t(n)))})).then((t=>{const n=t.width,a=t.height*o.maxLength/e.byteLength,s=new i.PNG({width:n,height:a});t.bitblt(s,0,0,n,a,0,0),e=i.PNG.sync.write(s)})).catch(n.noop),`[CQ:image,file=base64://${e.toString("base64")}]`)),(e=>(p.close(),r.debug(e),"截图失败。")))}))}},3372:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(2376)),a=o(2519),s={c:{type:"compiler",compile:["/usr/bin/gcc","-O2","-Wall","-std=c99","-o","code","foo.c","-lm","-fdiagnostics-color=always"],code_file:"foo.c",execute:["/w/code"]},cc:{type:"compiler",compile:["/usr/bin/g++-7","-O2","-Wall","-std=c++11","-o","code","foo.cc","-lm","-fdiagnostics-color=always"],code_file:"foo.cc",execute:["/w/code"]},pas:{type:"compiler",compile:["/usr/bin/fpc","-O2","-o/w/code","foo.pas"],code_file:"foo.pas",execute:["/w/code"]},py:{type:"interpreter",code_file:"foo.py",execute:["/usr/bin/python","foo.py"]},py2:{type:"interpreter",code_file:"foo.py",execute:["/usr/bin/python","foo.py"]},py3:{type:"interpreter",code_file:"foo.py",execute:["/usr/bin/python3","foo.py"]},java:{type:"compiler",compile:["/usr/bin/javac","-d","/w","-encoding","utf8","./Main.java"],code_file:"Main.java",copyOut:"Main.class",execute:["/usr/bin/java","Main"]},php:{type:"interpreter",code_file:"foo.php",execute:["/usr/bin/php","foo.php"]},js:{type:"interpreter",code_file:"foo.js",execute:["/usr/bin/jsc","/w/foo.js"]},go:{type:"compiler",compile:["/usr/bin/go","build","-o","foo","foo.go"],code_file:"foo.go",execute:["/w/foo"]},sh:{type:"interpreter",code_file:"foo.sh",execute:["/bin/bash","foo.sh"]},cs:{type:"compiler",compile:["/usr/bin/mcs","-optimize+","-out:/w/foo","/w/foo.cs"],code_file:"foo.cs",execute:["/usr/bin/mono","foo"]}},r=["PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin","HOME=/w"],c=i.default.create({baseURL:"http://localhost:5050"});async function l(e,{time_limit_ms:t=5e3,memory_limit_mb:o=256,process_limit:n=32,stdin:i="",copyIn:a={},copyOut:s=[],copyOutCached:l=null}={}){let u,d;try{d={cmd:[{args:e,env:r,files:[i?{content:i}:{content:""},{name:"stdout",max:20480},{name:"stderr",max:20480}],cpuLimit:1e3*t*1e3,readCpuLimit:1200*t*1e3,memoryLimit:1024*o*1024,procLimit:n,copyIn:a,copyOut:s,copyOutCached:l}]};u=(await c.post("/run",d)).data[0]}catch(e){throw console.log(e),e}const p={status:u.status,time_usage_ms:u.time/1e6,memory_usage_kb:u.memory/1024,files:u.files};return u.files=u.files||{},p.stdout=u.files.stdout||"",p.stderr=u.files.stderr||"",u.error&&(p.error=u.error),p.files=u.files,u.fileIds&&(p.fileIds=u.fileIds),p}async function u(e,t,o){const{status:n,stdout:i,stderr:a}=await async function(e,t,o){const n={},i=s[t];if(!s[t])return{status:"SystemError",stdout:"不支持的语言",stderr:"目前支持sh,c,cc,pas,py2,py3,js,cs,go,php,java"};if(n[i.code_file]={content:e},"compiler"===i.type){const{status:e,stdout:t,stderr:o,fileIds:a}=await l(i.compile,{copyIn:n,copyOutCached:[i.copyOut||"code"]});if("Accepted"!==e)return{status:`Compile Error:${e}`,stdout:t,stderr:o};const s=await l(i.execute,{copyIn:{[i.copyOut||"code"]:{fileId:a[i.copyOut||"code"]}}});return await c.delete(`/file/${a[i.copyOut||"code"]}`),s}return"interpreter"===i.type?await l(i.execute,{copyIn:n,stdin:o}):void 0}(e,t,o).catch((e=>({status:"SystemError",stdout:e.toString(),stderr:""})));return"Accepted"===n?`Execute result: \n${i}\n${a}`:`Error: ${n}\n${i}\n${a}`}t.apply=e=>{e.command("tools","实用工具"),e.command("tools/run <language> <code:text>","运行程序",{minInterval:1e3}).alias("code").option("input","启用stdin").action((async({session:t,options:o},n,i)=>{o.input&&t.send("Please input:");const s=o.input?await t.prompt(1e4):"",r=await u(i.replace(/\r/gim,"").decode(),n,s.decode());if(r.length>256||r.split("\n").length>10){const t=await e.browser.newPage();return`[CQ:image,file=base64://${await a.text2png(t,r)}]`}return r}))}},7088:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=o(2087),a=o(6957),s=n(o(2470));t.apply=async function(e,t){e.plugin(a.apply,{...t,format:["{{ bots }}","==========","用户数量：{{ activeUsers }}","群数量：{{ activeGroups }}","CPU 使用率：{{ (cpu[1] * 100).toFixed() }}%","内存使用量：{{ usedmem }}M / {{ totalmem }}M","今日收发消息量 {{ totalReceiveCount }}/{{ totalSendCount }}"].join("\n")}),e.app.on("connect",(()=>{const t=e.app.database.mongo.collection("message");e.app.webui.sources.meta.extend((async()=>{const o={},n=(await Promise.all(e.app.bots.map((t=>e.app.database.getUser(t.platform,t.selfId.toString()))))).map((e=>null==e?void 0:e.id)).filter((e=>!!e)),a={time:{$gt:s.default().add(-1,"day").toDate()}};return o.activeUsers=await e.app.database.mongo.user.find({}).count(),o.totalSendCount=await t.find({...a,sender:{$in:n.map(parseInt)}}).count(),o.totalReceiveCount=await t.find({...a,sender:{$nin:n.map(parseInt)}}).count(),o.usedmem=Math.floor((i.totalmem()-i.freemem())/1024/1024),o.totalmem=Math.floor(i.totalmem()/1024/1024),o}))}))}},9891:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0,t.apply=function(e){e.command("sudo <command:text>",{hidden:!0,noRedirect:!0}).userFields(["sudoer","authority"]).action((async({session:e},t)=>{if(!e.user.sudoer)throw new Error("You are not in the sudoers file.");const o=e.user.authority;e.user.authority=5,e._sudo=!0,await e.execute(t),e.user.authority=o}))}},475:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=o(663),a=n(o(2376)),s=o(7548),r=/\[CQ:image,file=([^,]+),url=([^\]]+)\]/,c=/\[CQ:image,file=image:\/\/([^,]+)\]/;t.apply=(e,t)=>{const o=e.logger("teach");e.plugin(i.apply,t),e.command("teach",{checkArgCount:!1}),e.on("before-command",(async({session:t,command:o})=>{if(o.getConfig("noRedirect",t)&&t._redirected){const o=await e.app.database.getUser("id",t._dialogue.writer,["authority"]);if(o.authority<5&&!o.sudoer)return"不支持在插值中调用该命令。"}})),e.on("connect",(()=>{const t=e.app.database.mongo.collection("image"),n=async(e,o)=>{if(await t.findOne({_id:e}))return;const{data:n}=await a.default.get(o,{responseType:"arraybuffer"}),i=Buffer.alloc(n.byteLength),r=new Uint8Array(n);for(let e=0;e<i.length;++e)i[e]=r[e];await t.insertOne({_id:e,data:new s.Binary(i)})};e.on("dialogue/detail",(async(e,n)=>{try{for(const e in n){let o,i="";for(;o=c.exec(n[e]);){const[a,s]=o;i+=n[e].slice(0,o.index),n[e]=n[e].slice(o.index+a.length);i+=`[CQ:image,file=base64://${(await t.findOne({_id:s})).data.buffer.toString("base64")}]`}n[e]=i+n[e]}}catch(e){throw o.warn(e.message),new Error("下载图片时发生错误。")}})),e.on("dialogue/before-send",(async e=>{let{answer:n}=e;if(n)try{let o,i="";for(;o=c.exec(n);){const[e,a]=o;i+=n.slice(0,o.index),n=n.slice(o.index+e.length);i+=`[CQ:image,file=base64://${(await t.findOne({_id:a})).data.buffer.toString("base64")}]`}e.answer=i+n}catch(e){throw o.warn(e.message),new Error("下载图片时发生错误。")}})),e.on("dialogue/before-modify",(async({options:e})=>{let{answer:t}=e;if(t)try{let o,i="";for(;o=r.exec(t);){const[e,a,s]=o;i+=t.slice(0,o.index),t=t.slice(o.index+e.length),await n(a,s),i+=`[CQ:image,file=image://${a}]`}e.answer=i+t}catch(e){return o.warn(e.message),"上传图片时发生错误。"}}))}))}},8424:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const i=n(o(4515)),a=n(o(2376)),s=n(o(742)),r=o(3804),c=o(9636),l=o(9509),u=o(5747),d=o(2519),p=n(o(7286));t.apply=e=>{e.plugin(l.apply,{bilibili:!1,magi:!1,oeis:!1}),e.plugin(c.apply),e.command("search","",{maxUsage:5,minInterval:6e4}),e.command("tools/tex <code:text>","KaTeX 渲染",{minInterval:1e3}).alias("katex <code:text>").action((async({session:e},t)=>{let{data:o}=await a.default.get(`https://www.zhihu.com/equation?tex=${encodeURIComponent(t)}`);const n=o.match(/>([^<]+)<\/text>/);if(n)return e.send(n[1]);const i=o.match(/ viewBox="0 (-?\d*(.\d+)?) -?\d*(.\d+)? -?\d*(.\d+)?" /);i&&(o=o.replace("\n",`\n<rect x="0" y="${i[1]}" width="100%" height="100%" fill="white"></rect>\n`));const r=await s.default(Buffer.from(o)).png().toBuffer();return e.send(`[CQ:image,file=base64://${r.toString("base64")}]`)})),e.command("tools/ip <ip>","查询ip").action((async(e,t)=>{const o=`http://freeapi.ipip.net/${t}`;return(await i.default.get(o)).body.join(" ")})),e.command("tools/oeis <sequence>","使用 OEIS 进行数列查询",{maxUsage:10}).option("start","-s <start> 设置起始页码",{fallback:0}).usage("输入用逗号隔开的数作为要查询的数列的前几项，或者直接输入以 id:A 打头的数列编号。").example("oeis 1,2,3,6,11,23,47,106,235").example("oeis id:A000055").action((async({options:e,session:t},o)=>{const{body:n}=await i.default.get(`https://oeis.org/search?fmt=json&q=${o}&start=${e.start}`),a=r.filter(n.results,(e=>!e.name.startsWith("Duplicate")));for(const e of r.take(a,3))await t.sendQueued([`https://oeis.org/A${String(e.number).padStart(6,"0")}`,`${e.name}${e.id?` (${e.id})`:""}`,`${r.take(e.data.split(","),10).join(",")}`].join("\n"))})),e.command("tools/pornhub <text1> <text2>","生成PornHub风格Logo").action((async(t,o,n)=>{const i=await e.app.browser.newPage();await i.goto("https://www.dute.org/pornhub-logo"),await i.evaluate(((e,t)=>{document.getElementsByClassName("pornhub-prefix")[0].innerHTML=e,document.getElementsByClassName("pornhub-postfix")[0].innerHTML=t}),o,n);const a=await i.$(".screenshotable"),s=await a.screenshot({});return await i.close(),`[CQ:image,file=base64://${s.toString("base64")}]`})),u.existsSync("/usr/bin/wd")&&e.command("tools/dict <word>","使用无道词典查词").example("dict hello").alias("wd").action((async(t,o)=>{o=o.split("").filter((e=>/[-a-zA-Z0-9]/.test(e))).join("");const n=await p.default(`/usr/bin/wd ${o}`),i=await e.app.browser.newPage(),a=await d.text2png(i,n);return i.close(),`[CQ:image,file=base64://${a}]`}))}},7558:()=>{},2468:(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.apply=void 0;const getFirstPinyin=e=>(e.pinyin.split(/\s+/).shift()||"").replace(/[āáǎà]/g,"a").replace(/[ōóǒò]/g,"o").replace(/[ēéěèê]/g,"e").replace(/[īíǐì]/g,"i").replace(/[ūúǔù]/g,"u").replace(/[ǖǘǚǜü]/g,"v"),getLastPinyin=e=>(e.pinyin.split(/\s+/).pop()||"").replace(/[āáǎà]/g,"a").replace(/[ōóǒò]/g,"o").replace(/[ēéěèê]/g,"e").replace(/[īíǐì]/g,"i").replace(/[ūúǔù]/g,"u").replace(/[ǖǘǚǜü]/g,"v"),fix=e=>("味同嚼蜡"===e.word&&(e.pinyin=e.pinyin.replace("cù","là")),e.word.endsWith("俩")&&(e.pinyin=e.pinyin.replace("liǎng","liǎ")),e.pinyin=e.pinyin.replace(/yi([ēéěèêe])/g,"y$1"),e),indexed=e=>{const t={firstPinyin:{},lastPinyin:{},word:{}};for(const o of e)if(fix(o),4===o.word.length){const e=getLastPinyin(o),n=t.lastPinyin[e]||[];t.lastPinyin[e]=n,n.push(o);const i=getFirstPinyin(o),a=t.firstPinyin[i]||[];t.firstPinyin[i]=a,a.push(o),t.word[o.word]=o}let o=new Set(["yi"]);for(let e=1;o.size>0;++e){const n=new Set;o.forEach((o=>{for(const i of t.lastPinyin[o]||[])i.level||(i.level=e,n.add(getFirstPinyin(i)))})),o=n}return t},db=indexed(eval("require")(`${process.cwd()}/database/yiGeDingLia.json`)),handle=e=>{const t=[];let o=db.word[e];for(;o&&o.level;){const{level:e}=o;if(t.push(o),!(e>1))return t.push({word:"一个顶俩",pinyin:"yī gè dǐng liǎ"}),t;{const t=db.firstPinyin[getLastPinyin(o)].filter((t=>t.level&&t.level<e));o=t[Math.floor(Math.random()*t.length)]}}return t},apply=e=>{e.command("成语接龙 <成语>","成语接龙",{minInterval:1e3,checkArgCount:!1}).action(((e,t)=>{if(!t)return"请输入成语。";const o=handle(t);if(o.length){const e=[];for(const t in o)e.push(o[t].word," ");return e.join("")}}))};exports.apply=apply},5305:(e,t,o)=>{var n={"./autokick":6286,"./autokick.ts":6286,"./bilibili":1298,"./bilibili.ts":1298,"./bottle":2932,"./bottle.ts":2932,"./busybox":4454,"./busybox.ts":4454,"./calc":8342,"./calc.ts":8342,"./codeforces":6134,"./codeforces.ts":6134,"./dress":1916,"./dress.ts":1916,"./economy":5282,"./economy.ts":5282,"./eval":7276,"./eval.ts":7276,"./github":8394,"./github.ts":8394,"./glados":4819,"./glados.ts":4819,"./hearthstone":7780,"./hearthstone.ts":7780,"./httpcat":1263,"./httpcat.ts":1263,"./imagetag":5778,"./imagetag.ts":5778,"./jjwz":1925,"./jjwz.ts":1925,"./kabu":2179,"./kabu.ts":2179,"./luogu":1787,"./luogu.ts":1787,"./lxbot":7750,"./lxbot.ts":7750,"./ocr":1078,"./ocr.ts":1078,"./oier":8140,"./oier.ts":8140,"./proxy":5405,"./proxy.ts":5405,"./puppeteer":8414,"./puppeteer.ts":8414,"./run":3372,"./run.ts":3372,"./status":7088,"./status.ts":7088,"./sudo":9891,"./sudo.ts":9891,"./teach":475,"./teach.ts":475,"./tools":8424,"./tools.ts":8424,"./wordcloud":7558,"./wordcloud.ts":7558,"./ygdl":2468,"./ygdl.ts":2468};function i(e){var t=a(e);return o(t)}function a(e){if(!o.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}i.keys=function(){return Object.keys(n)},i.resolve=a,e.exports=i,i.id=5305},2293:e=>{"use strict";e.exports=require("../../.cache/hs_card_enUS.json")},9802:e=>{"use strict";e.exports=require("../../.cache/hs_card_zhCN.json")},4768:e=>{"use strict";e.exports=require("ansi_up")},2376:e=>{"use strict";e.exports=require("axios")},3129:e=>{"use strict";e.exports=require("child_process")},6417:e=>{"use strict";e.exports=require("crypto")},5747:e=>{"use strict";e.exports=require("fs")},4298:e=>{"use strict";e.exports=require("fs-extra")},6675:e=>{"use strict";e.exports=require("js-yaml")},8573:e=>{"use strict";e.exports=require("koishi-adapter-onebot")},9711:e=>{"use strict";e.exports=require("koishi-adapter-telegram")},8664:e=>{"use strict";e.exports=require("koishi-core")},4393:e=>{"use strict";e.exports=require("koishi-plugin-common")},9160:e=>{"use strict";e.exports=require("koishi-plugin-eval")},9636:e=>{"use strict";e.exports=require("koishi-plugin-image-search")},9585:e=>{"use strict";e.exports=require("koishi-plugin-mongo")},904:e=>{"use strict";e.exports=require("koishi-plugin-puppeteer")},663:e=>{"use strict";e.exports=require("koishi-plugin-teach")},9509:e=>{"use strict";e.exports=require("koishi-plugin-tools")},6957:e=>{"use strict";e.exports=require("koishi-plugin-webui")},280:e=>{"use strict";e.exports=require("koishi-utils")},3804:e=>{"use strict";e.exports=require("lodash")},2470:e=>{"use strict";e.exports=require("moment")},7548:e=>{"use strict";e.exports=require("mongodb")},2087:e=>{"use strict";e.exports=require("os")},5622:e=>{"use strict";e.exports=require("path")},1703:e=>{"use strict";e.exports=require("pngjs")},742:e=>{"use strict";e.exports=require("sharp")},4515:e=>{"use strict";e.exports=require("superagent")},3680:e=>{"use strict";e.exports=require("superagent-proxy")},1669:e=>{"use strict";e.exports=require("util")}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var o=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(o.exports,o,o.exports,__webpack_require__),o.exports}__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var __webpack_exports__=__webpack_require__(9063)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvbGliL2V4cGlyZS50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvbGliL2dyYXBoLnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9saWIvaXRlbS50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvbGliL3NoZWxsLnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9tYWluLnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9wbHVnaW5zL2F1dG9raWNrLnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9wbHVnaW5zL2JpbGliaWxpLnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9wbHVnaW5zL2JvdHRsZS50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvcGx1Z2lucy9idXN5Ym94LnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9wbHVnaW5zL2NhbGMudHMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vc3JjL3BsdWdpbnMvY29kZWZvcmNlcy50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvcGx1Z2lucy9kcmVzcy50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvcGx1Z2lucy9lY29ub215LnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9wbHVnaW5zL2V2YWwudHMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vc3JjL3BsdWdpbnMvZ2l0aHViLnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9wbHVnaW5zL2dsYWRvcy50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvcGx1Z2lucy9oZWFydGhzdG9uZS50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvcGx1Z2lucy9odHRwY2F0LnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9wbHVnaW5zL2ltYWdldGFnLnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9wbHVnaW5zL2pqd3oudHMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vc3JjL3BsdWdpbnMva2FidS50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvcGx1Z2lucy9sdW9ndS50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvcGx1Z2lucy9seGJvdC50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvcGx1Z2lucy9vY3IudHMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vc3JjL3BsdWdpbnMvb2llci50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvcGx1Z2lucy9wcm94eS50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvcGx1Z2lucy9wdXBwZXRlZXIudHMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vc3JjL3BsdWdpbnMvcnVuLnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9wbHVnaW5zL3N0YXR1cy50cyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9zcmMvcGx1Z2lucy9zdWRvLnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9wbHVnaW5zL3RlYWNoLnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9wbHVnaW5zL3Rvb2xzLnRzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL3NyYy9wbHVnaW5zL3lnZGwudHMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vc3JjL3BsdWdpbnN8c3luY3wvXi8uKiQiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly5jYWNoZS9oc19jYXJkX2VuVVMuanNvblwiIiwid2VicGFjazovL2h5ZHJvLWJvdC8uY2FjaGUvaHNfY2FyZF96aENOLmpzb25cIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJhbnNpX3VwXCIiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90L2V4dGVybmFsIFwiYXhpb3NcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJjaGlsZF9wcm9jZXNzXCIiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90L2V4dGVybmFsIFwiY3J5cHRvXCIiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90L2V4dGVybmFsIFwiZnNcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJmcy1leHRyYVwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImpzLXlhbWxcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJrb2lzaGktYWRhcHRlci1vbmVib3RcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJrb2lzaGktYWRhcHRlci10ZWxlZ3JhbVwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImtvaXNoaS1jb3JlXCIiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90L2V4dGVybmFsIFwia29pc2hpLXBsdWdpbi1jb21tb25cIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJrb2lzaGktcGx1Z2luLWV2YWxcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJrb2lzaGktcGx1Z2luLWltYWdlLXNlYXJjaFwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImtvaXNoaS1wbHVnaW4tbW9uZ29cIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJrb2lzaGktcGx1Z2luLXB1cHBldGVlclwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImtvaXNoaS1wbHVnaW4tdGVhY2hcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJrb2lzaGktcGx1Z2luLXRvb2xzXCIiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90L2V4dGVybmFsIFwia29pc2hpLXBsdWdpbi13ZWJ1aVwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImtvaXNoaS11dGlsc1wiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImxvZGFzaFwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcIm1vbWVudFwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcIm1vbmdvZGJcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJvc1wiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcInBhdGhcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJwbmdqc1wiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcInNoYXJwXCIiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90L2V4dGVybmFsIFwic3VwZXJhZ2VudFwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcInN1cGVyYWdlbnQtcHJveHlcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJ1dGlsXCIiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2h5ZHJvLWJvdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2h5ZHJvLWJvdC93ZWJwYWNrL3N0YXJ0dXAiXSwibmFtZXMiOlsidXRjIiwiYWRkIiwiZW5kT2YiLCJzdWJ0cmFjdCIsInRvRGF0ZSIsIkFVIiwiYXN5bmMiLCJwYWdlIiwiY29udGVudCIsInN0ciIsImFuc2lfdG9faHRtbCIsInMiLCJlIiwic2V0Vmlld3BvcnQiLCJoZWlnaHQiLCJ3aWR0aCIsInNldENvbnRlbnQiLCJlbGVtZW50IiwiJCIsInNpemUiLCJldmFsdWF0ZSIsImVsZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzY3JvbGxXaWR0aCIsInNjcm9sbEhlaWdodCIsImNsaXAiLCJib3VuZGluZ0JveCIsIk1hdGgiLCJjZWlsIiwic2NyZWVuc2hvdCIsImVyciIsIkJ1ZmZlciIsImZyb20iLCJ0b1N0cmluZyIsIkl0ZW1zIiwiZmFsbGJhY2siLCJpZCIsIndlaWdodCIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsImNvbW1hbmQiLCJwIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJleGVjIiwic3Rkb3V0Iiwic3RkZXJyIiwidHJpbSIsImxlbmd0aCIsInByb2Nlc3MiLCJvbiIsIl8iLCJjb25zb2xlIiwibG9nIiwiTG9nZ2VyIiwic2hvd0RpZmYiLCJzaG93VGltZSIsIkNvbW1hbmQiLCJkZWZhdWx0Q29uZmlnIiwiY2hlY2tBcmdDb3VudCIsIlN0cmluZyIsInByb3RvdHlwZSIsImRlY29kZSIsInRoaXMiLCJyZXBsYWNlIiwiZW5jb2RlIiwiU2Vzc2lvbiIsImV4ZWN1dGVTaWxlbnQiLCJhcmcwIiwiYXJnMSIsIl9zaWxlbnQiLCJzZW5kIiwibm9vcCIsInNlbmRRdWV1ZWQiLCJleGVjdXRlIiwiTWFpbiIsIml0ZW0iLCJsb2dnZXIiLCJjb25maWciLCJhcHAiLCJBcHAiLCJwb3J0IiwiYm90cyIsInR5cGUiLCJvbmVib3QiLCJ0ZWxlZ3JhbSIsInByZWZpeCIsInByb21wdCIsImF1dG9BdXRob3JpemUiLCJhdXRvQXNzaWduIiwibWluU2ltaWxhcml0eSIsInJ1biIsImVuc3VyZURpclN5bmMiLCJfX2Rpcm5hbWUiLCJwbHVnaW4iLCJkYiIsImxpbmUiLCJhZG1pbiIsInVzZXJzIiwic3BsaXQiLCJmb3VuZCIsInVzZXIiLCJkYXRhYmFzZSIsImdldFVzZXIiLCJtYXAiLCJPYmplY3QiLCJhc3NpZ24iLCJpIiwic2V0VXNlciIsImF1dGhvcml0eSIsInN1ZG9lciIsImluZm8iLCJsb2FkIiwic3RhcnQiLCJlbmFibGVkcGx1Z2lucyIsInN0YXJ0c1dpdGgiLCJldmFsIiwiYXBwbHkiLCJBcnJheSIsImVycm9yIiwiZ2xvYmFsIiwiQ2hhbm5lbCIsImV4dGVuZCIsImtpY2siLCJjdHgiLCJzZWxlY3QiLCJoaWRkZW4iLCJjaGFubmVsRmllbGRzIiwiYWN0aW9uIiwic2Vzc2lvbiIsImNvdW50IiwiY2hhbm5lbCIsImNvbGwiLCJtb25nbyIsImNvbGxlY3Rpb24iLCJvcHRpb24iLCJvcHRpb25zIiwiZ3JvdXAiLCJib3QiLCJnZXRHcm91cCIsImdyb3VwSWQiLCIkZ2V0R3JvdXBNZW1iZXJMaXN0Iiwia2lja2VkIiwiZmluZCIsInRvQXJyYXkiLCJ1c2VySWQiLCJmaWx0ZXIiLCJpbmNsdWRlcyIsInRhcmdldCIsInNvcnRCeSIsInNvcnQiLCJtYXgiLCJsYXN0U2VudFRpbWUiLCJqb2luVGltZSIsImZpbmRPbmUiLCJuaWNrbmFtZSIsImNhcmQiLCJmcm9tTm93Iiwiam9pbiIsImRyeSIsImFsbCIsIiRzZXRHcm91cEtpY2siLCJpbnNlcnRPbmUiLCJ0ciIsInIiLCJzb3VyY2UiLCJ0b1VwcGVyQ2FzZSIsInJlc3VsdCIsIlJFX0JWSUQiLCJwYXJzZUludCIsInVybCIsImdldCIsImJ1ZmZlciIsImVuZCIsInJlcyIsInJlZGlyZWN0cyIsInBvcCIsImF2IiwiYm9keSIsImNvZGUiLCJkYXRhIiwidGl0bGUiLCJwaWMiLCJtaWRkbGV3YXJlIiwibmV4dCIsIlJFIiwibm9SZWRpcmVjdCIsImFsaWFzIiwidXNlckZpZWxkcyIsInBsYXRmb3JtIiwicGljayIsImluc2VydGVkSWQiLCJjbnQiLCJmbG9vciIsInJhbmRvbSIsInNraXAiLCJsaW1pdCIsImRlbGV0ZU9uZSIsIl9pZCIsInVwZGF0ZU9uZSIsIiRpbmMiLCJEYXRlIiwiZ2VuZXJhdGlvblRpbWUiLCJ0b0xvY2FsZVN0cmluZyIsInF1ZXJ5IiwiZGVsZXRlTWFueSIsIkpTT04iLCJwYXJzZSIsImRlbGV0ZWRDb3VudCIsImRpc2FsbG93ZWRDb21tYW5kcyIsImdyb3VwTWFwIiwidXNlck1hcCIsImdldEdyb3VwTmFtZSIsInN1YnR5cGUiLCJ0aW1lc3RhbXAiLCJub3ciLCJjaGFubmVsSWQiLCJUaW1lIiwiaG91ciIsInByb21pc2UiLCJ0aGVuIiwiZCIsImdyb3VwTmFtZSIsIm91dHB1dCIsImZvcm1hdE1lc3NhZ2UiLCJjb2RlcyIsInNlZ21lbnQiLCJxcSIsImdldEdyb3VwTWVtYmVyIiwidXNlcm5hbWUiLCJjaGVja0dyb3VwQWRtaW4iLCJhdXRob3IiLCJyb2xlcyIsImxldmVscyIsIm1lc3NhZ2UiLCJzZXRUaW1lem9uZU9mZnNldCIsInRpbWV6b25lT2Zmc2V0IiwicmVjb3JkTWVzc2FnZSIsImFzc2lnbmVlIiwic2VsZklkIiwibXNnIiwiVXNlciIsImZpZWxkcyIsImlucHV0IiwiZXhwciIsImluc3BlY3QiLCJicm93c2VyIiwibmV3UGFnZSIsImltZyIsInRleHQycG5nIiwiY2xvc2UiLCJjbWQiLCJzZXRUaW1lb3V0IiwiZW52IiwicG1faWQiLCJleGl0IiwiY2hlY2siLCIkc2V0R3JvdXBMZWF2ZSIsImZsYWciLCJGbGFnIiwiaWdub3JlIiwiZ3JvdXBzIiwiZ2V0QXNzaWduZWRDaGFubmVscyIsImZvcmNlZCIsImciLCJzaWxlbnQiLCJmb3JFYWNoIiwic2VuZE1lc3NhZ2UiLCJzZXQiLCJTZXQiLCJkZWxldGUiLCJwdXNoIiwic2VjcyIsIiRzZXRHcm91cEJhbiIsInNlbmRlck5hbWUiLCJnZXRDaGFubmVsIiwic2V0Q2hhbm5lbCIsIndlbGNvbWVNc2ciLCJ1ZG9jIiwiJHNldEZyaWVuZEFkZFJlcXVlc3QiLCJtZXNzYWdlSWQiLCJwdWJsaWMiLCIkc2V0R3JvdXBBZGRSZXF1ZXN0IiwiYyIsImNyZWF0ZUluZGV4IiwidGltZSIsInNlbGYiLCJtc2dzIiwic2VuZGVyIiwiZGVsZXRlTWVzc2FnZSIsImR1cmF0aW9uIiwibiIsImEiLCJ0b3RhbCIsIiRndCIsInRvdGFsU2VuZENvdW50IiwiZ3JvdXBTZW5kQ291bnQiLCJ0b3RhbFJlY2VpdmVDb3VudCIsIiRuZSIsImdyb3VwUmVjZWl2ZUNvdW50IiwiJG1hdGNoIiwiYWdncmVnYXRlIiwiJGdyb3VwIiwiJHN1bSIsIiRzb3J0IiwiJGxpbWl0IiwidWRvY3MiLCJ1ZGljdCIsIm1pbkludGVydmFsIiwic2hvcnRjdXQiLCJhcmdzIiwiZXhhbXBsZSIsInN2ZyIsInBvc3QiLCJyYXciLCJmdWxsIiwiY2F0Y2giLCJzdGF0dXMiLCJoYW5kbGUiLCJmaXJzdE5hbWUiLCJsYXN0TmFtZSIsIm9yZ2FuaXphdGlvbiIsImF2YXRhciIsInJhdGluZyIsInJhbmsiLCJtYXhSYXRpbmciLCJtYXhSYW5rIiwiZ2V0VGltZSIsImNvbnRlc3RzIiwiY29udGVzdCIsInN0YXJ0VGltZVNlY29uZHMiLCJyZXNwIiwic3VtIiwiYXJnIiwiY29pbiIsImJhY2twYWNrIiwic2xvdCIsIm1heFVzYWdlIiwiTnVtYmVyIiwiaXNTYWZlSW50ZWdlciIsIm5ld1Nlc3Npb24iLCJvYnNlcnZlVXNlciIsIl91cGRhdGUiLCJfc3VkbyIsImFyZ3YiLCJfZHVyYXRpb24iLCJtaW4iLCJpc05hTiIsInNsZWVwIiwic3VwZXJhZ2VudCIsIkludmFsaWRUb2tlbkVycm9yIiwiRXJyb3IiLCJmb3JtYXRNYXJrZG93biIsInNlbGVjdG9yIiwib2Zmc2V0IiwiZ290byIsIndhaXRVbnRpbCIsImVsIiwieSIsIngiLCJiYXNlNjQiLCJlbmNvZGluZyIsIlBvc3QiLCJwcm94eSIsInB1bGxSZXF1ZXN0SW50ZXJhY3RvciIsImV2ZW50IiwiZ2V0VG9rZW4iLCJsaW5rIiwidG9rZW4iLCJjb21taXRNc2ciLCJyZXBvbmFtZSIsImlzc3VlSWQiLCJwdXQiLCJjb21taXRfdGl0bGUiLCJjb2xsRGF0YSIsImV2ZW50cyIsInJlZiIsImhlYWRfY29tbWl0IiwibG9naW4iLCJhZGRlZCIsInJlbW92ZWQiLCJtb2RpZmllZCIsInJlcG9zaXRvcnkiLCJmdWxsX25hbWUiLCJzb3VyY2VncmFwaCIsImJlZm9yZSIsImFmdGVyIiwiY2hhbmdlcyIsImNvbXBhcmlzb24iLCJmaWxlRGlmZnMiLCJub2RlcyIsImNoYW5nZSIsInN0YXQiLCJkZWxldGVkIiwiY2hhbmdlZCIsImNvbW1pdCIsImNvbW1pdHMiLCJkZXQiLCJzdWJzdHIiLCJjb21wYXJlIiwiZm9yayIsIm1lcmdlIiwiaXNzdWVzIiwiaXNzdWUiLCJudW1iZXIiLCJodG1sX3VybCIsImltYWdlIiwid2FybiIsImNvbW1lbnQiLCJpc3N1ZV9jb21tZW50IiwiaW50ZXJhY3QiLCJwdWxsX3JlcXVlc3QiLCJvd25lciIsImJhc2UiLCJoZWFkIiwibWVyZ2VkIiwiUmVnRXhwIiwiYmFzZUxhYmVsIiwibGFiZWwiLCJoZWFkTGFiZWwiLCJwdWxsX3JlcXVlc3RfcmV2aWV3IiwicmV2aWV3Iiwic3RhdGUiLCJ1bmRlZmluZWQiLCJwdWxsX3JlcXVlc3RfcmV2aWV3X2NvbW1lbnQiLCJzdGFyIiwicmVwbyIsInN0YXJnYXplcnNfY291bnQiLCJ3YXRjaCIsIndhdGNoZXJzX2NvdW50IiwicHJvamVjdF9jYXJkIiwicHJvamVjdF9jb2x1bW4iLCJjaGVja19ydW4iLCJjaGVja19zdWl0ZSIsInJlcG9zaXRvcnlfdnVsbmVyYWJpbGl0eV9hbGVydCIsImRlcGxveW1lbnRfc3RhdHVzIiwiZGVwbG95bWVudCIsInBhZ2VfYnVpbGQiLCJyb3V0ZXIiLCJyZXF1ZXN0IiwiaGVhZGVycyIsInBheWxvYWQiLCJzdHJpbmdpZnkiLCJjcmVhdGVIYXNoIiwidXBkYXRlIiwiZGlnZXN0IiwiaG9vayIsImIiLCJpbmYiLCJyZWxhdGl2ZUlkcyIsInRvTG93ZXJDYXNlIiwiZ2lkIiwiZ2RvYyIsImNsaWVudF9pZCIsImNsaWVudF9zZWNyZXQiLCJyZWRpcmVjdF91cmkiLCJhY2Nlc3NfdG9rZW4iLCJHaXRodWJUb2tlbiIsInF1b3RlIiwicGFyc2VkTXNnIiwicGFyc2VkIiwicmVsYXRpdmVFdmVudCIsInJlZnJlc2hfdG9rZW4iLCJncmFudF90eXBlIiwiJHNldCIsIiRhZGRUb1NldCIsInVwc2VydCIsInByb2plY3QiLCJkb2MiLCIkcHVsbCIsInRleHQiLCJ3YXYiLCJ0bXBkaXIiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ1bmxpbmsiLCJfY2FyZCIsImtleXMiLCJ3cml0ZUZpbGUiLCJyZSIsIkFMTE9XIiwiaW1hZ2VSRSIsIk1ENSIsImhhc2giLCJ0cmFuc2ZpbGUiLCJyZWFkRmlsZSIsImN3ZCIsInRyYW5zIiwic2FmZUxvYWQiLCJuYW1lcyIsImNhcHR1cmUiLCJlbmFibGVBdXRvVGFnIiwibWQ1IiwidW5pcXVlIiwiZmlsZSIsInR4dCIsInJlc3BvbnNlVHlwZSIsImJ1ZiIsImFsbG9jIiwiYnl0ZUxlbmd0aCIsInZpZXciLCJVaW50OEFycmF5IiwicG5nIiwidG9CdWZmZXIiLCJwcm9icyIsImVycm1zZyIsInRhZ3MiLCJ0YWciLCJqand6IiwibG9jYWxlIiwiZXhwaXJlRGF5cyIsInNlcnZpY2VGZWUiLCJtYXhCdXlQZXJEYXkiLCJwcmljZUNvbGwiLCJleHBpcmVBZnRlclNlY29uZHMiLCJzdG9ja0NvbGwiLCJwcmljZVRvZGF5IiwicHJpY2UiLCJib3VnaHQiLCJzcXJ0IiwiZXhwaXJlIiwiZW5kT2ZUb2RheSIsInN0b2NrTGlzdCIsImJ1eVByaWNlIiwiY2FuQnV5IiwiZnV6enkiLCJtYXhOdW1iZXIiLCJpc0ludGVnZXIiLCJPYmplY3RJRCIsImNvc3QiLCJzZWxsTnVtYmVyIiwiSW5maW5pdHkiLCJkZWxldGVJZHMiLCJuZXdOdW1iZXIiLCJnYWluIiwiJGluIiwiZGVidWciLCJjdXJyZW50RGF0YSIsImxldmVsIiwiY2NmTGV2ZWwiLCJmb2xsb3dpbmdDb3VudCIsImZvbGxvd2VyQ291bnQiLCJwYXNzZWRQcm9ibGVtQ291bnQiLCJzdWJtaXR0ZWRQcm9ibGVtQ291bnQiLCJjb2xvciIsInJldCIsImltYWdlX3JlY29yZHMiLCJub2RlIiwic291cmNlX3RleHQiLCJHRU5ERVIiLCIwIiwiMSIsInJlc3VsdHMiLCJ0YWtlIiwiYXdhcmRzIiwic2V4IiwiYXdhcmQiLCJncmFkZSIsInByb3ZpbmNlIiwic2Nob29sIiwiaWRlbnRpdHkiLCJzY29yZSIsImF3YXJkX3R5cGUiLCJsb2FkVGltZW91dCIsImlkbGVUaW1lb3V0IiwibWF4TGVuZ3RoIiwiYWxsb3dlZFByb3RvY29scyIsImRpc3Bvc2UiLCJ0Iiwidmlld3BvcnQiLCJzY2hlbWUiLCJsb2FkZWQiLCJkZXZpY2VTY2FsZUZhY3RvciIsInRpbWVyIiwiX3Jlc29sdmUiLCJjbGVhclRpbWVvdXQiLCJ0aW1lb3V0IiwiZnVsbFBhZ2UiLCJQTkciLCJiaXRibHQiLCJzeW5jIiwid3JpdGUiLCJMQU5HUyIsImNvbXBpbGUiLCJjb2RlX2ZpbGUiLCJjYyIsInBhcyIsInB5IiwicHkyIiwicHkzIiwiamF2YSIsImNvcHlPdXQiLCJwaHAiLCJqcyIsImdvIiwic2giLCJjcyIsImF4aW9zIiwiY3JlYXRlIiwiYmFzZVVSTCIsIl9wb3N0IiwidGltZV9saW1pdF9tcyIsIm1lbW9yeV9saW1pdF9tYiIsInByb2Nlc3NfbGltaXQiLCJzdGRpbiIsImNvcHlJbiIsImNvcHlPdXRDYWNoZWQiLCJmaWxlcyIsImNwdUxpbWl0IiwicmVhZENwdUxpbWl0IiwibWVtb3J5TGltaXQiLCJwcm9jTGltaXQiLCJ0aW1lX3VzYWdlX21zIiwibWVtb3J5X3VzYWdlX2tiIiwibWVtb3J5IiwiZmlsZUlkcyIsImxhbmciLCJmaWxlSWQiLCJfcnVuIiwicmVzcG9uc2UiLCJmb3JtYXQiLCJ3ZWJ1aSIsInNvdXJjZXMiLCJtZXRhIiwiaWRzIiwiYWN0aXZlVXNlcnMiLCIkbmluIiwidXNlZG1lbSIsInRvdGFsbWVtIiwiZnJlZW1lbSIsIm9sZCIsIlJFaW1hZ2UiLCJnZXRDb25maWciLCJfcmVkaXJlY3RlZCIsImNyZWF0b3IiLCJfZGlhbG9ndWUiLCJ3cml0ZXIiLCJkb3dubG9hZEZpbGUiLCJCaW5hcnkiLCJkaWFsb2d1ZSIsInNsaWNlIiwiaW5kZXgiLCJhbnN3ZXIiLCJiaWxpYmlsaSIsIm1hZ2kiLCJvZWlzIiwidGV4IiwibWF0Y2giLCJ2aWV3Qm94IiwidXNhZ2UiLCJzZXF1ZW5jZSIsInBhZFN0YXJ0IiwidGV4dDEiLCJ0ZXh0MiIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJpbm5lckhUTUwiLCJleGlzdHNTeW5jIiwid29yZCIsInciLCJ0ZXN0IiwiZ2V0Rmlyc3RQaW55aW4iLCJwaW55aW4iLCJzaGlmdCIsImdldExhc3RQaW55aW4iLCJmaXgiLCJlbmRzV2l0aCIsImluZGV4ZWQiLCJqc29uIiwiZmlyc3RQaW55aW4iLCJsYXN0UGlueWluIiwia2V5MSIsInZhbHVlczEiLCJrZXkyIiwidmFsdWVzMiIsInBpbnlpbnMiLCJuZXdwaW55aW5zIiwiZmlsdGVyZWQiLCJ3ZWJwYWNrQ29udGV4dCIsInJlcSIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJvIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJjYWxsIiwib2JqIiwicHJvcCIsImhhc093blByb3BlcnR5IiwiX193ZWJwYWNrX2V4cG9ydHNfXyJdLCJtYXBwaW5ncyI6IjBOQUFBLG1CQUVBLHdCQUNJLE9BQU8sWUFBU0EsTUFDWEMsSUFBSSxFQUFHLFNBQ1BDLE1BQU0sT0FDTkMsU0FBUyxFQUFHLFNBQ1pDLFcseUxDUFQsTUFJTUMsRUFBSyxJQUpYLFdBSWUsU0FFZixXQUFPQyxlQUF3QkMsRUFBWUMsR0FFdkMsTUFBTUMsRUFBTSwwSEFBMEhKLEVBQUdLLGFBQWFGLFdBQ3RKLElBQUlHLEVBQ0FDLEVBQ0osVUFDVUwsRUFBS00sWUFBWSxDQUNuQkMsT0FBUSxJQUFLQyxNQUFPLFdBRWxCUixFQUFLUyxXQUFXUCxHQUN0QixNQUFNUSxRQUFnQlYsRUFBS1csRUFBRSxPQUN2QkMsUUFBYVosRUFBS2EsVUFBUyxLQUU3QixNQUFNQyxFQUFNQyxTQUFTQyxxQkFBcUIsT0FBTyxHQUNqRCxNQUFPLENBQ0hSLE1BQU9NLEVBQUlHLFlBQ1hWLE9BQVFPLEVBQUlJLGlCQUdkQyxRQUFhVCxFQUFRVSxvQkFDckJwQixFQUFLTSxZQUFZLENBQ25CRSxNQUFPYSxLQUFLQyxLQUFLVixFQUFLSixNQUFRLElBQzlCRCxPQUFRYyxLQUFLQyxLQUFLSCxFQUFLWixPQUFTLE1BRXBDSCxRQUFVSixFQUFLdUIsV0FBVyxJQUM1QixNQUFPQyxHQUNMbkIsRUFBSW1CLEVBRVIsR0FBSW5CLEVBQUcsTUFBTUEsRUFDYixPQUFRRCxHQUFLcUIsT0FBT0MsS0FBSyxLQUFLQyxTQUFTLFks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T0MsUUFBVUMsUUFBUSx3QixzQkNBekJGLEVBQU9DLFFBQVVDLFFBQVEsd0Isc0JDQXpCRixFQUFPQyxRQUFVQyxRQUFRLHdCLHFCQ0F6QkYsRUFBT0MsUUFBVUMsUUFBUSxpQixzQkNBekJGLEVBQU9DLFFBQVVDLFFBQVEsVyxzQkNBekJGLEVBQU9DLFFBQVVDLFFBQVEsVyxzQkNBekJGLEVBQU9DLFFBQVVDLFFBQVEsWSxzQkNBekJGLEVBQU9DLFFBQVVDLFFBQVEsTyxzQkNBekJGLEVBQU9DLFFBQVVDLFFBQVEsUyxzQkNBekJGLEVBQU9DLFFBQVVDLFFBQVEsVSxxQkNBekJGLEVBQU9DLFFBQVVDLFFBQVEsVSxzQkNBekJGLEVBQU9DLFFBQVVDLFFBQVEsZSxzQkNBekJGLEVBQU9DLFFBQVVDLFFBQVEscUIsc0JDQXpCRixFQUFPQyxRQUFVQyxRQUFRLFVDQ3JCQyx5QkFBMkIsR0FHL0IsU0FBU0wsb0JBQW9CTSxHQUU1QixJQUFJQyxFQUFlRix5QkFBeUJDLEdBQzVDLFFBQXFCdFEsSUFBakJ1USxFQUNILE9BQU9BLEVBQWFKLFFBR3JCLElBQUlELEVBQVNHLHlCQUF5QkMsR0FBWSxDQUdqREgsUUFBUyxJQU9WLE9BSEFLLG9CQUFvQkYsR0FBVUcsS0FBS1AsRUFBT0MsUUFBU0QsRUFBUUEsRUFBT0MsUUFBU0gscUJBR3BFRSxFQUFPQyxRQ3JCZkgsb0JBQW9CQyxFQUFJLENBQUNTLEVBQUtDLElBQVV6a0IsT0FBTzVDLFVBQVVzbkIsZUFBZUgsS0FBS0MsRUFBS0MsR0NHbEYsSUFBSUUsb0JBQXNCYixvQkFBb0IsTyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuXG5leHBvcnQgZnVuY3Rpb24gZW5kT2ZUb2RheSgpIHtcbiAgICByZXR1cm4gbW9tZW50KCkudXRjKClcbiAgICAgICAgLmFkZCg4LCAnaG91cnMnKVxuICAgICAgICAuZW5kT2YoJ2RheScpXG4gICAgICAgIC5zdWJ0cmFjdCg4LCAnaG91cnMnKVxuICAgICAgICAudG9EYXRlKCk7XG59XG4iLCJpbXBvcnQgQW5zaVVwIGZyb20gJ2Fuc2lfdXAnO1xuXG50eXBlIFBhZ2UgPSBpbXBvcnQoJ3B1cHBldGVlci1jb3JlJykuUGFnZTtcblxuY29uc3QgQVUgPSBuZXcgQW5zaVVwKCk7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0ZXh0MnBuZyhwYWdlOiBQYWdlLCBjb250ZW50OiBzdHJpbmcpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICAgIGNvbnN0IHN0ciA9IGA8cHJlIHN0eWxlPVwiZm9udC1mYW1pbHk6J1NvdXJjZSBDb2RlIFBybycsIENvbnNvbGFzLCAnTWljcm9zb2Z0IFlhaGVpJywgSFlTaHVhaVhpYW5UaVc7Zm9udC1zaXplOjE0cHg7bWF4LXdpZHRoOjYzMHB4XCI+JHtBVS5hbnNpX3RvX2h0bWwoY29udGVudCl9PC9wcmU+YDtcbiAgICBsZXQgczogQnVmZmVyO1xuICAgIGxldCBlOiBFcnJvcjtcbiAgICB0cnkge1xuICAgICAgICBhd2FpdCBwYWdlLnNldFZpZXdwb3J0KHtcbiAgICAgICAgICAgIGhlaWdodDogMTAwLCB3aWR0aDogMzAsXG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCBwYWdlLnNldENvbnRlbnQoc3RyKTtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGF3YWl0IHBhZ2UuJCgncHJlJyk7XG4gICAgICAgIGNvbnN0IHNpemUgPSBhd2FpdCBwYWdlLmV2YWx1YXRlKCgpID0+IHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgICAgICAgICAgY29uc3QgZWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3ByZScpWzBdO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB3aWR0aDogZWxlLnNjcm9sbFdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogZWxlLnNjcm9sbEhlaWdodCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBjbGlwID0gYXdhaXQgZWxlbWVudC5ib3VuZGluZ0JveCgpO1xuICAgICAgICBhd2FpdCBwYWdlLnNldFZpZXdwb3J0KHtcbiAgICAgICAgICAgIHdpZHRoOiBNYXRoLmNlaWwoc2l6ZS53aWR0aCArIDE0KSxcbiAgICAgICAgICAgIGhlaWdodDogTWF0aC5jZWlsKGNsaXAuaGVpZ2h0ICsgMTQpLFxuICAgICAgICB9KTtcbiAgICAgICAgcyA9IGF3YWl0IHBhZ2Uuc2NyZWVuc2hvdCh7fSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGUgPSBlcnI7XG4gICAgfVxuICAgIGlmIChlKSB0aHJvdyBlO1xuICAgIHJldHVybiAocyB8fCBCdWZmZXIuZnJvbSgnJykpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbn1cbiIsImV4cG9ydCBpbnRlcmZhY2UgSXRlbSB7XG4gICAgaWQ6IHN0cmluZyxcbiAgICB3ZWlnaHQ6IG51bWJlcixcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgZGVzY3JpcHRpb246IHN0cmluZyxcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSXRlbU1ldGEgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBuZXZlcj4geyB9XG5leHBvcnQgY29uc3QgSXRlbXM6IFJlY29yZDxzdHJpbmcsIEl0ZW0+ID0ge1xuICAgIGZhbGxiYWNrOiB7XG4gICAgICAgIGlkOiAnZmFsbGJhY2snLFxuICAgICAgICB3ZWlnaHQ6IDAsXG4gICAgICAgIG5hbWU6ICfmnKrnn6Xnianlk4EnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ+acquefpeeJqeWTgScsXG4gICAgfSxcbn07XG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJJdGVtKGlkOiBzdHJpbmcsIHdlaWdodDogbnVtYmVyLCBuYW1lOiBzdHJpbmcsIGRlc2NyaXB0aW9uOiBzdHJpbmcpIHtcbiAgICBJdGVtc1tpZF0gPSB7XG4gICAgICAgIGlkLCB3ZWlnaHQsIG5hbWUsIGRlc2NyaXB0aW9uLFxuICAgIH07XG59XG4iLCJpbXBvcnQgeyBleGVjIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIHNoZWxsRXhlY3V0ZShjb21tYW5kOiBzdHJpbmcpIHtcbiAgICBsZXQgcDogc3RyaW5nO1xuICAgIHRyeSB7XG4gICAgICAgIHAgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBleGVjKGNvbW1hbmQsIChlcnIsIHN0ZG91dCwgc3RkZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShzdGRvdXQgKyBzdGRlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGUudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKCFwLnRyaW0oKS5sZW5ndGgpIHJldHVybiAnKGV4ZWN1dGUgc3VjY2VzcyknO1xuICAgIHJldHVybiBwO1xufVxuIiwiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L2ZpcnN0ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tZHVwbGljYXRlcyAqL1xuLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L25vLWR5bmFtaWMtcmVxdWlyZSAqL1xuLyogZXNsaW50LWRpc2FibGUgZ2xvYmFsLXJlcXVpcmUgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLWF3YWl0LWluLWxvb3AgKi9cbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgQXBwLCBDb21tYW5kLCBTZXNzaW9uIH0gZnJvbSAna29pc2hpLWNvcmUnO1xuaW1wb3J0IHsgTG9nZ2VyLCBub29wIH0gZnJvbSAna29pc2hpLXV0aWxzJztcbmltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgeyBhcHBseSBhcyBLb2lzaGlQbHVnaW5Nb25nbyB9IGZyb20gJ2tvaXNoaS1wbHVnaW4tbW9uZ28nO1xuaW1wb3J0ICdrb2lzaGktYWRhcHRlci1vbmVib3QnO1xuaW1wb3J0ICdrb2lzaGktYWRhcHRlci10ZWxlZ3JhbSc7XG5cbnByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIChfLCBwKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ1VuaGFuZGxlZCBSZWplY3Rpb246JywgcCk7XG59KTtcbkxvZ2dlci5zaG93RGlmZiA9IGZhbHNlO1xuTG9nZ2VyLnNob3dUaW1lID0gJ01NLUREIGhoOm1tOnNzJztcbkNvbW1hbmQuZGVmYXVsdENvbmZpZy5jaGVja0FyZ0NvdW50ID0gdHJ1ZTtcblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBTdHJpbmcge1xuICAgICAgICBkZWNvZGU6ICgpID0+IHN0cmluZyxcbiAgICAgICAgZW5jb2RlOiAoKSA9PiBzdHJpbmcsXG4gICAgfVxufVxuZGVjbGFyZSBtb2R1bGUgJ2tvaXNoaS1jb3JlJyB7XG4gICAgaW50ZXJmYWNlIFNlc3Npb24ge1xuICAgICAgICBfc2lsZW50OiBib29sZWFuLFxuICAgICAgICBleGVjdXRlU2lsZW50KGNvbnRlbnQ6IHN0cmluZywgbmV4dD86IE5leHRGdW5jdGlvbik6IFByb21pc2U8c3RyaW5nPjtcbiAgICAgICAgZXhlY3V0ZWlsZW50KGFyZ3Y6IEFyZ3YsIG5leHQ/OiBOZXh0RnVuY3Rpb24pOiBQcm9taXNlPHN0cmluZz47XG4gICAgfVxufVxuXG5TdHJpbmcucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC8mIzkxOy9nbSwgJ1snKS5yZXBsYWNlKC8mIzkzOy9nbSwgJ10nKS5yZXBsYWNlKC8mYW1wOy9nbSwgJyYnKTtcbn07XG5TdHJpbmcucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC8mL2dtLCAnJmFtcDsnKS5yZXBsYWNlKC9cXFsvZ20sICcmIzkxOycpLnJlcGxhY2UoL1xcXS9nbSwgJyYjOTM7Jyk7XG59O1xuU2Vzc2lvbi5wcm90b3R5cGUuZXhlY3V0ZVNpbGVudCA9IGZ1bmN0aW9uIGV4ZWN1dGVTaWxlbnQodGhpczogU2Vzc2lvbiwgYXJnMDogYW55LCBhcmcxPzogYW55KSB7XG4gICAgdGhpcy5fc2lsZW50ID0gdHJ1ZTtcbiAgICB0aGlzLnNlbmQgPSBub29wO1xuICAgIHRoaXMuc2VuZFF1ZXVlZCA9IG5vb3A7XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZShhcmcwLCBhcmcxKTtcbn07XG5cbmNsYXNzIE1haW4ge1xuICAgIGNvbmZpZzogUmVjb3JkPHN0cmluZywgYW55PjtcblxuICAgIGFwcDogQXBwO1xuXG4gICAgbG9nZ2VyOiBMb2dnZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihpdGVtKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyID0gbmV3IExvZ2dlcignbWFpbicpO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGl0ZW0uY29uZmlnO1xuICAgICAgICB0aGlzLmFwcCA9IG5ldyBBcHAoe1xuICAgICAgICAgICAgcG9ydDogdGhpcy5jb25maWcucG9ydCxcbiAgICAgICAgICAgIGJvdHM6IHRoaXMuY29uZmlnLmJvdHMsXG4gICAgICAgICAgICB0eXBlOiB0aGlzLmNvbmZpZy50eXBlLFxuICAgICAgICAgICAgb25lYm90OiB0aGlzLmNvbmZpZy5vbmVib3QsXG4gICAgICAgICAgICB0ZWxlZ3JhbTogdGhpcy5jb25maWcudGVsZWdyYW0sXG4gICAgICAgICAgICBwcmVmaXg6IHRoaXMuY29uZmlnLnByb21wdCBhcyBzdHJpbmcsXG4gICAgICAgICAgICBhdXRvQXV0aG9yaXplOiAxLFxuICAgICAgICAgICAgYXV0b0Fzc2lnbjogdHJ1ZSxcbiAgICAgICAgICAgIG1pblNpbWlsYXJpdHk6IDAuNyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucnVuKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgcnVuKCkge1xuICAgICAgICBmcy5lbnN1cmVEaXJTeW5jKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICcuY2FjaGUnKSk7XG4gICAgICAgIHRoaXMuYXBwLnBsdWdpbihLb2lzaGlQbHVnaW5Nb25nbywgdGhpcy5jb25maWcuZGIpO1xuICAgICAgICB0aGlzLmFwcC5vbignY29ubmVjdCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbGluZSBvZiB0aGlzLmNvbmZpZy5hZG1pbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJzID0gbGluZS5zcGxpdCgnJicpO1xuICAgICAgICAgICAgICAgIGxldCBmb3VuZDtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHVzZXIgb2YgdXNlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW3R5cGUsIGlkXSA9IHVzZXIuc3BsaXQoJzonKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdWRvYyA9IGF3YWl0IHRoaXMuYXBwLmRhdGFiYXNlLmdldFVzZXIodHlwZSwgaWQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodWRvYykgZm91bmQgPSBbdHlwZSwgaWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBtYXAgPSBPYmplY3QuYXNzaWduKHt9LCAuLi51c2Vycy5tYXAoKGkpID0+IGkuc3BsaXQoJzonKSkubWFwKChpKSA9PiAoeyBbaVswXV06IGlbMV0gfSkpKTtcbiAgICAgICAgICAgICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAuZGF0YWJhc2Uuc2V0VXNlcihmb3VuZFswXSwgZm91bmRbMV0sIHsgLi4ubWFwLCBhdXRob3JpdHk6IDUsIHN1ZG9lcjogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyhgT3BwZWQgJHtsaW5lfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkKCk7XG4gICAgICAgIGF3YWl0IHRoaXMuYXBwLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZCgpIHtcbiAgICAgICAgZm9yIChjb25zdCBwbHVnaW4gb2YgdGhpcy5jb25maWcuZW5hYmxlZHBsdWdpbnMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwbHVnaW4uc3RhcnRzV2l0aCgnficpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcC5wbHVnaW4ocmVxdWlyZShgLi9wbHVnaW5zLyR7cGx1Z2luLnNwbGl0KCd+JylbMV19YCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV2YWxcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHRoaXMuYXBwLnBsdWdpbihldmFsKCdyZXF1aXJlJykocGx1Z2luKS5hcHBseSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwbHVnaW4gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocGx1Z2luWzBdLnN0YXJ0c1dpdGgoJ34nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAucGx1Z2luKHJlcXVpcmUoYC4vcGx1Z2lucy8ke3BsdWdpblswXS5zcGxpdCgnficpWzFdfWApLCBwbHVnaW5bMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV2YWxcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHRoaXMuYXBwLnBsdWdpbihldmFsKCdyZXF1aXJlJykocGx1Z2luWzBdKS5hcHBseSwgcGx1Z2luWzFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkICcsIHBsdWdpbiwgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCA9IE1haW47XG4vLyBAdHMtaWdub3JlXG5nbG9iYWwuTWFpbiA9IE1haW47XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1hd2FpdC1pbi1sb29wICovXG5pbXBvcnQgeyBDUUJvdCwgR3JvdXBNZW1iZXJJbmZvIH0gZnJvbSAna29pc2hpLWFkYXB0ZXItb25lYm90JztcbmltcG9ydCB7IENvbnRleHQsIENoYW5uZWwgfSBmcm9tICdrb2lzaGktY29yZSc7XG5pbXBvcnQgeyBmaWx0ZXIsIHNvcnRCeSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5cbmRlY2xhcmUgbW9kdWxlICdrb2lzaGktY29yZScge1xuICAgIGludGVyZmFjZSBDaGFubmVsIHtcbiAgICAgICAga2ljazogbnVtYmVyXG4gICAgfVxuICAgIGludGVyZmFjZSBUYWJsZXMge1xuICAgICAgICBhdXRva2ljazogYW55LFxuICAgIH1cbn1cbkNoYW5uZWwuZXh0ZW5kKCgpID0+ICh7XG4gICAga2ljazogMCxcbn0pKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFwcGx5KGN0eDogQ29udGV4dCkge1xuICAgIGN0eC5zZWxlY3QoJ3BsYXRmb3JtJywgJ29uZWJvdCcpLmNvbW1hbmQoJ2F1dG9raWNrIDxjb3VudD4nLCAnJywgeyBoaWRkZW46IHRydWUsIGF1dGhvcml0eTogNCB9KVxuICAgICAgICAuY2hhbm5lbEZpZWxkcyhbJ2tpY2snXSlcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0sIGNvdW50KSA9PiB7XG4gICAgICAgICAgICBzZXNzaW9uLmNoYW5uZWwua2ljayA9ICtjb3VudDtcbiAgICAgICAgICAgIHJldHVybiBgc2V0IHRvICR7Y291bnR9YDtcbiAgICAgICAgfSk7XG5cbiAgICBjdHguYXBwLm9uKCdjb25uZWN0JywgKCkgPT4ge1xuICAgICAgICBjb25zdCBjb2xsID0gY3R4LmFwcC5kYXRhYmFzZS5tb25nby5jb2xsZWN0aW9uKCdhdXRva2ljaycpO1xuXG4gICAgICAgIGN0eC5zZWxlY3QoJ3BsYXRmb3JtJywgJ29uZWJvdCcpLmNvbW1hbmQoJ2F1dG9raWNrLnJ1bicsICcnLCB7IGhpZGRlbjogdHJ1ZSwgYXV0aG9yaXR5OiA0IH0pXG4gICAgICAgICAgICAuY2hhbm5lbEZpZWxkcyhbJ2tpY2snXSlcbiAgICAgICAgICAgIC5vcHRpb24oJ2RyeScsICdkcnkgcnVuJywgeyBhdXRob3JpdHk6IDIgfSlcbiAgICAgICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiwgb3B0aW9ucyB9KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZ3JvdXAgPSBhd2FpdCBzZXNzaW9uLmJvdC5nZXRHcm91cChzZXNzaW9uLmdyb3VwSWQpO1xuICAgICAgICAgICAgICAgIGxldCB1c2VycyA9IGF3YWl0IChzZXNzaW9uLmJvdCBhcyBDUUJvdCkuJGdldEdyb3VwTWVtYmVyTGlzdChncm91cC5ncm91cElkKTtcbiAgICAgICAgICAgICAgICBjb25zdCBraWNrZWQgPSAoYXdhaXQgY29sbC5maW5kKHsgZ3JvdXBJZDogc2Vzc2lvbi5ncm91cElkIH0pLnRvQXJyYXkoKSkubWFwKChpKSA9PiBpLnVzZXJJZCk7XG4gICAgICAgICAgICAgICAgdXNlcnMgPSBmaWx0ZXIodXNlcnMsICh1c2VyKSA9PiAha2lja2VkLmluY2x1ZGVzKHVzZXIudXNlcklkKSk7XG4gICAgICAgICAgICAgICAgaWYgKHNlc3Npb24uY2hhbm5lbC5raWNrICYmIHNlc3Npb24uY2hhbm5lbC5raWNrIDwgdXNlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0YXJnZXQ6IEdyb3VwTWVtYmVySW5mbztcbiAgICAgICAgICAgICAgICAgICAgdXNlcnMgPSBzb3J0QnkodXNlcnMubWFwKCh1c2VyKSA9PiAoeyAuLi51c2VyLCBzb3J0OiBNYXRoLm1heCh1c2VyLmxhc3RTZW50VGltZSwgdXNlci5qb2luVGltZSkgfSkpLCAnc29ydCcpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHVzZXIgb2YgdXNlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVkb2MgPSBhd2FpdCBjb2xsLmZpbmRPbmUoeyBncm91cElkOiBzZXNzaW9uLmdyb3VwSWQsIHVzZXJJZDogdXNlci51c2VySWQgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXVkb2MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSB1c2VyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHNlc3Npb24uc2VuZChbXG4gICAgICAgICAgICAgICAgICAgICAgICBg5bCGICR7dGFyZ2V0Lm5pY2tuYW1lIHx8IHRhcmdldC5jYXJkfSAoJHt0YXJnZXQudXNlcklkfSkg56e75Ye6576kYCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGDvvIgke21vbWVudCh0YXJnZXQuam9pblRpbWUgKiAxMDAwIHx8IDApLmZyb21Ob3coKX3liqDlhaXvvIzkuIrmrKHlj5HoqIAgJHttb21lbnQodGFyZ2V0Lmxhc3RTZW50VGltZSAqIDEwMDAgfHwgMCkuZnJvbU5vdygpfe+8iWAsXG4gICAgICAgICAgICAgICAgICAgIF0uam9pbignXFxuJykpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMuZHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHNlc3Npb24uYm90IGFzIENRQm90KS4kc2V0R3JvdXBLaWNrKGdyb3VwLmdyb3VwSWQsIHRhcmdldC51c2VySWQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGwuaW5zZXJ0T25lKHsgZ3JvdXBJZDogc2Vzc2lvbi5ncm91cElkLCB1c2VySWQ6IHRhcmdldC51c2VySWQgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIH0pO1xufVxuIiwiaW1wb3J0IHsgQXBwIH0gZnJvbSAna29pc2hpLWNvcmUnO1xuaW1wb3J0IHN1cGVyYWdlbnQgZnJvbSAnc3VwZXJhZ2VudCc7XG5cbmNvbnN0IHRhYmxlID0gJ2Zab2RSOVhRRFNVbTIxeUNrcjZ6QnFpdmVZYWg4YnQ0eHNXcEhuSkU3akw1VkczZ3VNVEtOUEF3Y0YnO1xuY29uc3QgdHIgPSB7fTtcbmZvciAobGV0IGkgPSAwOyBpIDwgNTg7IGkrKykgdHJbdGFibGVbaV1dID0gaTtcbmNvbnN0IHMgPSBbMTEsIDEwLCAzLCA4LCA0LCA2XTtcbmNvbnN0IHIgPSBbJ0InLCAnVicsICcxJywgJycsICcnLCAnNCcsICcnLCAnMScsICcnLCAnNycsICcnLCAnJ107XG5jb25zdCB4b3IgPSAxNzc0NTE4MTI7XG5jb25zdCBhZGQgPSA4NzI4MzQ4NjA4O1xuXG5mdW5jdGlvbiBkZWNvZGUoc291cmNlOiBzdHJpbmcpIHtcbiAgICBpZiAoc291cmNlLmxlbmd0aCAhPT0gMTIgfHwgKHNvdXJjZVswXSArIHNvdXJjZVsxXSArIHNvdXJjZVsyXSArIHNvdXJjZVs1XSArIHNvdXJjZVs3XSArIHNvdXJjZVs5XSkudG9VcHBlckNhc2UoKSAhPT0gci5qb2luKCcnKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2OyBpKyspIHtcbiAgICAgICAgcmVzdWx0ICs9IHRyW3NvdXJjZVtzW2ldXV0gKiAoNTggKiogaSk7XG4gICAgfVxuICAgIHJlc3VsdCA9ICgocmVzdWx0IC0gYWRkKSBeIHhvcik7XG4gICAgcmV0dXJuIHJlc3VsdCA+IDAgJiYgcmVzdWx0IDwgMWU5ID8gcmVzdWx0IDogbnVsbDtcbn1cblxuY29uc3QgUkVfQlZJRDogW3JlZzogUmVnRXhwLCBwcm9jZXNzZXI6IChyZXN1bHQ6IFJlZ0V4cEV4ZWNBcnJheSkgPT4gUHJvbWlzZTxudW1iZXI+IHwgbnVtYmVyXVtdID0gW1xuICAgIFsvKEJWWzAtOWEtekEtWl17MTB9KS9nbWksIChyZXN1bHQpID0+IGRlY29kZShyZXN1bHRbMV0pXSxcbiAgICBbL2F2KFswLTldKykvZ21pLCAocmVzdWx0KSA9PiBwYXJzZUludChyZXN1bHRbMV0sIDEwKV0sXG4gICAgWy9iMjNcXC50dlxcLyhbYS16QS1aMC05XSspL2dtaSwgYXN5bmMgKHJlc3VsdCkgPT4ge1xuICAgICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9iMjMudHYvJHtyZXN1bHRbMV19YDtcbiAgICAgICAgY29uc3QgcmVkaXJlY3Q6IHN0cmluZyA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBzdXBlcmFnZW50LmdldCh1cmwpXG4gICAgICAgICAgICAgICAgLmJ1ZmZlcihmYWxzZSlcbiAgICAgICAgICAgICAgICAuZW5kKChlcnIsIHJlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlcy5yZWRpcmVjdHMubGVuZ3RoID8gcmVzLnJlZGlyZWN0cy5wb3AoKSA6IHVybCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGVjb2RlKHJlZGlyZWN0LnNwbGl0KCd2aWRlby8nKVsxXS5zcGxpdCgnPycpWzBdKTtcbiAgICB9XSxcbl07XG5cbmV4cG9ydCBjb25zdCBhcHBseSA9IChhcHA6IEFwcCkgPT4ge1xuICAgIGFwcC5jb21tYW5kKCdiaWxpYmlsaSA8YXZpZD4nLCB7IGhpZGRlbjogdHJ1ZSB9KVxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSwgYXYpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluZm8gPSBhd2FpdCBzdXBlcmFnZW50LmdldChgaHR0cDovL2FwaS5iaWxpYmlsaS5jb20veC93ZWItaW50ZXJmYWNlL3ZpZXc/YWlkPSR7YXZ9YCk7XG4gICAgICAgICAgICBpZiAoaW5mby5ib2R5LmNvZGUgIT09IDApIHJldHVybjtcbiAgICAgICAgICAgIGF3YWl0IHNlc3Npb24uc2VuZChgYmlsaWJpbGkuY29tL3ZpZGVvL2F2JHthdn1cXG4ke2luZm8uYm9keS5kYXRhLnRpdGxlfVxcbltDUTppbWFnZSxmaWxlPSR7aW5mby5ib2R5LmRhdGEucGljfV1gKTtcbiAgICAgICAgfSk7XG5cbiAgICBhcHAubWlkZGxld2FyZShhc3luYyAoc2Vzc2lvbiwgbmV4dCkgPT4ge1xuICAgICAgICBhd2FpdCBuZXh0KCk7XG4gICAgICAgIGxldCBhdjogbnVtYmVyO1xuICAgICAgICBmb3IgKGNvbnN0IFJFIG9mIFJFX0JWSUQpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IFJFWzBdLmV4ZWMoc2Vzc2lvbi5jb250ZW50KTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBSRVsxXShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hd2FpdC1pbi1sb29wXG4gICAgICAgICAgICAgICAgaWYgKHJlcyBpbnN0YW5jZW9mIFByb21pc2UpIGF2ID0gYXdhaXQgcmVzO1xuICAgICAgICAgICAgICAgIGVsc2UgYXYgPSByZXM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF2KSBhd2FpdCBzZXNzaW9uLmV4ZWN1dGUoYGJpbGliaWxpICR7YXZ9YCk7XG4gICAgfSk7XG59O1xuIiwiaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gJ2tvaXNoaS1jb3JlJztcbmltcG9ydCB7IE9iamVjdElEIH0gZnJvbSAnbW9uZ29kYic7XG5cbmludGVyZmFjZSBCb3R0bGUge1xuICAgIF9pZD86IE9iamVjdElELFxuICAgIGNvbnRlbnQ6IHN0cmluZyxcbiAgICBncm91cElkPzogc3RyaW5nLFxuICAgIHVzZXJJZDogbnVtYmVyLFxuICAgIHBpY2s6IG51bWJlcixcbn1cbmRlY2xhcmUgbW9kdWxlICdrb2lzaGktY29yZScge1xuICAgIGludGVyZmFjZSBUYWJsZXMge1xuICAgICAgICBib3R0bGU6IEJvdHRsZSxcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBhcHBseSA9IChjdHg6IENvbnRleHQpID0+IHtcbiAgICBjdHgub24oJ2Nvbm5lY3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbGwgPSBjdHguZGF0YWJhc2UubW9uZ28uY29sbGVjdGlvbignYm90dGxlJyk7XG5cbiAgICAgICAgY3R4LmNvbW1hbmQoJ2JvdHRsZS50aHJvdyA8Y29udGVudDp0ZXh0PicsICfkuKLmvILmtYHnk7YnLCB7IG5vUmVkaXJlY3Q6IHRydWUgfSlcbiAgICAgICAgICAgIC5hbGlhcygn5Lii5ryC5rWB55O2JylcbiAgICAgICAgICAgIC51c2VyRmllbGRzKFsnaWQnXSlcbiAgICAgICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9LCBjb250ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgY29sbC5pbnNlcnRPbmUoe1xuICAgICAgICAgICAgICAgICAgICBncm91cElkOiBgJHtzZXNzaW9uLnBsYXRmb3JtfToke3Nlc3Npb24uZ3JvdXBJZH1gLFxuICAgICAgICAgICAgICAgICAgICB1c2VySWQ6ICtzZXNzaW9uLnVzZXIuaWQsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQudHJpbSgpLFxuICAgICAgICAgICAgICAgICAgICBwaWNrOiAwLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBg5bey5Lii5Ye644CCKCR7cmVzLmluc2VydGVkSWR9KWA7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBjdHguY29tbWFuZCgnYm90dGxlLnBpY2snLCAn5o2h5ryC5rWB55O2JylcbiAgICAgICAgICAgIC5hbGlhcygn5o2h5ryC5rWB55O2JylcbiAgICAgICAgICAgIC5hY3Rpb24oYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNudCA9IGF3YWl0IGNvbGwuZmluZCh7fSkuY291bnQoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWNudCkgcmV0dXJuICfmsqHmnInmjaHliLAnO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNudCk7XG4gICAgICAgICAgICAgICAgY29uc3QgW3Jlc10gPSBhd2FpdCBjb2xsLmZpbmQoe30pLnNraXAodGFyZ2V0KS5saW1pdCgxKS50b0FycmF5KCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2hvdWxkRGVzdG9yeSA9IE1hdGgucmFuZG9tKCkgPiAwLjU7XG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZERlc3RvcnkpIGF3YWl0IGNvbGwuZGVsZXRlT25lKHsgX2lkOiByZXMuX2lkIH0pO1xuICAgICAgICAgICAgICAgIGVsc2UgYXdhaXQgY29sbC51cGRhdGVPbmUoeyBfaWQ6IHJlcy5faWQgfSwgeyAkaW5jOiB7IHBpY2s6IDEgfSB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYOiiq+aNoei1tyAke3Jlcy5waWNrICsgMX0g5qyhXG7ml7bpl7TvvJoke25ldyBEYXRlKHJlcy5faWQuZ2VuZXJhdGlvblRpbWUgKiAxMDAwKS50b0xvY2FsZVN0cmluZygpfVxu5YaF5a6577yaJHtyZXMuY29udGVudH1gO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgY3R4LmNvbW1hbmQoJ2JvdHRsZS5kZWwgPHF1ZXJ5OnRleHQ+JywgeyBhdXRob3JpdHk6IDUsIGhpZGRlbjogdHJ1ZSB9KVxuICAgICAgICAgICAgLmFjdGlvbihhc3luYyAoXywgcXVlcnkpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXZhbFxuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNvbGwuZGVsZXRlTWFueShKU09OLnBhcnNlKHF1ZXJ5LmRlY29kZSgpKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5kZWxldGVkQ291bnQudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgY3R4LmNvbW1hbmQoJ2JvdHRsZScsICfmvILmtYHnk7YnKTtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1hd2FpdC1pbi1sb29wICovXG5pbXBvcnQgY2hpbGQgZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAndXRpbCc7XG5pbXBvcnQge1xuICAgIENoYW5uZWwsIFVzZXIsIENvbnRleHQsIEdyb3VwTWVtYmVySW5mbywgU2Vzc2lvbiwgTG9nZ2VyLCBUaW1lLCBzZWdtZW50LFxufSBmcm9tICdrb2lzaGktY29yZSc7XG5pbXBvcnQgeyBhcHBseSBhcyBLb2lzaGlQbHVnaW5Db21tb24gfSBmcm9tICdrb2lzaGktcGx1Z2luLWNvbW1vbic7XG5pbXBvcnQgeyBPYmplY3RJRCB9IGZyb20gJ21vbmdvZGInO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgQ1FCb3QgfSBmcm9tICdrb2lzaGktYWRhcHRlci1vbmVib3QnO1xuaW1wb3J0IHsgdGV4dDJwbmcgfSBmcm9tICcuLi9saWIvZ3JhcGgnO1xuaW1wb3J0IHNoZWxsRXhlY3V0ZSBmcm9tICcuLi9saWIvc2hlbGwnO1xuXG5pbnRlcmZhY2UgTWVzc2FnZSB7XG4gICAgX2lkOiBPYmplY3RJRCxcbiAgICB0aW1lOiBEYXRlLFxuICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgICBzZW5kZXI6IG51bWJlcixcbiAgICBncm91cDogc3RyaW5nLFxuICAgIGlkOiBzdHJpbmcsXG59XG5pbnRlcmZhY2UgQ29uZmlnIHtcbiAgICByZWNvcmRNZXNzYWdlPzogYm9vbGVhbixcbiAgICB0aW1lem9uZU9mZnNldD86IG51bWJlcixcbiAgICBwdWJsaWM/OiBzdHJpbmdbXSxcbn1cbmRlY2xhcmUgbW9kdWxlICdrb2lzaGktY29yZScge1xuICAgIGludGVyZmFjZSBDaGFubmVsIHtcbiAgICAgICAgZGlzYWxsb3dlZENvbW1hbmRzOiBzdHJpbmdbXSxcbiAgICAgICAgd2VsY29tZU1zZzogc3RyaW5nLFxuICAgIH1cbiAgICBpbnRlcmZhY2UgVGFibGVzIHtcbiAgICAgICAgbWVzc2FnZTogTWVzc2FnZSxcbiAgICB9XG59XG5DaGFubmVsLmV4dGVuZCgoKSA9PiAoe1xuICAgIGRpc2FsbG93ZWRDb21tYW5kczogW10sXG59KSk7XG5jb25zdCBncm91cE1hcDogUmVjb3JkPG51bWJlciwgW1Byb21pc2U8c3RyaW5nPiwgbnVtYmVyXT4gPSB7fTtcbmNvbnN0IHVzZXJNYXA6IFJlY29yZDxudW1iZXIsIFtzdHJpbmcgfCBQcm9taXNlPHN0cmluZz4sIG51bWJlcl0+ID0ge307XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEdyb3VwTmFtZShzZXNzaW9uOiBTZXNzaW9uKSB7XG4gICAgaWYgKHNlc3Npb24uc3VidHlwZSA9PT0gJ3ByaXZhdGUnKSByZXR1cm4gJ+engeiBiic7XG4gICAgY29uc3QgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBpZCA9IHNlc3Npb24uY2hhbm5lbElkO1xuICAgIGlmICghZ3JvdXBNYXBbaWRdIHx8IHRpbWVzdGFtcCAtIGdyb3VwTWFwW2lkXVsxXSA+PSBUaW1lLmhvdXIpIHtcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IChzZXNzaW9uLmJvdCBhcyBDUUJvdCkuZ2V0R3JvdXAoaWQpLnRoZW4oKGQpID0+IGQuZ3JvdXBOYW1lLCAoKSA9PiBpZCk7XG4gICAgICAgIGdyb3VwTWFwW2lkXSA9IFtwcm9taXNlLCB0aW1lc3RhbXBdO1xuICAgIH1cbiAgICBsZXQgb3V0cHV0ID0gYXdhaXQgZ3JvdXBNYXBbaWRdWzBdO1xuICAgIGlmIChvdXRwdXQgIT09IGAke2lkfWApIG91dHB1dCArPSBgICgke2lkfSlgO1xuICAgIHJldHVybiBvdXRwdXQ7XG59XG5hc3luYyBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKHNlc3Npb246IFNlc3Npb24pIHtcbiAgICBjb25zdCBjb2RlcyA9IHNlZ21lbnQucGFyc2Uoc2Vzc2lvbi5jb250ZW50KTtcbiAgICBsZXQgb3V0cHV0ID0gJyc7XG4gICAgZm9yIChjb25zdCBjb2RlIG9mIGNvZGVzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY29kZSA9PT0gJ3N0cmluZycpIG91dHB1dCArPSBjb2RlO1xuICAgICAgICBlbHNlIGlmIChjb2RlLnR5cGUgPT09ICd0ZXh0Jykgb3V0cHV0ICs9IGNvZGUuZGF0YS5jb250ZW50O1xuICAgICAgICBlbHNlIGlmIChjb2RlLnR5cGUgPT09ICdhdCcpIHtcbiAgICAgICAgICAgIGlmIChjb2RlLmRhdGEucXEgPT09ICdhbGwnKSBvdXRwdXQgKz0gJ0DlhajkvZPmiJDlkZgnO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSBjb2RlLmRhdGEucXE7XG4gICAgICAgICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICBpZiAoIXVzZXJNYXBbaWRdIHx8IHRpbWVzdGFtcCAtIHVzZXJNYXBbaWRdWzFdID49IFRpbWUuaG91cikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9taXNlID0gc2Vzc2lvbi5ib3RcbiAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRHcm91cE1lbWJlcihzZXNzaW9uLmdyb3VwSWQsIGlkKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKGQpID0+IGQubmlja25hbWUgfHwgZC51c2VybmFtZSwgKCkgPT4gaWQpO1xuICAgICAgICAgICAgICAgICAgICB1c2VyTWFwW2lkXSA9IFtwcm9taXNlLCB0aW1lc3RhbXBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gYEAke2F3YWl0IHVzZXJNYXBbaWRdWzBdfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY29kZS50eXBlID09PSAnZmFjZScpIG91dHB1dCArPSBgW2ZhY2UgJHtjb2RlLmRhdGEuaWR9XWA7XG4gICAgICAgIGVsc2UgaWYgKGNvZGUudHlwZSA9PT0gJ2ltYWdlJykge1xuICAgICAgICAgICAgb3V0cHV0ICs9IGBbaW1hZ2UgJHsoY29kZS5kYXRhLnVybCBhcyBzdHJpbmcgfHwgJycpLnNwbGl0KCc/JylbMF19XWA7XG4gICAgICAgIH0gZWxzZSBpZiAoY29kZS50eXBlID09PSAncmVwbHknKSBvdXRwdXQgKz0gYFtyZXBseSAke2NvZGUuZGF0YS5pZH1dYDtcbiAgICAgICAgZWxzZSBvdXRwdXQgKz0gYFske2NvZGUudHlwZX1dYDtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbn1cbmNvbnN0IGNoZWNrR3JvdXBBZG1pbiA9ICh7IHNlc3Npb24gfSkgPT4gKFxuICAgIChzZXNzaW9uLnVzZXIuYXV0aG9yaXR5ID49IDQgfHwgc2Vzc2lvbi5hdXRob3Iucm9sZXMuaW5jbHVkZXMoJ2FkbWluJykgfHwgc2Vzc2lvbi5hdXRob3Iucm9sZXMuaW5jbHVkZXMoJ293bmVyJykpXG4gICAgICAgID8gbnVsbFxuICAgICAgICA6ICfku4XnrqHnkIblkZjlj6/miafooYzor6Xmk43kvZzjgIInXG4pO1xuXG5leHBvcnQgY29uc3QgYXBwbHkgPSAoY3R4OiBDb250ZXh0LCBjb25maWc6IENvbmZpZyA9IHt9KSA9PiB7XG4gICAgY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcignYnVzeWJveCcpO1xuICAgIExvZ2dlci5sZXZlbHMubWVzc2FnZSA9IDM7XG4gICAgVGltZS5zZXRUaW1lem9uZU9mZnNldChjb25maWcudGltZXpvbmVPZmZzZXQgPz8gLTQ4MCk7IC8vIFVUQyArOFxuICAgIGNvbmZpZy5yZWNvcmRNZXNzYWdlID0gY29uZmlnLnJlY29yZE1lc3NhZ2UgPz8gdHJ1ZTtcbiAgICBjdHgucGx1Z2luKEtvaXNoaVBsdWdpbkNvbW1vbiwge30pO1xuXG4gICAgY3R4LmNvbW1hbmQoJ2hlbHAnLCB7IGF1dGhvcml0eTogMSwgaGlkZGVuOiB0cnVlIH0pO1xuICAgIGN0eC5jb21tYW5kKCd0ZXgnLCB7IGF1dGhvcml0eTogMSB9KTtcbiAgICBjdHguY29tbWFuZCgnXycsICfnrqHnkIblt6XlhbcnKTtcblxuICAgIGN0eC5zZWxlY3QoJ2dyb3VwSWQnKS5jb21tYW5kKCdfLmFzc2lnbicsICdhc3NpZ24nLCB7IGF1dGhvcml0eTogNCB9KVxuICAgICAgICAuY2hhbm5lbEZpZWxkcyhbJ2Fzc2lnbmVlJ10pXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9KSA9PiB7XG4gICAgICAgICAgICBzZXNzaW9uLmNoYW5uZWwuYXNzaWduZWUgPSBzZXNzaW9uLnNlbGZJZC50b1N0cmluZygpO1xuICAgICAgICB9KTtcblxuICAgIGN0eC5jb21tYW5kKCdfLmVjaG8gPG1zZzp0ZXh0PicsICdlY2hvJywgeyBub1JlZGlyZWN0OiB0cnVlLCBhdXRob3JpdHk6IDMgfSlcbiAgICAgICAgLmFjdGlvbigoXywgbXNnKSA9PiBtc2cuZGVjb2RlKCkpO1xuXG4gICAgY3R4LmNvbW1hbmQoJ18uZXZhbCA8ZXhwcjp0ZXh0PicsIHsgYXV0aG9yaXR5OiA1LCBub1JlZGlyZWN0OiB0cnVlLCBoaWRkZW46IHRydWUgfSlcbiAgICAgICAgLm9wdGlvbignaScsICdPdXRwdXQgYXMgaW1hZ2UnKVxuICAgICAgICAudXNlckZpZWxkcyhVc2VyLmZpZWxkcylcbiAgICAgICAgLmNoYW5uZWxGaWVsZHMoQ2hhbm5lbC5maWVsZHMpXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uLCBvcHRpb25zIH0sIGlucHV0KSA9PiB7XG4gICAgICAgICAgICBsZXQgcmVzOiBhbnk7XG4gICAgICAgICAgICBjb25zdCBleHByID0gYFxcXG4gICAgICAgIChhc3luYyBmdW5jdGlvbiBmKCkge1xuICAgICAgICAgICAgcmV0dXJuICR7aW5wdXQuZGVjb2RlKCl9XG4gICAgICAgIH0pKClgO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXZhbFxuICAgICAgICAgICAgICAgIHJlcyA9IGF3YWl0IGV2YWwoZXhwcik7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmVzID0gZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG91dHB1dCA9IGluc3BlY3QocmVzLCBmYWxzZSwgMyk7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuaSkgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgICAgIGNvbnN0IHBhZ2UgPSBhd2FpdCBjdHguYXBwLmJyb3dzZXIubmV3UGFnZSgpO1xuICAgICAgICAgICAgY29uc3QgaW1nID0gYXdhaXQgdGV4dDJwbmcocGFnZSwgb3V0cHV0KTtcbiAgICAgICAgICAgIHBhZ2UuY2xvc2UoKTtcbiAgICAgICAgICAgIHJldHVybiBgW0NROiBpbWFnZSwgZmlsZSA9IGJhc2U2NDovLyR7aW1nfV1gO1xuICAgICAgICB9KTtcblxuICAgIGN0eC5jb21tYW5kKCdfLnNoIDxjb21tYW5kOnRleHQ+JywgJ+aJp+ihjHNoZWxs5ZG95LukJywgeyBhdXRob3JpdHk6IDUsIG5vUmVkaXJlY3Q6IHRydWUgfSlcbiAgICAgICAgLm9wdGlvbignaScsICdPdXRwdXQgYXMgaW1hZ2UnKVxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IG9wdGlvbnMgfSwgY21kKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwID0gYXdhaXQgc2hlbGxFeGVjdXRlKGNtZC5kZWNvZGUoKSk7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuaSkgcmV0dXJuIHA7XG4gICAgICAgICAgICBjb25zdCBwYWdlID0gYXdhaXQgY3R4LmFwcC5icm93c2VyLm5ld1BhZ2UoKTtcbiAgICAgICAgICAgIGNvbnN0IGltZyA9IGF3YWl0IHRleHQycG5nKHBhZ2UsIHApO1xuICAgICAgICAgICAgcGFnZS5jbG9zZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGBbQ1E6aW1hZ2UsZmlsZT1iYXNlNjQ6Ly8ke2ltZ31dYDtcbiAgICAgICAgfSk7XG5cbiAgICBjdHguY29tbWFuZCgnXy5zaHV0ZG93bicsICflhbPpl63mnLrlmajkuronLCB7IGF1dGhvcml0eTogNSwgbm9SZWRpcmVjdDogdHJ1ZSB9KVxuICAgICAgICAuYWN0aW9uKCgpID0+IHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5wbV9pZCkgY2hpbGQuZXhlYyhgcG0yIHN0b3AgJHtwcm9jZXNzLmVudi5wbV9pZH1gKTtcbiAgICAgICAgICAgICAgICBlbHNlIHByb2Nlc3MuZXhpdCgwKTtcbiAgICAgICAgICAgIH0sIDMwMDApO1xuICAgICAgICAgICAgcmV0dXJuICdFeGl0aW5nIGluIDMgc2Vjcy4uLic7XG4gICAgICAgIH0pO1xuXG4gICAgY3R4LmNvbW1hbmQoJ18ucmVzdGFydCcsICfph43lkK/mnLrlmajkuronLCB7IGF1dGhvcml0eTogNSwgbm9SZWRpcmVjdDogdHJ1ZSB9KVxuICAgICAgICAuYWN0aW9uKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghcHJvY2Vzcy5lbnYucG1faWQpIHJldHVybiAnQ2Fubm90IHJlc3RhcnQ6IG5vdCBwbTIgZW52aXJvbm1lbnQnO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgY2hpbGQuZXhlYyhgcG0yIHJlc3RhcnQgJHtwcm9jZXNzLmVudi5wbV9pZH1gKTtcbiAgICAgICAgICAgIH0sIDMwMDApO1xuICAgICAgICAgICAgcmV0dXJuICdSZXN0YXJ0aW5nIGluIDMgc2Vjcy4uLic7XG4gICAgICAgIH0pO1xuXG4gICAgY3R4LnNlbGVjdCgncGxhdGZvcm0nKS5jb21tYW5kKCdfLmxlYXZlJywgJ+mAgOWHuuivpee+pCcsIHsgbm9SZWRpcmVjdDogdHJ1ZSB9KVxuICAgICAgICAudXNlckZpZWxkcyhbJ2F1dGhvcml0eSddKVxuICAgICAgICAuY2hlY2soY2hlY2tHcm91cEFkbWluKVxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgKHNlc3Npb24uYm90IGFzIENRQm90KS4kc2V0R3JvdXBMZWF2ZShzZXNzaW9uLmdyb3VwSWQpO1xuICAgICAgICB9KTtcblxuICAgIGN0eC5jb21tYW5kKCdfLnNldFByaXYgPHVzZXJJZD4gPGF1dGhvcml0eT4nLCAn6K6+572u55So5oi35p2D6ZmQJywgeyBhdXRob3JpdHk6IDUsIG5vUmVkaXJlY3Q6IHRydWUgfSlcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0sIHVzZXJJZCwgYXV0aG9yaXR5KSA9PiB7XG4gICAgICAgICAgICBpZiAoYXV0aG9yaXR5ID09PSAnbnVsbCcpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBjdHguZGF0YWJhc2Uuc2V0VXNlcihzZXNzaW9uLnBsYXRmb3JtLCB1c2VySWQsIHsgZmxhZzogVXNlci5GbGFnLmlnbm9yZSB9KTtcbiAgICAgICAgICAgICAgICBhdXRob3JpdHkgPSAnMCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGF3YWl0IGN0eC5kYXRhYmFzZS5zZXRVc2VyKHNlc3Npb24ucGxhdGZvcm0sIHVzZXJJZCwgeyBmbGFnOiAwIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgc2Vzc2lvbi5hcHAuZGF0YWJhc2Uuc2V0VXNlcihcbiAgICAgICAgICAgICAgICBzZXNzaW9uLnBsYXRmb3JtLCB1c2VySWQsIHsgYXV0aG9yaXR5OiArYXV0aG9yaXR5IH0sXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuIGBTZXQgJHtzZXNzaW9uLnBsYXRmb3JtfToke3VzZXJJZH0gdG8gJHthdXRob3JpdHl9YDtcbiAgICAgICAgfSk7XG5cbiAgICBjdHguY29tbWFuZCgnXy5ib2FyZGNhc3QgPG1lc3NhZ2U6dGV4dD4nLCAn5YWo5pyN5bm/5pKtJywgeyBhdXRob3JpdHk6IDUsIG5vUmVkaXJlY3Q6IHRydWUgfSlcbiAgICAgICAgLm9wdGlvbignZm9yY2VkJywgJy1mIOaXoOinhiBzaWxlbnQg5qCH562+6L+b6KGM5bm/5pKtJylcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBvcHRpb25zLCBzZXNzaW9uIH0sIG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgIGlmICghbWVzc2FnZSkgcmV0dXJuICfor7fovpPlhaXopoHlj5HpgIHnmoTmlofmnKzjgIInO1xuICAgICAgICAgICAgbGV0IGdyb3VwcyA9IGF3YWl0IGN0eC5kYXRhYmFzZS5nZXRBc3NpZ25lZENoYW5uZWxzKFsnaWQnLCAnZmxhZyddKTtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5mb3JjZWQpIHtcbiAgICAgICAgICAgICAgICBncm91cHMgPSBncm91cHMuZmlsdGVyKChnKSA9PiAhKGcuZmxhZyAmIENoYW5uZWwuRmxhZy5zaWxlbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdyb3Vwcy5mb3JFYWNoKChncm91cCkgPT4ge1xuICAgICAgICAgICAgICAgIHNlc3Npb24uYm90LnNlbmRNZXNzYWdlKGdyb3VwLmlkLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgIGN0eC5jb21tYW5kKCdjb250ZXh0aWZ5IDxjb21tYW5kOnRleHQ+JywgJ+WcqOeJueWumuS4iuS4i+aWh+S4reinpuWPkeaMh+S7pCcsIHsgYXV0aG9yaXR5OiA0LCBub1JlZGlyZWN0OiB0cnVlIH0pO1xuXG4gICAgY3R4LmNvbW1hbmQoJ18uZGVhY3RpdmF0ZScsICflnKjnvqTlhoXnpoHnlKgnLCB7IG5vUmVkaXJlY3Q6IHRydWUgfSlcbiAgICAgICAgLnVzZXJGaWVsZHMoWydhdXRob3JpdHknXSlcbiAgICAgICAgLmNoZWNrKGNoZWNrR3JvdXBBZG1pbilcbiAgICAgICAgLmNoYW5uZWxGaWVsZHMoWydmbGFnJ10pXG4gICAgICAgIC5hY3Rpb24oKHsgc2Vzc2lvbiB9KSA9PiB7XG4gICAgICAgICAgICBzZXNzaW9uLmNoYW5uZWwuZmxhZyB8PSBDaGFubmVsLkZsYWcuaWdub3JlO1xuICAgICAgICAgICAgcmV0dXJuICdEZWFjdGl2YXRlZCc7XG4gICAgICAgIH0pO1xuXG4gICAgY3R4LmNvbW1hbmQoJ18uYWN0aXZhdGUnLCAn5Zyo576k5YaF5ZCv55SoJywgeyBub1JlZGlyZWN0OiB0cnVlIH0pXG4gICAgICAgIC51c2VyRmllbGRzKFsnYXV0aG9yaXR5J10pXG4gICAgICAgIC5jaGVjayhjaGVja0dyb3VwQWRtaW4pXG4gICAgICAgIC5jaGFubmVsRmllbGRzKFsnZmxhZyddKVxuICAgICAgICAuYWN0aW9uKCh7IHNlc3Npb24gfSkgPT4ge1xuICAgICAgICAgICAgc2Vzc2lvbi5jaGFubmVsLmZsYWcgJj0gfkNoYW5uZWwuRmxhZy5pZ25vcmU7XG4gICAgICAgICAgICByZXR1cm4gJ0FjdGl2YXRlZCc7XG4gICAgICAgIH0pO1xuXG4gICAgY3R4LmNvbW1hbmQoJ18uc3dpdGNoIDxjb21tYW5kPicsICflkK/nlKgv5YGc55So5ZG95LukJywgeyBub1JlZGlyZWN0OiB0cnVlIH0pXG4gICAgICAgIC51c2VyRmllbGRzKFsnYXV0aG9yaXR5J10pXG4gICAgICAgIC5jaGFubmVsRmllbGRzKFsnZGlzYWxsb3dlZENvbW1hbmRzJ10pXG4gICAgICAgIC5jaGVjayhjaGVja0dyb3VwQWRtaW4pXG4gICAgICAgIC5hY3Rpb24oKHsgc2Vzc2lvbiB9LCBjb21tYW5kKSA9PiB7XG4gICAgICAgICAgICBzZXNzaW9uLmNoYW5uZWwuZGlzYWxsb3dlZENvbW1hbmRzID0gc2Vzc2lvbi5jaGFubmVsLmRpc2FsbG93ZWRDb21tYW5kcyB8fCBbXTtcbiAgICAgICAgICAgIGlmIChzZXNzaW9uLmNoYW5uZWwuZGlzYWxsb3dlZENvbW1hbmRzLmluY2x1ZGVzKGNvbW1hbmQpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2V0ID0gbmV3IFNldChzZXNzaW9uLmNoYW5uZWwuZGlzYWxsb3dlZENvbW1hbmRzKTtcbiAgICAgICAgICAgICAgICBzZXQuZGVsZXRlKGNvbW1hbmQpO1xuICAgICAgICAgICAgICAgIHNlc3Npb24uY2hhbm5lbC5kaXNhbGxvd2VkQ29tbWFuZHMgPSBBcnJheS5mcm9tKHNldCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke2NvbW1hbmR9IOWRveS7pOS4uuWQr+eUqOeKtuaAgeOAgmA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXNzaW9uLmNoYW5uZWwuZGlzYWxsb3dlZENvbW1hbmRzLnB1c2goY29tbWFuZCk7XG4gICAgICAgICAgICByZXR1cm4gYCR7Y29tbWFuZH0g5ZG95Luk5Li656aB55So54q25oCB44CCYDtcbiAgICAgICAgfSk7XG5cbiAgICBjdHguY29tbWFuZCgnXy5tdXRlIDx1c2VyPiA8cGVyaW9kU2Vjcz4nLCAn56aB6KiA55So5oi3JywgeyBub1JlZGlyZWN0OiB0cnVlIH0pXG4gICAgICAgIC51c2VyRmllbGRzKFsnYXV0aG9yaXR5J10pXG4gICAgICAgIC5jaGVjayhjaGVja0dyb3VwQWRtaW4pXG4gICAgICAgIC5hY3Rpb24oKHsgc2Vzc2lvbiB9LCB1c2VyLCBzZWNzID0gJzYwMDAwMCcpID0+XG4gICAgICAgICAgICAoc2Vzc2lvbi5ib3QgYXMgQ1FCb3QpLiRzZXRHcm91cEJhbihzZXNzaW9uLmdyb3VwSWQsIHVzZXIsIHBhcnNlSW50KHNlY3MsIDEwKSkpO1xuXG4gICAgY3R4Lm9uKCdtZXNzYWdlJywgYXN5bmMgKHNlc3Npb24pID0+IHtcbiAgICAgICAgY29uc3QgZ3JvdXBOYW1lID0gYXdhaXQgZ2V0R3JvdXBOYW1lKHNlc3Npb24pO1xuICAgICAgICBjb25zdCBzZW5kZXJOYW1lID0gYCR7c2Vzc2lvbi51c2VybmFtZX0oJHtzZXNzaW9uLnVzZXJJZH0pYDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGF3YWl0IGZvcm1hdE1lc3NhZ2Uoc2Vzc2lvbik7XG4gICAgICAgIGxvZ2dlci5pbmZvKGBbJHtncm91cE5hbWV9XSAke3NlbmRlck5hbWV9OiAke21lc3NhZ2V9YCk7XG4gICAgICAgIGlmICghc2Vzc2lvbi5ncm91cElkKSByZXR1cm47XG4gICAgICAgIGlmIChzZXNzaW9uLmNvbnRlbnQgPT09ICc+Xy5hY3RpdmF0ZScpIHtcbiAgICAgICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBjdHguZGF0YWJhc2UuZ2V0VXNlcihzZXNzaW9uLnBsYXRmb3JtLCBzZXNzaW9uLnVzZXJJZCk7XG4gICAgICAgICAgICBpZiAodXNlci5hdXRob3JpdHkgPj0gNCB8fCBzZXNzaW9uLmF1dGhvci5yb2xlcy5pbmNsdWRlcygnYWRtaW4nKSB8fCBzZXNzaW9uLmF1dGhvci5yb2xlcy5pbmNsdWRlcygnb3duZXInKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gYXdhaXQgY3R4LmRhdGFiYXNlLmdldENoYW5uZWwoc2Vzc2lvbi5wbGF0Zm9ybSwgc2Vzc2lvbi5ncm91cElkKTtcbiAgICAgICAgICAgICAgICBjb25zdCBmbGFnID0gZ3JvdXAuZmxhZyAmICh+Q2hhbm5lbC5GbGFnLmlnbm9yZSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgY3R4LmRhdGFiYXNlLnNldENoYW5uZWwoc2Vzc2lvbi5wbGF0Zm9ybSwgc2Vzc2lvbi5ncm91cElkLCB7IGZsYWcgfSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgc2Vzc2lvbi5zZW5kKCdBY3RpdmF0ZWQnKTtcbiAgICAgICAgICAgIH0gZWxzZSBhd2FpdCBzZXNzaW9uLnNlbmQoJ+aCqOayoeacieadg+mZkOaJp+ihjOivpeaTjeS9nCcpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBjdHgub24oJ2JlZm9yZS1zZW5kJywgKHNlc3Npb24pID0+IHtcbiAgICAgICAgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgZ2V0R3JvdXBOYW1lKHNlc3Npb24pLFxuICAgICAgICAgICAgZm9ybWF0TWVzc2FnZShzZXNzaW9uKSxcbiAgICAgICAgXSkudGhlbihcbiAgICAgICAgICAgIChbZ3JvdXBOYW1lLCBtZXNzYWdlXSkgPT4gbG9nZ2VyLmluZm8oYHNlbmQgWyR7Z3JvdXBOYW1lfV0gJHtzZXNzaW9uLnNlbGZJZH06ICR7bWVzc2FnZX1gKSxcbiAgICAgICAgKTtcbiAgICB9KTtcblxuICAgIGN0eC5vbignZ3JvdXAtbWVtYmVyL2JhbicsIChzZXNzaW9uKSA9PiB7XG4gICAgICAgIC8vIFRPRE8gaGFuZGxlIGF1dG8tbGVhdmU/XG4gICAgICAgIGlmIChzZXNzaW9uLnVzZXJJZC50b1N0cmluZygpID09PSBzZXNzaW9uLnNlbGZJZC50b1N0cmluZygpKSBjb25zb2xlLmxvZyhzZXNzaW9uKTtcbiAgICB9KTtcblxuICAgIGN0eC5vbignZ3JvdXAtbWVtYmVyLWFkZGVkJywgYXN5bmMgKHNlc3Npb24pID0+IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHNlc3Npb24uYXBwLmRhdGFiYXNlLmdldENoYW5uZWwoc2Vzc2lvbi5wbGF0Zm9ybSwgc2Vzc2lvbi5ncm91cElkKTtcbiAgICAgICAgbG9nZ2VyLmluZm8oJ0V2ZW50Lkdyb3VwX0luY3JlYXNlJywgc2Vzc2lvbiwgZGF0YSk7XG4gICAgICAgIGlmIChkYXRhLndlbGNvbWVNc2cpIHtcbiAgICAgICAgICAgIGF3YWl0IHNlc3Npb24uc2VuZChkYXRhLndlbGNvbWVNc2cucmVwbGFjZSgvJUAvZ21pLCBgW0NROmF0LHFxPSR7c2Vzc2lvbi51c2VySWR9YCkpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBjdHgub24oJ2dyb3VwLW1lbWJlci1kZWxldGVkJywgYXN5bmMgKHNlc3Npb24pID0+IHtcbiAgICAgICAgY29uc3QgdWRvYyA9IGF3YWl0IGN0eC5kYXRhYmFzZS5nZXRVc2VyKHNlc3Npb24ucGxhdGZvcm0sIHNlc3Npb24udXNlcklkKTtcbiAgICAgICAgbG9nZ2VyLmluZm8oJ0V2ZW50Lkdyb3VwX0RlY3JlYXNlJywgc2Vzc2lvbiwgdWRvYyk7XG4gICAgICAgIHNlc3Npb24uc2VuZChgJHtzZXNzaW9uLnVzZXJuYW1lfSDpgIDlh7rkuobnvqTogYrjgIJgKTtcbiAgICB9KTtcblxuICAgIGN0eC5vbignYmVmb3JlLWNvbW1hbmQnLCAoeyBzZXNzaW9uLCBjb21tYW5kIH0pID0+IHtcbiAgICAgICAgaWYgKCFzZXNzaW9uLmNoYW5uZWwpIHJldHVybjtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAoKHNlc3Npb24uY2hhbm5lbC5kaXNhbGxvd2VkQ29tbWFuZHMgfHwgW10pLmluY2x1ZGVzKGNvbW1hbmQubmFtZSkpIHJldHVybiAnJztcbiAgICB9KTtcblxuICAgIGN0eC5vbignYmVmb3JlLWF0dGFjaC11c2VyJywgKHNlc3Npb24sIGZpZWxkcykgPT4ge1xuICAgICAgICBmaWVsZHMuYWRkKCdpZCcpO1xuICAgIH0pO1xuXG4gICAgY3R4Lm9uKCdiZWZvcmUtYXR0YWNoLWNoYW5uZWwnLCAoc2Vzc2lvbiwgZmllbGRzKSA9PiB7XG4gICAgICAgIGZpZWxkcy5hZGQoJ2Rpc2FsbG93ZWRDb21tYW5kcycpO1xuICAgIH0pO1xuXG4gICAgY3R4LmFwcC5vbignZnJpZW5kLXJlcXVlc3QnLCAoc2Vzc2lvbikgPT4gKHNlc3Npb24uYm90IGFzIENRQm90KS4kc2V0RnJpZW5kQWRkUmVxdWVzdChzZXNzaW9uLm1lc3NhZ2VJZCwgdHJ1ZSkpO1xuICAgIGN0eC5hcHAub24oJ2dyb3VwLXJlcXVlc3QnLCBhc3luYyAoc2Vzc2lvbikgPT4ge1xuICAgICAgICBjb25zdCB1ZG9jID0gYXdhaXQgY3R4LmRhdGFiYXNlLmdldFVzZXIoc2Vzc2lvbi5wbGF0Zm9ybSwgc2Vzc2lvbi51c2VySWQpO1xuICAgICAgICBpZiAoKGNvbmZpZy5wdWJsaWMgfHwgW10pLmluY2x1ZGVzKGAke3Nlc3Npb24ucGxhdGZvcm19OiR7c2Vzc2lvbi5zZWxmSWR9YCkgfHwgdWRvYz8uYXV0aG9yaXR5ID09PSA1KSB7XG4gICAgICAgICAgICBsb2dnZXIuaW5mbygnQXBwcm92ZSBJbnZpdGUgUmVxdWVzdCcsIHNlc3Npb24sIHVkb2MpO1xuICAgICAgICAgICAgKHNlc3Npb24uYm90IGFzIENRQm90KS4kc2V0R3JvdXBBZGRSZXF1ZXN0KHNlc3Npb24ubWVzc2FnZUlkLCBzZXNzaW9uLnN1YnR5cGUsIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ0RlbmllZCBJbnZpdGUgUmVxdWVzdCcsIHNlc3Npb24sIHVkb2MpO1xuICAgICAgICAgICAgKHNlc3Npb24uYm90IGFzIENRQm90KS4kc2V0R3JvdXBBZGRSZXF1ZXN0KHNlc3Npb24ubWVzc2FnZUlkLCBzZXNzaW9uLnN1YnR5cGUsIGZhbHNlLCAn5q2k6LSm5Y+35LiN5a+55aSW5byA5pS+77yM6K+35L2/55So5YW25LuW6LSm5Y+344CCJyk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGN0eC5vbignY29ubmVjdCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgYyA9IGN0eC5kYXRhYmFzZS5tb25nby5jb2xsZWN0aW9uKCdtZXNzYWdlJyk7XG5cbiAgICAgICAgbG9nZ2VyLmluZm8oJ0Vuc3VyaW5nIGluZGV4Li4uJyk7XG4gICAgICAgIGF3YWl0IGMuY3JlYXRlSW5kZXgoeyB0aW1lOiAtMSwgZ3JvdXA6IDEsIHVzZXI6IDEgfSk7XG4gICAgICAgIGxvZ2dlci5pbmZvKCdEb25lLicpO1xuXG4gICAgICAgIGN0eC5jb21tYW5kKCdfLnJlY2FsbCcsICfmkqTlm57mtojmga8nKVxuICAgICAgICAgICAgLnVzZXJGaWVsZHMoWydhdXRob3JpdHknXSlcbiAgICAgICAgICAgIC5jaGVjayhjaGVja0dyb3VwQWRtaW4pXG4gICAgICAgICAgICAub3B0aW9uKCdjb3VudCcsICctYyA8Y291bnQ+IOaVsOmHjycsIHsgZmFsbGJhY2s6IDEgfSlcbiAgICAgICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiwgb3B0aW9ucyB9KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZiA9IGF3YWl0IHNlc3Npb24uYXBwLmRhdGFiYXNlLmdldFVzZXIoc2Vzc2lvbi5wbGF0Zm9ybSwgc2Vzc2lvbi5zZWxmSWQudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbXNncyA9IGF3YWl0IGMuZmluZCh7IGdyb3VwOiBzZXNzaW9uLmdyb3VwSWQsIHNlbmRlcjogK3NlbGYuaWQgfSkuc29ydCh7IHRpbWU6IC0xIH0pLmxpbWl0KG9wdGlvbnMuY291bnQpLnRvQXJyYXkoKTtcbiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbygnZGVsZXRpbmcgbWVzc2FnZTogJW8nLCBtc2dzKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG1zZyBvZiBtc2dzKSBhd2FpdCBzZXNzaW9uLmJvdC5kZWxldGVNZXNzYWdlKHNlc3Npb24uZ3JvdXBJZCwgbXNnLmlkKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGN0eC5jb21tYW5kKCdfLnN0YXQgW2R1cmF0aW9uXScsICdzdGF0JylcbiAgICAgICAgICAgIC5vcHRpb24oJ3RvdGFsJywgJy10IFRvdGFsJylcbiAgICAgICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiwgb3B0aW9ucyB9LCBkdXJhdGlvbiA9ICcxZGF5JykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IFssIG4gPSAnMScsIGFdID0gLyhcXGQrKT8oXFx3KykvLmV4ZWMoZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gYCR7c2Vzc2lvbi5wbGF0Zm9ybX06JHtzZXNzaW9uLmdyb3VwSWR9YDtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gYXdhaXQgc2Vzc2lvbi5hcHAuZGF0YWJhc2UuZ2V0VXNlcihzZXNzaW9uLnBsYXRmb3JtLCBzZXNzaW9uLnNlbGZJZC50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lID0gb3B0aW9ucy50b3RhbCA/IHt9IDogeyB0aW1lOiB7ICRndDogbW9tZW50KCkuYWRkKC1uLCBhIGFzIGFueSkudG9EYXRlKCkgfSB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvdGFsU2VuZENvdW50ID0gYXdhaXQgYy5maW5kKHsgLi4udGltZSwgc2VuZGVyOiArc2VsZi5pZCB9KS5jb3VudCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwU2VuZENvdW50ID0gYXdhaXQgYy5maW5kKHsgLi4udGltZSwgZ3JvdXAsIHNlbmRlcjogK3NlbGYuaWQgfSkuY291bnQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0b3RhbFJlY2VpdmVDb3VudCA9IGF3YWl0IGMuZmluZCh7IC4uLnRpbWUsIHNlbmRlcjogeyAkbmU6ICtzZWxmLmlkIH0gfSkuY291bnQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBncm91cFJlY2VpdmVDb3VudCA9IGF3YWl0IGMuZmluZCh7IC4uLnRpbWUsIGdyb3VwLCBzZW5kZXI6IHsgJG5lOiArc2VsZi5pZCB9IH0pLmNvdW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGDnu5/orqHkv6Hmga8ke29wdGlvbnMudG90YWwgPyAn77yI5oC76K6h77yJJyA6IGDvvIgke2R1cmF0aW9ufe+8iWB9XG7lj5HpgIHmtojmga8ke3RvdGFsU2VuZENvdW50feadoe+8jOacrOe+pCR7Z3JvdXBTZW5kQ291bnR95p2h44CCXG7mlLbliLDmtojmga8ke3RvdGFsUmVjZWl2ZUNvdW50feadoe+8jOacrOe+pCR7Z3JvdXBSZWNlaXZlQ291bnR95p2h44CCYDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGN0eC5jb21tYW5kKCdfLnJhbmsgW2R1cmF0aW9uXScsICdyYW5rJylcbiAgICAgICAgICAgIC5vcHRpb24oJ3RvdGFsJywgJ1RvdGFsJylcbiAgICAgICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiwgb3B0aW9ucyB9LCBkdXJhdGlvbiA9ICcxZGF5JykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IFssIG4gPSAnMScsIGFdID0gLyhcXGQrKT8oXFx3KykvLmV4ZWMoZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gYCR7c2Vzc2lvbi5wbGF0Zm9ybX06JHtzZXNzaW9uLmdyb3VwSWR9YDtcbiAgICAgICAgICAgICAgICBjb25zdCAkbWF0Y2ggPSBvcHRpb25zLnRvdGFsXG4gICAgICAgICAgICAgICAgICAgID8geyBncm91cCB9XG4gICAgICAgICAgICAgICAgICAgIDogeyB0aW1lOiB7ICRndDogbW9tZW50KCkuYWRkKC1uLCBhIGFzIGFueSkudG9EYXRlKCkgfSwgZ3JvdXAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjLmFnZ3JlZ2F0ZShbXG4gICAgICAgICAgICAgICAgICAgIHsgJG1hdGNoIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgJGdyb3VwOiB7IF9pZDogJyRzZW5kZXInLCBjb3VudDogeyAkc3VtOiAxIH0gfSB9LFxuICAgICAgICAgICAgICAgICAgICB7ICRzb3J0OiB7IGNvdW50OiAtMSB9IH0sXG4gICAgICAgICAgICAgICAgICAgIHsgJGxpbWl0OiAxMCB9LFxuICAgICAgICAgICAgICAgIF0pLnRvQXJyYXkoKSBhcyB1bmtub3duIGFzIGFueTtcbiAgICAgICAgICAgICAgICBjb25zdCB1ZG9jcyA9IGF3YWl0IHNlc3Npb24uYXBwLmRhdGFiYXNlLmdldFVzZXIoJ2lkJywgcmVzdWx0Lm1hcCgocikgPT4gci5faWQpLCBbc2Vzc2lvbi5wbGF0Zm9ybSwgJ25hbWUnXSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdWRpY3Q6IFJlY29yZDxudW1iZXIsIFBpY2s8R3JvdXBNZW1iZXJJbmZvLCAnbmlja25hbWUnIHwgJ3VzZXJuYW1lJz4+ID0ge307XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IHJlc3VsdFtpXTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVkaWN0W3IuX2lkXSA9IGF3YWl0IHNlc3Npb24uYm90LmdldEdyb3VwTWVtYmVyKHNlc3Npb24uZ3JvdXBJZCwgdWRvY3NbaV1bc2Vzc2lvbi5wbGF0Zm9ybV0pO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1ZGljdFtyLl9pZF0gPSB7IHVzZXJuYW1lOiB1ZG9jc1tpXT8ubmFtZSB8fCByLl9pZCwgbmlja25hbWU6ICcnIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBcXFxu576k5oiQ5ZGY5Y+R6KiA5o6S6KGMJHtvcHRpb25zLnRvdGFsID8gJ++8iOWFseiuoe+8iScgOiBg77yIJHtkdXJhdGlvbn3vvIlgfVxuJHtyZXN1bHQubWFwKChyKSA9PiBgJHt1ZGljdFtyLl9pZF0ubmlja25hbWUgfHwgdWRpY3Rbci5faWRdLnVzZXJuYW1lfSAke3IuY291bnR95p2hYCkuam9pbignXFxuJyl9YDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChjb25maWcucmVjb3JkTWVzc2FnZSkge1xuICAgICAgICAgICAgY3R4Lm1pZGRsZXdhcmUoKHNlc3Npb24sIG5leHQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXNlc3Npb24uZ3JvdXBJZCkgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBncm91cCA9IGAke3Nlc3Npb24ucGxhdGZvcm19OiR7c2Vzc2lvbi5ncm91cElkfWA7XG4gICAgICAgICAgICAgICAgYy5pbnNlcnRPbmUoe1xuICAgICAgICAgICAgICAgICAgICBncm91cCxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogc2Vzc2lvbi5jb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIHNlbmRlcjogc2Vzc2lvbi51c2VyLmlkLFxuICAgICAgICAgICAgICAgICAgICB0aW1lOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICAgICAgICBpZDogc2Vzc2lvbi5tZXNzYWdlSWQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY3R4Lm9uKCdzZW5kJywgYXN5bmMgKHNlc3Npb24pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXNlc3Npb24uZ3JvdXBJZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gYCR7c2Vzc2lvbi5wbGF0Zm9ybX06JHtzZXNzaW9uLmdyb3VwSWR9YDtcbiAgICAgICAgICAgICAgICBjb25zdCB1ZG9jID0gYXdhaXQgc2Vzc2lvbi5hcHAuZGF0YWJhc2UuZ2V0VXNlcihzZXNzaW9uLnBsYXRmb3JtLCBzZXNzaW9uLnNlbGZJZC50b1N0cmluZygpLCBbJ2lkJ10pO1xuICAgICAgICAgICAgICAgIGMuaW5zZXJ0T25lKHtcbiAgICAgICAgICAgICAgICAgICAgdGltZTogbmV3IERhdGUoKSxcbiAgICAgICAgICAgICAgICAgICAgc2VuZGVyOiArdWRvYy5pZCxcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHNlc3Npb24uY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHNlc3Npb24ubWVzc2FnZUlkLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG4iLCJpbXBvcnQgeyBDb250ZXh0IH0gZnJvbSAna29pc2hpLWNvcmUnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5KGN0eDogQ29udGV4dCkge1xuICAgIGN0eC5jb21tYW5kKCd0b29scy9jYWxjIDxleHByOnRleHQ+JywgJ2NhbGMnLCB7IG1pbkludGVydmFsOiAyMDAwIH0pXG4gICAgICAgIC5zaG9ydGN1dCgvXlxcPyhbXFxzXFxTXSspJC8sIHsgYXJnczogWyckMSddIH0pXG4gICAgICAgIC5vcHRpb24oJ2Z1bGwnLCAnLWYsIC0tZnVsbCBmdWxsIG91dHB1dCcpXG4gICAgICAgIC5vcHRpb24oJ3JhdycsICctciwgLS1yYXcgcmF3IGlucHV0JywgeyBhdXRob3JpdHk6IDUgfSlcbiAgICAgICAgLmV4YW1wbGUoJ2NhbGMgMSsxJylcbiAgICAgICAgLmV4YW1wbGUoJ2NhbGMgU29sdmVbeF4yKzE9PTAse3h9XScpXG4gICAgICAgIC5leGFtcGxlKCdjYWxjIEZhY3RvckludGVnZXJbMjMzMzMzXScpXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiwgb3B0aW9ucyB9LCBleHByKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGE6IHN2ZyB9ID0gYXdhaXQgYXhpb3MucG9zdCgnaHR0cDovLzEyNy4wLjAuMToxMDM3OC8nLCB7XG4gICAgICAgICAgICAgICAgcmF3OiBvcHRpb25zLnJhdyA/ICcxJyA6IG51bGwsIGlucHV0OiBleHByLmRlY29kZSgpLCB0eXBlOiBvcHRpb25zLmZ1bGwgPyAnSW1hZ2UnIDogJ1Jlc3VsdCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghc3ZnLnN0YXJ0c1dpdGgoJzw/eG1sJykpIHJldHVybiBzdmc7XG4gICAgICAgICAgICBjb25zdCBwYWdlID0gYXdhaXQgc2Vzc2lvbi5hcHAuYnJvd3Nlci5uZXdQYWdlKCk7XG4gICAgICAgICAgICBhd2FpdCBwYWdlLnNldENvbnRlbnQoc3ZnKTtcbiAgICAgICAgICAgIGNvbnN0IGVsZSA9IGF3YWl0IHBhZ2UuJCgnc3ZnJyk7XG4gICAgICAgICAgICBjb25zdCBidWZmZXIgPSBhd2FpdCBwYWdlLnNjcmVlbnNob3Qoe1xuICAgICAgICAgICAgICAgIGNsaXA6IGF3YWl0IGVsZS5ib3VuZGluZ0JveCgpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwYWdlLmNsb3NlKCk7XG4gICAgICAgICAgICByZXR1cm4gYFtDUTppbWFnZSxmaWxlPWJhc2U2NDovLyR7YnVmZmVyLnRvU3RyaW5nKCdiYXNlNjQnKX1dYDtcbiAgICAgICAgfSk7XG5cbiAgICBjdHguY29tbWFuZCgndG9vbHMvY2FsYy56ZWJyYSA8aW1hZ2U6aW1hZ2U+JywgJ0hvcnNlIHRvIFplYnJhJywgeyBtaW5JbnRlcnZhbDogMjAwMCB9KTtcbn1cbiIsImltcG9ydCB7IEFwcCB9IGZyb20gJ2tvaXNoaS1jb3JlJztcbmltcG9ydCBzdXBlcmFnZW50IGZyb20gJ3N1cGVyYWdlbnQnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAnbG9kYXNoJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5KGFwcDogQXBwKSB7XG4gICAgYXBwLmNvbW1hbmQoJ29pJywgJ09JIHJlbGF0ZWQnKTtcbiAgICBhcHAuY29tbWFuZCgnb2kvY2YnLCAnQ29kZWZvcmNlcycpO1xuXG4gICAgYXBwLmNvbW1hbmQoJ29pL2NmLnVzZXIgPG5hbWU+JywgJ0NvZGVmb3JjZXMgVXNlcicsIHsgbWluSW50ZXJ2YWw6IDMwMDAgfSlcbiAgICAgICAgLmFjdGlvbihhc3luYyAoXywgbmFtZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgc3VwZXJhZ2VudC5nZXQoYGh0dHBzOi8vY29kZWZvcmNlcy5jb20vYXBpL3VzZXIuaW5mbz9oYW5kbGVzPSR7bmFtZX1gKS5jYXRjaCgoKSA9PiB7IH0pO1xuICAgICAgICAgICAgaWYgKCFyZXMpIHJldHVybiAnQ0Yg5oyC5LqG77yBJztcbiAgICAgICAgICAgIGlmIChyZXMuYm9keS5zdGF0dXMgPT09ICdGQUlMRUQnKSByZXR1cm4gJ+ayoei/meS4quS6uiEnO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVzLmJvZHkucmVzdWx0WzBdO1xuICAgICAgICAgICAgcmV0dXJuIGAke3Jlc3VsdC5oYW5kbGV9ICR7cmVzdWx0LmZpcnN0TmFtZSB8fCAnJ30gJHtyZXN1bHQubGFzdE5hbWUgfHwgJyd9ICR7cmVzdWx0Lm9yZ2FuaXphdGlvbiB8fCAnJ31cbltDUTppbWFnZSxmaWxlPWh0dHBzOiR7cmVzdWx0LmF2YXRhcn1dXG5SYXRpbmc6ICR7cmVzdWx0LnJhdGluZ31cblJhbms6ICR7cmVzdWx0LnJhbmt9XG5NYXhSYXRpbmc6ICR7cmVzdWx0Lm1heFJhdGluZ31cbk1heFJhbms6ICR7cmVzdWx0Lm1heFJhbmt9YDtcbiAgICAgICAgfSk7XG5cbiAgICBhcHAuY29tbWFuZCgnb2kvY2YuY29udGVzdCcsICdDb2RlZm9yY2VzIENvbnRlc3QnLCB7IG1pbkludGVydmFsOiAzMDAwIH0pXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgc3VwZXJhZ2VudC5nZXQoJ2h0dHBzOi8vY29kZWZvcmNlcy5jb20vYXBpL2NvbnRlc3QubGlzdCcpLmNhdGNoKCgpID0+IHsgfSk7XG4gICAgICAgICAgICBpZiAoIXJlcyB8fCByZXMuYm9keS5zdGF0dXMgIT09ICdPSycpIHJldHVybiAnQ0Yg5oyC5LqG77yBJztcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICAgICAgY29uc3QgY29udGVzdHMgPSBmaWx0ZXIoXG4gICAgICAgICAgICAgICAgcmVzLmJvZHkucmVzdWx0LFxuICAgICAgICAgICAgICAgIChjb250ZXN0KSA9PiBjb250ZXN0LnN0YXJ0VGltZVNlY29uZHMgKiAxMDAwID4gbm93LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGxldCBtZXNzYWdlID0gJ+acgOi/keeahOavlOi1m++8mlxcbic7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gY29udGVzdHMubGVuZ3RoIC0gMTsgaSA+PSBNYXRoLm1heChjb250ZXN0cy5sZW5ndGggLSA1LCAwKTsgaS0tKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IGNvbnRlc3RzW2ldO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gYCR7Yy5uYW1lfSAke25ldyBEYXRlKGMuc3RhcnRUaW1lU2Vjb25kcyAqIDEwMDApLnRvTG9jYWxlU3RyaW5nKCl9XFxuYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgICB9KTtcbn1cbiIsImltcG9ydCB7IEFwcCB9IGZyb20gJ2tvaXNoaS1jb3JlJztcbmltcG9ydCBzdXBlcmFnZW50IGZyb20gJ3N1cGVyYWdlbnQnO1xuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHkoYXBwOiBBcHApIHtcbiAgICBhcHAuY29tbWFuZCgnZ2l0aHViL2RyZXNzIDxwYXRoPicsICdrb21laWppLXNhdG9yaS9EcmVzcycpXG4gICAgICAgIC5leGFtcGxlKCdkcmVzcyB3dXhpYW51Y3cvMDAxLmpwZycpXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9LCBpZCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwID0gYXdhaXQgc3VwZXJhZ2VudC5nZXQoYGh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9naC9rb21laWppLXNhdG9yaS9EcmVzcy8ke2lkfWApLmJ1ZmZlcigpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHNlc3Npb24uc2VuZChgW0NROmltYWdlLGZpbGU9YmFzZTY0Oi8vJHtyZXNwLmJvZHkudG9TdHJpbmcoJ2Jhc2U2NCcpfV1gKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbn1cbiIsImltcG9ydCB7IEFwcCwgVXNlciwgU2Vzc2lvbiB9IGZyb20gJ2tvaXNoaS1jb3JlJztcbmltcG9ydCB7IEl0ZW1zLCBJdGVtTWV0YSB9IGZyb20gJy4uL2xpYi9pdGVtJztcblxuZXhwb3J0IGludGVyZmFjZSBTbG90PFQgZXh0ZW5kcyBzdHJpbmc+IHtcbiAgICBpZDogVCxcbiAgICBjb3VudDogbnVtYmVyLFxuICAgIG1ldGE6IEl0ZW1NZXRhW1RdLFxufVxuXG5kZWNsYXJlIG1vZHVsZSAna29pc2hpLWNvcmUnIHtcbiAgICBpbnRlcmZhY2UgVXNlciB7XG4gICAgICAgIGNvaW46IG51bWJlcixcbiAgICAgICAgYmFja3BhY2s6IFNsb3Q8YW55PltdLFxuICAgIH1cbn1cblxuVXNlci5leHRlbmQoKCkgPT4gKHtcbiAgICBjb2luOiAwLFxuICAgIGJhY2twYWNrOiBbXSxcbn0pKTtcblxuZnVuY3Rpb24gc3VtKC4uLmFyZ3M6IG51bWJlcltdKSB7XG4gICAgbGV0IHJlc3VsdCA9IDA7XG4gICAgZm9yIChjb25zdCBhcmcgb2YgYXJncykgcmVzdWx0ICs9IGFyZztcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHkoYXBwOiBBcHApIHtcbiAgICBhcHAuY29tbWFuZCgncHJvcGVydHknLCAn6LSi5Lqn57O757ufJyk7XG5cbiAgICBhcHAuY29tbWFuZCgncHJvcGVydHkvYmFja3BhY2snLCAn6IOM5YyFJylcbiAgICAgICAgLnVzZXJGaWVsZHMoWydiYWNrcGFjayddKVxuICAgICAgICAuYWN0aW9uKCh7IHNlc3Npb24gfSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFzZXNzaW9uLnVzZXIuYmFja3BhY2subGVuZ3RoKSByZXR1cm4gJ+S9oOeahOiDjOWMheaYr+epuueahO+8gSc7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIGDkvaDnmoTog4zljIXlhbEke3N1bSguLi5zZXNzaW9uLnVzZXIuYmFja3BhY2subWFwKChzbG90KSA9PiBzbG90LmNvdW50KSl95Liq54mp5ZOB44CCYCxcbiAgICAgICAgICAgICAgICAuLi5zZXNzaW9uLnVzZXIuYmFja3BhY2subWFwKChzbG90KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBJdGVtc1tzbG90LmlkXSB8fCBJdGVtcy5mYWxsYmFjaztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke2l0ZW0ubmFtZX0gKiAke3Nsb3QuY291bnR9YDtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF0uam9pbignXFxuJyk7XG4gICAgICAgIH0pO1xuXG4gICAgYXBwLmNvbW1hbmQoJ3Byb3BlcnR5L2NoZWNraW4nLCAn562+5YiwJywgeyBtYXhVc2FnZTogMSB9KVxuICAgICAgICAuc2hvcnRjdXQoJ+etvuWIsCcsIHsgcHJlZml4OiBmYWxzZSB9KVxuICAgICAgICAudXNlckZpZWxkcyhbJ2NvaW4nXSlcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFkZCA9IDIwICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xuICAgICAgICAgICAgc2Vzc2lvbi51c2VyLmNvaW4gKz0gYWRkO1xuICAgICAgICAgICAgcmV0dXJuIGDnrb7liLDmiJDlip/vvIzojrflvpcke2FkZH3kuKrnoazluIHvvIjlhbHmnIkke3Nlc3Npb24udXNlci5jb2lufeS4qu+8iWA7XG4gICAgICAgIH0pO1xuXG4gICAgYXBwLmNvbW1hbmQoJ3Byb3BlcnR5L3BheSA8dGFyZ2V0VXNlcklkPiA8Y291bnQ+JywgJ+i9rOi0picsIHsgbm9SZWRpcmVjdDogdHJ1ZSB9KVxuICAgICAgICAudXNlckZpZWxkcyhbJ2NvaW4nXSlcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0sIHRhcmdldCwgY291bnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBwYXJzZUludChjb3VudCwgMTApO1xuICAgICAgICAgICAgaWYgKCEoTnVtYmVyLmlzU2FmZUludGVnZXIobikgJiYgbiA+IDApKSByZXR1cm4gJ+S4jeWQiOazleeahOaVsOWAvOOAgic7XG4gICAgICAgICAgICBpZiAoc2Vzc2lvbi51c2VyLmNvaW4gPCBuKSByZXR1cm4gJ+S9oOayoeaciei2s+Wkn+eahOehrOW4geOAgic7XG4gICAgICAgICAgICBpZiAoIXRhcmdldCkgcmV0dXJuICfmnKrmjIflrprnm67moIfjgIInO1xuICAgICAgICAgICAgY29uc3QgbmV3U2Vzc2lvbiA9IG5ldyBTZXNzaW9uKGFwcCwgc2Vzc2lvbik7XG4gICAgICAgICAgICBuZXdTZXNzaW9uLnVzZXJJZCA9IHRhcmdldDtcbiAgICAgICAgICAgIG5ld1Nlc3Npb24uYXV0aG9yLnVzZXJJZCA9IHRhcmdldDtcbiAgICAgICAgICAgIGRlbGV0ZSBuZXdTZXNzaW9uLnVzZXI7XG4gICAgICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgbmV3U2Vzc2lvbi5vYnNlcnZlVXNlcihbJ2NvaW4nXSk7XG4gICAgICAgICAgICBzZXNzaW9uLnVzZXIuY29pbiAtPSBuO1xuICAgICAgICAgICAgdXNlci5jb2luICs9IG47XG4gICAgICAgICAgICBhd2FpdCBuZXdTZXNzaW9uLnVzZXIuX3VwZGF0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGDlt7LovazotKYke2595Liq56Gs5biB44CCYDtcbiAgICAgICAgfSk7XG59XG4iLCJpbXBvcnQgeyBDb250ZXh0LCBDaGFubmVsLCBVc2VyIH0gZnJvbSAna29pc2hpLWNvcmUnO1xuaW1wb3J0IHsgYXBwbHkgYXMgS29pc2hpUGx1Z2luRXZhbCwgQ29uZmlnIGFzIEtvaXNoaVBsdWdpbkV2YWxDb25maWcgfSBmcm9tICdrb2lzaGktcGx1Z2luLWV2YWwnO1xuaW1wb3J0IHsgc2xlZXAgfSBmcm9tICdrb2lzaGktdXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHkoY3R4OiBDb250ZXh0LCBjb25maWc6IEtvaXNoaVBsdWdpbkV2YWxDb25maWcpIHtcbiAgICBjdHgucGx1Z2luKEtvaXNoaVBsdWdpbkV2YWwsIGNvbmZpZyk7XG5cbiAgICBjdHguY29tbWFuZCgnZXZhbHVhdGUnKVxuICAgICAgICAub3B0aW9uKCdpJywgJ091dHB1dCBhcyBpbWFnZScsIHsgaGlkZGVuOiB0cnVlIH0pXG4gICAgICAgIC51c2VyRmllbGRzKFVzZXIuZmllbGRzKVxuICAgICAgICAuY2hhbm5lbEZpZWxkcyhDaGFubmVsLmZpZWxkcylcbiAgICAgICAgLmNoZWNrKCh7IHNlc3Npb24gfSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFzZXNzaW9uLl9zdWRvKSByZXR1cm47XG4gICAgICAgICAgICBjb25zdCBjbWQgPSBzZXNzaW9uLmFyZ3YuYXJnc1swXS5yZXBsYWNlKCdldmFsICcsICcnKTtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGlmIChzZXNzaW9uLmFyZ3Yub3B0aW9ucy5pKSBzZXNzaW9uLmV4ZWN1dGUoYF8uZXZhbCAtaSAke2NtZH1gKTtcbiAgICAgICAgICAgIHNlc3Npb24uZXhlY3V0ZShgXy5ldmFsICR7Y21kfWApO1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9KTtcblxuICAgIGN0eC5jb21tYW5kKCdAJywgJ3V0aWxzJywgeyBoaWRkZW46IHRydWUgfSk7XG4gICAgY3R4LmNvbW1hbmQoJ0Auc2lsZW50IDxjb21tYW5kOnRleHQ+JywgeyBoaWRkZW46IHRydWUgfSlcbiAgICAgICAgLmFjdGlvbigoeyBzZXNzaW9uIH0sIGNvbW1hbmQpID0+IHNlc3Npb24uZXhlY3V0ZVNpbGVudChjb21tYW5kKSk7XG4gICAgY3R4LmNvbW1hbmQoJ0Auc2xlZXAgPGR1cmF0aW9uPiA8Y29tbWFuZDp0ZXh0PicsIHsgaGlkZGVuOiB0cnVlIH0pXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9LCBfZHVyYXRpb24sIGNvbW1hbmQpID0+IHtcbiAgICAgICAgICAgIGxldCBkdXJhdGlvbiA9IE1hdGgubWluKDEwMDAwLCArX2R1cmF0aW9uKTtcbiAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOYU4oZHVyYXRpb24pIHx8ICFkdXJhdGlvbikgZHVyYXRpb24gPSAwO1xuICAgICAgICAgICAgYXdhaXQgc2xlZXAoZHVyYXRpb24pO1xuICAgICAgICAgICAgYXdhaXQgc2Vzc2lvbi5leGVjdXRlKGNvbW1hbmQpO1xuICAgICAgICB9KTtcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLWVtcHR5LWZ1bmN0aW9uICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuaW1wb3J0ICogYXMgc3VwZXJhZ2VudCBmcm9tICdzdXBlcmFnZW50JztcbmltcG9ydCBwcm94eSBmcm9tICdzdXBlcmFnZW50LXByb3h5JztcbmltcG9ydCB7IEFwcCwgUGxhdGZvcm0sIFNlc3Npb24gfSBmcm9tICdrb2lzaGktY29yZSc7XG5pbXBvcnQgeyBMb2dnZXIsIHNlZ21lbnQgfSBmcm9tICdrb2lzaGktdXRpbHMnO1xuaW1wb3J0IHsgQnJvd3NlciB9IGZyb20gJ3B1cHBldGVlcic7XG5cbnByb3h5KHN1cGVyYWdlbnQpO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcignZ2l0aHViJyk7XG5jbGFzcyBJbnZhbGlkVG9rZW5FcnJvciBleHRlbmRzIEVycm9yIHsgfVxuaW50ZXJmYWNlIEdpdGh1YlRva2VuIHtcbiAgICBhY2Nlc3NfdG9rZW46IHN0cmluZyxcbiAgICByZWZyZXNoX3Rva2VuOiBzdHJpbmcsXG59XG5pbnRlcmZhY2UgU3Vic2NyaXB0aW9uIHtcbiAgICBfaWQ6IHN0cmluZyxcbiAgICB0YXJnZXQ6IHN0cmluZ1tdLFxufVxuaW50ZXJmYWNlIEV2ZW50SGFuZGxlciB7XG4gICAgbWVyZ2U6IGJvb2xlYW47XG4gICAgaG9vaz86IChib2R5OiBhbnkpID0+IFByb21pc2U8W3N0cmluZz8sIFJlY29yZDxzdHJpbmcsIGFueT4/XT5cbiAgICBpbnRlcmFjdD86IChtZXNzYWdlOiBzdHJpbmcsIHNlc3Npb246IFNlc3Npb24sIGV2ZW50OiBhbnksIGdldFRva2VuOiAoKSA9PiBQcm9taXNlPHN0cmluZz4pID0+IFByb21pc2U8W3N0cmluZz8sIFJlY29yZDxzdHJpbmcsIGFueT4/XSB8IGJvb2xlYW4+XG59XG5kZWNsYXJlIG1vZHVsZSAna29pc2hpLWNvcmUnIHtcbiAgICBpbnRlcmZhY2UgVXNlciB7XG4gICAgICAgIEdpdGh1YlRva2VuOiBHaXRodWJUb2tlblxuICAgIH1cbiAgICBpbnRlcmZhY2UgVGFibGVzIHtcbiAgICAgICAgZ2l0aHViX3dhdGNoOiBTdWJzY3JpcHRpb24sXG4gICAgICAgIGdpdGh1Yl9kYXRhOiBhbnlcbiAgICB9XG59XG5mdW5jdGlvbiBmb3JtYXRNYXJrZG93bihzb3VyY2U6IHN0cmluZykge1xuICAgIHJldHVybiBzb3VyY2VcbiAgICAgICAgLnJlcGxhY2UoL15gYGAoLiopJC9nbSwgJycpXG4gICAgICAgIC5yZXBsYWNlKC9ePCEtLSguKiktLT4kL2dtLCAnJylcbiAgICAgICAgLnJlcGxhY2UoL1xcblxccypcXG4vZywgJ1xcbicpXG4gICAgICAgIC5yZXBsYWNlKC8oXFxyP1xcbiAqKSsvZ21pLCAnXFxuJyk7XG59XG5mdW5jdGlvbiBzaGEyNTYoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMjU2JylcbiAgICAgICAgLnVwZGF0ZShzdHIpXG4gICAgICAgIC5kaWdlc3QoJ2hleCcpO1xufVxuXG5jb25zdCBidWZmZXIgPSB7fTtcblxuYXN5bmMgZnVuY3Rpb24gc2NyZWVuc2hvdChicm93c2VyOiBCcm93c2VyLCB1cmw6IHN0cmluZywgc2VsZWN0b3I6IHN0cmluZywgb2Zmc2V0OiBudW1iZXJbXSkge1xuICAgIGNvbnN0IHBhZ2UgPSBhd2FpdCBicm93c2VyLm5ld1BhZ2UoKTtcbiAgICB0cnkge1xuICAgICAgICBhd2FpdCBwYWdlLmdvdG8odXJsLCB7IHdhaXRVbnRpbDogJ25ldHdvcmtpZGxlMCcgfSk7XG4gICAgICAgIGNvbnN0IGVsID0gYXdhaXQgcGFnZS4kKHNlbGVjdG9yKTtcbiAgICAgICAgbGV0IGNsaXAgPSBhd2FpdCBlbC5ib3VuZGluZ0JveCgpO1xuICAgICAgICBhd2FpdCBwYWdlLnNldFZpZXdwb3J0KHtcbiAgICAgICAgICAgIGhlaWdodDogTWF0aC5jZWlsKGNsaXAueSArIGNsaXAuaGVpZ2h0ICsgNTApLFxuICAgICAgICAgICAgd2lkdGg6IDEwODAsXG4gICAgICAgIH0pO1xuICAgICAgICBjbGlwID0gYXdhaXQgZWwuYm91bmRpbmdCb3goKTtcbiAgICAgICAgY2xpcCA9IHtcbiAgICAgICAgICAgIHg6IGNsaXAueCAtIG9mZnNldFswXSxcbiAgICAgICAgICAgIHk6IGNsaXAueSAtIG9mZnNldFsxXSxcbiAgICAgICAgICAgIHdpZHRoOiBjbGlwLndpZHRoICsgb2Zmc2V0WzJdLFxuICAgICAgICAgICAgaGVpZ2h0OiBjbGlwLmhlaWdodCArIG9mZnNldFszXSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgYmFzZTY0ID0gYXdhaXQgcGFnZS5zY3JlZW5zaG90KHtcbiAgICAgICAgICAgIGVuY29kaW5nOiAnYmFzZTY0JyxcbiAgICAgICAgICAgIGNsaXAsXG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCBwYWdlLmNsb3NlKCk7XG4gICAgICAgIHJldHVybiBiYXNlNjQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgYXdhaXQgcGFnZS5jbG9zZSgpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBhcHBseSA9IChhcHA6IEFwcCwgY29uZmlnOiBhbnkpID0+IHtcbiAgICBmdW5jdGlvbiBHZXQodXJsOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyYWdlbnRcbiAgICAgICAgICAgIC5nZXQodXJsKVxuICAgICAgICAgICAgLnByb3h5KGNvbmZpZy5wcm94eSlcbiAgICAgICAgICAgIC5zZXQoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi92bmQuZ2l0aHViLnYzK2pzb24nKVxuICAgICAgICAgICAgLnNldCgnVXNlci1BZ2VudCcsICdIeWRyb0JvdCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFBvc3QodXJsOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyYWdlbnRcbiAgICAgICAgICAgIC5wb3N0KHVybClcbiAgICAgICAgICAgIC5wcm94eShjb25maWcucHJveHkpXG4gICAgICAgICAgICAuc2V0KCdBY2NlcHQnLCAnYXBwbGljYXRpb24vdm5kLmdpdGh1Yi52Mytqc29uJylcbiAgICAgICAgICAgIC5zZXQoJ1VzZXItQWdlbnQnLCAnSHlkcm9Cb3QnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBQdXQodXJsOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyYWdlbnRcbiAgICAgICAgICAgIC5wdXQodXJsKVxuICAgICAgICAgICAgLnByb3h5KGNvbmZpZy5wcm94eSlcbiAgICAgICAgICAgIC5zZXQoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi92bmQuZ2l0aHViLnYzK2pzb24nKVxuICAgICAgICAgICAgLnNldCgnVXNlci1BZ2VudCcsICdIeWRyb0JvdCcpO1xuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIHB1bGxSZXF1ZXN0SW50ZXJhY3RvcihtZXNzYWdlOiBzdHJpbmcsIHNlc3Npb246IFNlc3Npb24sIGV2ZW50LCBnZXRUb2tlbikge1xuICAgICAgICBpZiAobWVzc2FnZS5pbmNsdWRlcygnISFsaW5rJykpIHJldHVybiBbZXZlbnQubGlua107XG4gICAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgZ2V0VG9rZW4oKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJyEhbWVyZ2UnKSkge1xuICAgICAgICAgICAgY29uc3QgY29tbWl0TXNnID0gbWVzc2FnZS5zcGxpdCgnISFtZXJnZScpWzFdO1xuICAgICAgICAgICAgYXdhaXQgUHV0KGBodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zLyR7ZXZlbnQucmVwb25hbWV9L3B1bGxzLyR7ZXZlbnQuaXNzdWVJZH0vbWVyZ2VgKVxuICAgICAgICAgICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgdG9rZW4gJHt0b2tlbn1gKVxuICAgICAgICAgICAgICAgIC5zZW5kKHsgY29tbWl0X3RpdGxlOiBjb21taXRNc2cudHJpbSgpIH0pO1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmluY2x1ZGVzKCchIWFwcHJvdmUnKSkge1xuICAgICAgICAgICAgYXdhaXQgUG9zdChgaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy8ke2V2ZW50LnJlcG9uYW1lfS9wdWxscy8ke2V2ZW50Lmlzc3VlSWR9L3Jldmlld3NgKVxuICAgICAgICAgICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgdG9rZW4gJHt0b2tlbn1gKVxuICAgICAgICAgICAgICAgIC5zZW5kKHsgZXZlbnQ6ICdBUFBST1ZFJyB9KTtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5pbmNsdWRlcygnISFkaWZmJykpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBzY3JlZW5zaG90KGFwcC5icm93c2VyLCBgJHtldmVudC5saW5rfS9maWxlc2AsICcuZmlsZXMtYnVja2V0JywgWzAsIDAsIDAsIDBdKTtcbiAgICAgICAgICAgIHJldHVybiBbYFtDUTppbWFnZSxmaWxlPWJhc2U2NDovLyR7ZGF0YX1dYF07XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgUG9zdChgaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy8ke2V2ZW50LnJlcG9uYW1lfS9pc3N1ZXMvJHtldmVudC5pc3N1ZUlkfS9jb21tZW50c2ApXG4gICAgICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYHRva2VuICR7dG9rZW59YClcbiAgICAgICAgICAgIC5zZW5kKHsgYm9keTogbWVzc2FnZSB9KTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGFwcC5vbignY29ubmVjdCcsICgpID0+IHtcbiAgICAgICAgY29uc3QgY29sbCA9IGFwcC5kYXRhYmFzZS5tb25nby5jb2xsZWN0aW9uKCdnaXRodWJfd2F0Y2gnKTtcbiAgICAgICAgY29uc3QgY29sbERhdGEgPSBhcHAuZGF0YWJhc2UubW9uZ28uY29sbGVjdGlvbignZ2l0aHViX2RhdGEnKTtcblxuICAgICAgICBjb25zdCBldmVudHM6IFJlY29yZDxzdHJpbmcsIEV2ZW50SGFuZGxlcj4gPSB7XG4gICAgICAgICAgICBwdXNoOiB7XG4gICAgICAgICAgICAgICAgYXN5bmMgaG9vayhib2R5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZiA9IGJvZHkucmVmLnNwbGl0KCcvJylbMl07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbmRlciA9IGJvZHkuaGVhZF9jb21taXQgPyBib2R5LmhlYWRfY29tbWl0LmF1dGhvci51c2VybmFtZSA6IGJvZHkuc2VuZGVyLmxvZ2luO1xuICAgICAgICAgICAgICAgICAgICBsZXQgYWRkZWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVtb3ZlZCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtb2RpZmllZCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZXNwID0gYFJlY2VudCBjb21taXQgdG8gJHtib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lfSR7cmVmID09PSAnbWFzdGVyJyA/ICcnIDogYDoke3JlZn1gfSBieSAke3NlbmRlcn1gO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnLnNvdXJjZWdyYXBoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN1cGVyYWdlbnQucG9zdCgnaHR0cHM6Ly9zb3VyY2VncmFwaC5jb20vLmFwaS9ncmFwaHFsJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGB0b2tlbiAke2NvbmZpZy5zb3VyY2VncmFwaH1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeTogYHF1ZXJ5e1xucmVwb3NpdG9yeShuYW1lOlwiZ2l0aHViLmNvbS8ke2JvZHkucmVwb3NpdG9yeS5mdWxsX25hbWV9XCIpe1xuICBjb21wYXJpc29uKGJhc2U6XCIke2JvZHkuYmVmb3JlfVwiLGhlYWQ6XCIke2JvZHkuYWZ0ZXJ9XCIpe1xuICAgIGZpbGVEaWZmc3tub2Rlc3tzdGF0e2FkZGVkIGNoYW5nZWQgZGVsZXRlZH19fVxuICB9XG59XG59YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQuYm9keS5kYXRhKSBsb2dnZXIuaW5mbyhyZXN1bHQuYm9keSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIXJlc3VsdC5ib2R5LmRhdGEucmVwb3NpdG9yeSkgbG9nZ2VyLmluZm8oJ1JlcG8gbm90IGZvdW5kOiAlcycsIGJvZHkucmVwb3NpdG9yeS5mdWxsX25hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFuZ2VzID0gcmVzdWx0LmJvZHkuZGF0YS5yZXBvc2l0b3J5LmNvbXBhcmlzb24uZmlsZURpZmZzLm5vZGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNoYW5nZSBvZiBjaGFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRlZCArPSBjaGFuZ2Uuc3RhdC5hZGRlZCB8fCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZCArPSBjaGFuZ2Uuc3RhdC5kZWxldGVkIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllZCArPSBjaGFuZ2Uuc3RhdC5jaGFuZ2VkIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChhZGRlZCB8fCByZW1vdmVkIHx8IG1vZGlmaWVkKSByZXNwICs9IGBcXG4ke2FkZGVkfSsgJHtyZW1vdmVkfS0gJHttb2RpZmllZH1NYDtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjb21taXQgb2YgYm9keS5jb21taXRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21taXQuYWRkZWQubGVuZ3RoKSBkZXQucHVzaChgJHtjb21taXQuYWRkZWQubGVuZ3RofStgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21taXQucmVtb3ZlZC5sZW5ndGgpIGRldC5wdXNoKGAke2NvbW1pdC5yZW1vdmVkLmxlbmd0aH0tYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWl0Lm1vZGlmaWVkLmxlbmd0aCkgZGV0LnB1c2goYCR7Y29tbWl0Lm1vZGlmaWVkLmxlbmd0aH1NYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwICs9IGBcXG4ke2NvbW1pdC5pZC5zdWJzdHIoMCwgNil9ICR7Zm9ybWF0TWFya2Rvd24oY29tbWl0Lm1lc3NhZ2UpLnJlcGxhY2UoL1xcbi9nLCAnXFxyXFxuJyl9ICgke2RldC5qb2luKCcgJyl9KWA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtyZXNwLCB7IGxpbms6IGJvZHkuY29tcGFyZSB9XTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFzeW5jIGludGVyYWN0KG1lc3NhZ2UsIHNlc3Npb24sIGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmluY2x1ZGVzKCchIWxpbmsnKSkgcmV0dXJuIFtldmVudC5saW5rXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJyEhZGlmZicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgc2NyZWVuc2hvdChhcHAuYnJvd3NlciwgZXZlbnQubGluaywgJy5maWxlcy1idWNrZXQnLCBbMCwgMCwgMCwgMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtgW0NROmltYWdlLGZpbGU9YmFzZTY0Oi8vJHtkYXRhfV1gXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmb3JrOiB7XG4gICAgICAgICAgICAgICAgbWVyZ2U6IHRydWUsXG4gICAgICAgICAgICAgICAgYXN5bmMgaG9vayhib2R5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChib2R5LmFjdGlvbiA9PT0gJ2NyZWF0ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2Ake2JvZHkuc2VuZGVyLmxvZ2lufSBmb3JrZWQgJHtib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lfWBdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzc3Vlczoge1xuICAgICAgICAgICAgICAgIG1lcmdlOiAoYm9keSkgPT4gYm9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZSArICcvJyArIGJvZHkuaXNzdWUubnVtYmVyLFxuICAgICAgICAgICAgICAgIGFzeW5jIGhvb2soYm9keSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzcDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHkuYWN0aW9uID09PSAnb3BlbmVkJyB8fCBib2R5LmFjdGlvbiA9PT0gJ2VkaXRlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgPSBgJHtib2R5LnNlbmRlci5sb2dpbn0gJHtib2R5LmFjdGlvbn0gaXNzdWUgJHtib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lfSMke2JvZHkuaXNzdWUubnVtYmVyfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJhc2U2NCA9IGF3YWl0IHNjcmVlbnNob3QoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5icm93c2VyLCBib2R5Lmlzc3VlLmh0bWxfdXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLmpzLWRpc2N1c3Npb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbNjgsIDEzMCwgOTIsIDEzMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwICs9IGBcXG4ke3NlZ21lbnQuaW1hZ2UoYGJhc2U2NDovLyR7YmFzZTY0fWApfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBMb2dnZXIoJ3B1cHBldGVlcicpLndhcm4oZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgKz0gYFxcbiR7Zm9ybWF0TWFya2Rvd24oYm9keS5pc3N1ZS50aXRsZSl9XFxuJHtmb3JtYXRNYXJrZG93bihib2R5Lmlzc3VlLmJvZHkgfHwgJycpfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYm9keS5hY3Rpb24gPT09ICdhc3NpZ25lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgPSBgJHtib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lfSMke2JvZHkuaXNzdWUubnVtYmVyfTogQXNzaWduZWQgJHtib2R5LmFzc2lnbmVlLmxvZ2lufWA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYm9keS5hY3Rpb24gPT09ICd1bmFzc2lnbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCA9IGAke2JvZHkucmVwb3NpdG9yeS5mdWxsX25hbWV9IyR7Ym9keS5pc3N1ZS5udW1iZXJ9OiBVbmFzc2lnbmVkICR7Ym9keS5hc3NpZ25lZS5sb2dpbn1gO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJvZHkuYWN0aW9uID09PSAnY2xvc2VkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCA9IGAke2JvZHkuc2VuZGVyLmxvZ2lufSBjbG9zZWQgJHtib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lfSMke2JvZHkuaXNzdWUubnVtYmVyfS5gO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFsncmVvcGVuZWQnLCAnbG9ja2VkJywgJ3VubG9ja2VkJ10uaW5jbHVkZXMoYm9keS5hY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwID0gYCR7Ym9keS5zZW5kZXIubG9naW59ICR7Ym9keS5hY3Rpb259IElzc3VlOiR7Ym9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZX0jJHtib2R5Lmlzc3VlLm51bWJlcn1gO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJvZHkuYWN0aW9uID09PSAnbGFiZWxlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICByZXNwID0gYCR7Ym9keS5zZW5kZXIubG9naW59IGxhYmxlZCAke2JvZHkucmVwb3NpdG9yeS5mdWxsX25hbWV9IyR7Ym9keS5pc3N1ZS5udW1iZXJ9ICR7Ym9keS5sYWJsZS5uYW1lfWA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSByZXNwID0gYFVua25vd24gaXNzdWUgYWN0aW9uOiAke2JvZHkuYWN0aW9ufWA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbms6IGJvZHkuY29tbWVudD8uaHRtbF91cmwgfHwgYm9keS5pc3N1ZS5odG1sX3VybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBvbmFtZTogYm9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc3N1ZUlkOiBib2R5Lmlzc3VlLm51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhc3luYyBpbnRlcmFjdChtZXNzYWdlLCBzZXNzaW9uLCBldmVudCwgZ2V0VG9rZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJyEhbGluaycpKSByZXR1cm4gW2V2ZW50LmxpbmtdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IGdldFRva2VuKCk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IEdldChgaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy8ke2V2ZW50LnJlcG9uYW1lfS9pc3N1ZXMvJHtldmVudC5pc3N1ZUlkfS9jb21tZW50c2ApXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYHRva2VuICR7dG9rZW59YClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZW5kKHsgYm9keTogbWVzc2FnZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNzdWVfY29tbWVudDoge1xuICAgICAgICAgICAgICAgIG1lcmdlOiAoYm9keSkgPT4gYm9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZSArICcvJyArIGJvZHkuaXNzdWUubnVtYmVyLFxuICAgICAgICAgICAgICAgIGFzeW5jIGhvb2soYm9keSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzcDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHkuYWN0aW9uID09PSAnY3JlYXRlZCcgfHwgYm9keS5hY3Rpb24gPT09ICdlZGl0ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYm9keS5jb21tZW50LnVzZXIubG9naW4gPT09ICdjb2RlY292W2JvdF0nKSByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCA9IGAke2JvZHkuY29tbWVudC51c2VyLmxvZ2lufSAke2JvZHkuYWN0aW9uID09PSAnY3JlYXRlZCcgPyAnY29tbWVudGVkJyA6ICdlZGl0ZWQgYSBjb21tZW50J30gb24gJHtib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lfSMke2JvZHkuaXNzdWUubnVtYmVyfVxcbiR7Ym9keS5pc3N1ZS50aXRsZX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiYXNlNjQgPSBhd2FpdCBzY3JlZW5zaG90KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHAuYnJvd3NlciwgYm9keS5pc3N1ZS5odG1sX3VybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCMke2JvZHkuY29tbWVudC5odG1sX3VybC5zcGxpdCgnIycpWzFdfWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFs4NiwgMTQsIDkyLCAyMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwICs9IGBcXG4ke3NlZ21lbnQuaW1hZ2UoYGJhc2U2NDovLyR7YmFzZTY0fWApfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBMb2dnZXIoJ3B1cHBldGVlcicpLndhcm4oZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgKz0gYFxcbiR7Zm9ybWF0TWFya2Rvd24oYm9keS5jb21tZW50LmJvZHkpfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AsXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluazogYm9keS5pc3N1ZS5odG1sX3VybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBvbmFtZTogYm9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc3N1ZUlkOiBib2R5Lmlzc3VlLm51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpbnRlcmFjdDogcHVsbFJlcXVlc3RJbnRlcmFjdG9yLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHB1bGxfcmVxdWVzdDoge1xuICAgICAgICAgICAgICAgIG1lcmdlOiAoYm9keSkgPT4gYm9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZSArICcvJyArIGJvZHkucHVsbF9yZXF1ZXN0Lm51bWJlcixcbiAgICAgICAgICAgICAgICBhc3luYyBob29rKGJvZHkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3A7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgZnVsbF9uYW1lLCBvd25lciB9ID0gYm9keS5yZXBvc2l0b3J5O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyLCBodG1sX3VybCwgdGl0bGUsIGJhc2UsIGhlYWQsIG51bWJlciwgbWVyZ2VkLFxuICAgICAgICAgICAgICAgICAgICB9ID0gYm9keS5wdWxsX3JlcXVlc3Q7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZWZpeCA9IG5ldyBSZWdFeHAoYF4ke293bmVyLmxvZ2lufTpgKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZUxhYmVsID0gYmFzZS5sYWJlbC5yZXBsYWNlKHByZWZpeCwgJycpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWFkTGFiZWwgPSBoZWFkLmxhYmVsLnJlcGxhY2UocHJlZml4LCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChib2R5LmFjdGlvbiA9PT0gJ29wZW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgPSBgJHt1c2VyLmxvZ2lufSBvcGVuZWQgYW4gcHVsbCByZXF1ZXN0IGZvciAke2Z1bGxfbmFtZX0jJHtudW1iZXJ9KCR7YmFzZUxhYmVsfTwke2hlYWRMYWJlbH0pYDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZTY0ID0gYXdhaXQgc2NyZWVuc2hvdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwLmJyb3dzZXIsIGh0bWxfdXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLmpzLWRpc2N1c3Npb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbNjgsIDEzMCwgOTIsIDEzMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwICs9IGBcXG4ke3NlZ21lbnQuaW1hZ2UoYGJhc2U2NDovLyR7YmFzZTY0fWApfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBMb2dnZXIoJ3B1cHBldGVlcicpLndhcm4oZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgKz0gYFxcbiR7dGl0bGV9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwICs9IGBcXG4ke2Zvcm1hdE1hcmtkb3duKGJvZHkucHVsbF9yZXF1ZXN0LmJvZHkgfHwgJycpfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYm9keS5hY3Rpb24gPT09ICdjcmVhdGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCA9IGAke3VzZXIubG9naW59IGNvbW1lbnRlZCBvbiAke2Z1bGxfbmFtZX0jJHtudW1iZXJ9KCR7YmFzZUxhYmVsfTwke2hlYWRMYWJlbH0pYDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgKz0gYFxcbiR7Ym9keS5jb21tZW50LmJvZHl9YDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChib2R5LmFjdGlvbiA9PT0gJ2Fzc2lnbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCA9IGAke2Z1bGxfbmFtZX0jJHtudW1iZXJ9OiBBc3NpZ25lZCAke2JvZHkuYXNzaWduZWUubG9naW59YDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChib2R5LmFjdGlvbiA9PT0gJ3VuYXNzaWduZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwID0gYCR7ZnVsbF9uYW1lfSMke251bWJlcn06IFVuYXNzaWduZWQgJHtib2R5LmFzc2lnbmVlLmxvZ2lufWA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYm9keS5hY3Rpb24gPT09ICdyZXZpZXdfcmVxdWVzdGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCA9IGAke2Z1bGxfbmFtZX0jJHtudW1iZXJ9OiBSZXF1ZXN0IGEgcmV2aWV3LmA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYm9keS5hY3Rpb24gPT09ICdjbG9zZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0eXBlID0gbWVyZ2VkID8gJ21lcmdlZCcgOiAnY2xvc2VkJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgPSBgJHtib2R5LnNlbmRlci5sb2dpbn0gJHt0eXBlfSAke2Z1bGxfbmFtZX0jJHtudW1iZXJ9KCR7YmFzZUxhYmVsfTwke2hlYWRMYWJlbH0pYDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChbJ3Jlb3BlbmVkJywgJ2xvY2tlZCcsICd1bmxvY2tlZCddLmluY2x1ZGVzKGJvZHkuYWN0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCA9IGAke2JvZHkuc2VuZGVyLmxvZ2lufSAke2JvZHkuYWN0aW9ufSBQUjoke2Z1bGxfbmFtZX0jJHtudW1iZXJ9YDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChbJ3N5bmNocm9uaXplJ10uaW5jbHVkZXMoYm9keS5hY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYm9keS5hY3Rpb24gPT09ICdyZWFkeV9mb3JfcmV2aWV3Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCA9IGAke2Z1bGxfbmFtZX0jJHtudW1iZXJ9IGlzIHJlYWR5IGZvciByZXZpZXcuYDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHJlc3AgPSBgVW5rbm93biBwdWxsIHJlcXVlc3QgYWN0aW9uOiAke2JvZHkuYWN0aW9ufWA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbms6IGh0bWxfdXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcG9uYW1lOiBmdWxsX25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNzdWVJZDogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGludGVyYWN0OiBwdWxsUmVxdWVzdEludGVyYWN0b3IsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHVsbF9yZXF1ZXN0X3Jldmlldzoge1xuICAgICAgICAgICAgICAgIG1lcmdlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFzeW5jIGhvb2soYm9keSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYm9keS5yZXZpZXcuc3RhdGUgPT09ICdjb21tZW50ZWQnKSByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgICAgIGlmIChib2R5LnJldmlldy5zdGF0ZSA9PT0gJ2FwcHJvdmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtgJHtib2R5LnNlbmRlci5sb2dpbn0gYXBwcm92ZWQgJHtib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lfSMke2JvZHkucHVsbF9yZXF1ZXN0Lm51bWJlcn1gXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3VuZGVmaW5lZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluazogYm9keS5wdWxsX3JlcXVlc3QuaHRtbF91cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXBvbmFtZTogYm9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzc3VlSWQ6IGJvZHkucHVsbF9yZXF1ZXN0Lm51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgfV07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpbnRlcmFjdDogcHVsbFJlcXVlc3RJbnRlcmFjdG9yLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHB1bGxfcmVxdWVzdF9yZXZpZXdfY29tbWVudDoge1xuICAgICAgICAgICAgICAgIG1lcmdlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFzeW5jIGhvb2soYm9keSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzcCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYm9keS5hY3Rpb24gPT09ICdjcmVhdGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCA9IGAke2JvZHkuY29tbWVudC51c2VyLmxvZ2lufSBjb21tZW50ZWQgb24gJHtib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lfSMke2JvZHkucHVsbF9yZXF1ZXN0Lm51bWJlcn1cXG5gO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCArPSBmb3JtYXRNYXJrZG93bihib2R5LmNvbW1lbnQuYm9keSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AsXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluazogYm9keS5wdWxsX3JlcXVlc3QuaHRtbF91cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwb25hbWU6IGJvZHkucmVwb3NpdG9yeS5mdWxsX25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNzdWVJZDogYm9keS5wdWxsX3JlcXVlc3QubnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGludGVyYWN0OiBwdWxsUmVxdWVzdEludGVyYWN0b3IsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3Rhcjoge1xuICAgICAgICAgICAgICAgIG1lcmdlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFzeW5jIGhvb2soYm9keSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYm9keS5hY3Rpb24gPT09ICdjcmVhdGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF3YWl0IGNvbGxEYXRhLmZpbmRPbmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdGFyJywgdXNlcjogYm9keS5zZW5kZXIubG9naW4sIHJlcG86IGJvZHkucmVwb3NpdG9yeS5mdWxsX25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSkgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtib2R5LnNlbmRlci5sb2dpbn0gc3RhcnJlZCAke2JvZHkucmVwb3NpdG9yeS5mdWxsX25hbWV9ICh0b3RhbCAke2JvZHkucmVwb3NpdG9yeS5zdGFyZ2F6ZXJzX2NvdW50fSBzdGFyZ2F6ZXJzKWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyB1c2VyOiBib2R5LnNlbmRlci5sb2dpbiwgcmVwbzogYm9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3YXRjaDoge1xuICAgICAgICAgICAgICAgIG1lcmdlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFzeW5jIGhvb2soYm9keSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYm9keS5hY3Rpb24gPT09ICdjcmVhdGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF3YWl0IGNvbGxEYXRhLmZpbmRPbmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd3YXRjaCcsIHVzZXI6IGJvZHkuc2VuZGVyLmxvZ2luLCByZXBvOiBib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpIHJldHVybiBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7Ym9keS5zZW5kZXIubG9naW59IGlzIHdhdGNoaW5nICR7Ym9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZX0gKHRvdGFsICR7Ym9keS5yZXBvc2l0b3J5LndhdGNoZXJzX2NvdW50fSB3YXRjaGVycylgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgdXNlcjogYm9keS5zZW5kZXIubG9naW4sIHJlcG86IGJvZHkucmVwb3NpdG9yeS5mdWxsX25hbWUgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvamVjdF9jYXJkOiB7fSxcbiAgICAgICAgICAgIHByb2plY3RfY29sdW1uOiB7fSxcbiAgICAgICAgICAgIGNoZWNrX3J1bjoge30sXG4gICAgICAgICAgICBjaGVja19zdWl0ZToge30sXG4gICAgICAgICAgICByZXBvc2l0b3J5X3Z1bG5lcmFiaWxpdHlfYWxlcnQ6IHt9LFxuICAgICAgICAgICAgc3RhdHVzOiB7fSxcbiAgICAgICAgICAgIGxhYmVsOiB7fSxcbiAgICAgICAgICAgIGRlcGxveW1lbnRfc3RhdHVzOiB7fSxcbiAgICAgICAgICAgIGRlcGxveW1lbnQ6IHt9LFxuICAgICAgICAgICAgcGFnZV9idWlsZDoge30sXG4gICAgICAgIH07XG5cbiAgICAgICAgYXBwLnJvdXRlci5wb3N0KCcvZ2l0aHViJywgYXN5bmMgKGN0eCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBldmVudCA9IGN0eC5yZXF1ZXN0LmhlYWRlcnNbJ3gtZ2l0aHViLWV2ZW50J10gYXMgc3RyaW5nO1xuICAgICAgICAgICAgICAgIGxldCBib2R5O1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3R4LnJlcXVlc3QuYm9keS5wYXlsb2FkID09PSAnc3RyaW5nJykgYm9keSA9IEpTT04ucGFyc2UoY3R4LnJlcXVlc3QuYm9keS5wYXlsb2FkKTtcbiAgICAgICAgICAgICAgICBlbHNlIGJvZHkgPSBjdHgucmVxdWVzdC5ib2R5O1xuICAgICAgICAgICAgICAgIGNvbnN0IF9pZCA9IHNoYTI1NihKU09OLnN0cmluZ2lmeShib2R5KSk7XG4gICAgICAgICAgICAgICAgaWYgKCFldmVudHNbZXZlbnRdKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50c1tldmVudF0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBob29rOiAoYikgPT4gUHJvbWlzZS5yZXNvbHZlKFtgJHtiLnJlcG9zaXRvcnkuZnVsbF9uYW1lfSB0cmlnZ2VyZWQgYW4gdW5rbm93biBldmVudDogJHtldmVudH1gXSksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChldmVudHNbZXZlbnRdLmhvb2spIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyBvcmdhbml6YXRpb24gd2ViaG9vaz9cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVwb25hbWUgPSBib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBbbWVzc2FnZSwgaW5mXSA9IGF3YWl0IGV2ZW50c1tldmVudF0uaG9vayhib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgY29sbERhdGEuZmluZE9uZSh7IF9pZCB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZWxhdGl2ZUlkcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgY29sbC5maW5kT25lKHsgX2lkOiByZXBvbmFtZS50b0xvd2VyQ2FzZSgpIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaWQgb2YgZGF0YS50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFtwbGF0Zm9ybSwgZ2lkXSA9IGlkLnNwbGl0KCc6Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYXdhaXQtaW4tbG9vcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2RvYyA9IGF3YWl0IGFwcC5kYXRhYmFzZS5nZXRDaGFubmVsKHBsYXRmb3JtIGFzIFBsYXRmb3JtLCBnaWQsIFsnYXNzaWduZWUnXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2RvYy5hc3NpZ25lZSAmJiBhcHAuYm90c1tgJHtwbGF0Zm9ybX06JHtnZG9jLmFzc2lnbmVlfWBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVJZHMucHVzaChhcHAuYm90c1tgJHtwbGF0Zm9ybX06JHtnZG9jLmFzc2lnbmVlfWBdLnNlbmRNZXNzYWdlKGdpZCwgbWVzc2FnZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGxvZ2dlci53YXJuKCdDYW5ub3Qgc2VuZCBtZXNzYWdlIHRvICVzOiVkIHdpdGggYXNzaWduZWUgJWQnLCBwbGF0Zm9ybSwgaWQsIGdkb2MuYXNzaWduZWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlSWRzID0gYXdhaXQgUHJvbWlzZS5hbGwocmVsYXRpdmVJZHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGNvbGxEYXRhLmluc2VydE9uZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pZCwgdHlwZTogZXZlbnQsIHJlbGF0aXZlSWRzLCAuLi5pbmYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguYm9keSA9IGBQdXNoZWQgdG8gJHtyZWxhdGl2ZUlkcy5sZW5ndGh9IGdyb3VwKHMpYDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGN0eC5ib2R5ID0gJ0R1cGxpY2F0ZSBldmVudCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGN0eC5ib2R5ID0gJ0V2ZW50IGlnbm9yZWQuJztcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgICAgICAgICBjdHguYm9keSA9IGUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXBwLnJvdXRlci5nZXQoJy9naXRodWIvYXV0aG9yaXplJywgYXN5bmMgKGN0eCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgW3BsYXRmb3JtLCBpZF0gPSAoY3R4LnF1ZXJ5LnN0YXRlIGFzIHN0cmluZykuc3BsaXQoJzonKTtcbiAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBjdHgucXVlcnkuY29kZTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN1cGVyYWdlbnQucG9zdCgnaHR0cHM6Ly9naXRodWIuY29tL2xvZ2luL29hdXRoL2FjY2Vzc190b2tlbicpXG4gICAgICAgICAgICAgICAgLnByb3h5KGNvbmZpZy5wcm94eSlcbiAgICAgICAgICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgICAgICAgICAgIGNsaWVudF9pZDogY29uZmlnLmNsaWVudF9pZCxcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50X3NlY3JldDogY29uZmlnLmNsaWVudF9zZWNyZXQsXG4gICAgICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0X3VyaTogY29uZmlnLnJlZGlyZWN0X3VyaSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGU6IGN0eC5xdWVyeS5zdGF0ZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuYm9keS5hY2Nlc3NfdG9rZW4pIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBhcHAuZGF0YWJhc2Uuc2V0VXNlcihwbGF0Zm9ybSBhcyBQbGF0Zm9ybSwgaWQsIHsgR2l0aHViVG9rZW46IHJlc3VsdC5ib2R5IH0pO1xuICAgICAgICAgICAgICAgIGN0eC5ib2R5ID0gJ0RvbmUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjdHguYm9keSA9ICdFcnJvcic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFwcC5taWRkbGV3YXJlKGFzeW5jIChzZXNzaW9uLCBuZXh0KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXNlc3Npb24ucXVvdGUpIHJldHVybiBuZXh0KCk7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRNc2cgPSBzZXNzaW9uLnBhcnNlZC5jb250ZW50XG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcW0NROmF0LC4qXFxdL2csICcnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFtDUTppbWFnZSxmaWxlPSguKilcXF0vZywgKHN0cikgPT4gYCAhW10oJHsvXFxbQ1E6aW1hZ2UsZmlsZT0oLiopXFxdL2cuZXhlYyhzdHIpWzFdfSkgYClcbiAgICAgICAgICAgICAgICAuZGVjb2RlKCkudHJpbSgpO1xuICAgICAgICAgICAgaWYgKCFwYXJzZWRNc2cpIHJldHVybiBuZXh0KCk7XG4gICAgICAgICAgICBjb25zdCBbcmVsYXRpdmVFdmVudCwgdXNlcl0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgY29sbERhdGEuZmluZE9uZSh7IHJlbGF0aXZlSWRzOiBzZXNzaW9uLnF1b3RlLm1lc3NhZ2VJZCB9KSxcbiAgICAgICAgICAgICAgICBhcHAuZGF0YWJhc2UuZ2V0VXNlcihzZXNzaW9uLnBsYXRmb3JtLCBzZXNzaW9uLnVzZXJJZCwgWydHaXRodWJUb2tlbiddKSxcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgaWYgKCFyZWxhdGl2ZUV2ZW50IHx8ICFldmVudHNbcmVsYXRpdmVFdmVudC50eXBlXS5pbnRlcmFjdCkgcmV0dXJuO1xuICAgICAgICAgICAgbG9nZ2VyLmluZm8ocGFyc2VkTXNnKTtcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCdSZXBseTogJXMnLCByZWxhdGl2ZUV2ZW50KTtcbiAgICAgICAgICAgIGlmIChwYXJzZWRNc2cuc3RhcnRzV2l0aCgnLy8nKSkgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXN5bmMgZnVuY3Rpb24gZ2V0VG9rZW4oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdXNlci5HaXRodWJUb2tlbj8uYWNjZXNzX3Rva2VuKSB0aHJvdyBuZXcgSW52YWxpZFRva2VuRXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3VwZXJhZ2VudC5nZXQoJ2h0dHBzOi8vYXBpLmdpdGh1Yi5jb20vJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wcm94eShjb25maWcucHJveHkpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYHRva2VuICR7dXNlci5HaXRodWJUb2tlbi5hY2Nlc3NfdG9rZW59YClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXQoJ1VzZXItQWdlbnQnLCAnSHlkcm9Cb3QnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1c2VyLkdpdGh1YlRva2VuLnJlZnJlc2hfdG9rZW4pIHRocm93IG5ldyBJbnZhbGlkVG9rZW5FcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IGF3YWl0IHN1cGVyYWdlbnQucG9zdCgnaHR0cHM6Ly9naXRodWIuY29tL2xvZ2luL29hdXRoL2FjY2Vzc190b2tlbicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnByb3h5KGNvbmZpZy5wcm94eSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2V0KCdVc2VyLUFnZW50JywgJ0h5ZHJvQm90JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYW50X3R5cGU6ICdyZWZyZXNoX3Rva2VuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50X2lkOiBjb25maWcuY2xpZW50X2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRfc2VjcmV0OiBjb25maWcuY2xpZW50X3NlY3JldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaF90b2tlbjogdXNlci5HaXRodWJUb2tlbi5yZWZyZXNoX3Rva2VuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyLmJvZHkuYWNjZXNzX3Rva2VuKSB0aHJvdyBuZXcgSW52YWxpZFRva2VuRXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGFwcC5kYXRhYmFzZS5zZXRVc2VyKHNlc3Npb24ucGxhdGZvcm0sIHNlc3Npb24udXNlcklkLCB7IEdpdGh1YlRva2VuOiByLmJvZHkgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5ib2R5LmFjY2Vzc190b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlci5HaXRodWJUb2tlbi5hY2Nlc3NfdG9rZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gYXdhaXQgZXZlbnRzW3JlbGF0aXZlRXZlbnQudHlwZV0uaW50ZXJhY3QocGFyc2VkTXNnLnRyaW0oKSwgc2Vzc2lvbiwgcmVsYXRpdmVFdmVudCwgZ2V0VG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NhdGNoJywgZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgSW52YWxpZFRva2VuRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXNzaW9uLnNlbmQoJ+ivt+WFiOS9v+eUqCBnaXRodWIuYXV0aCA8dXNlcm5hbWU+IOaIliBnaXRodWIudG9rZW4gPHRva2VuPiDorr7nva7lh63mja7jgIInKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBbbWVzc2FnZSwgJHNldF0gPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UpIGF3YWl0IHNlc3Npb24uc2VuZChtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBpZiAoJHNldCkgYXdhaXQgY29sbERhdGEudXBkYXRlT25lKHsgX2lkOiByZWxhdGl2ZUV2ZW50Ll9pZCB9LCB7ICRzZXQgfSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7IHNlc3Npb24uc2VuZChlLm1lc3NhZ2UpOyB9XG4gICAgICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBhcHAuc2VsZWN0KCdncm91cElkJykuY29tbWFuZCgnZ2l0aHViLmxpc3RlbiA8cmVwbz4nLCAn55uR5ZCs5LiA5LiqUmVwb3NpdG9yeeeahOS6i+S7ticpXG4gICAgICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSwgcmVwbykgPT4ge1xuICAgICAgICAgICAgICAgIHJlcG8gPSByZXBvLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlcG8uc3BsaXQoJy8nKS5sZW5ndGggIT09IDIpIHJldHVybiAn5peg5pWI5Zyw5Z2AJztcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gYXdhaXQgY29sbC5maW5kT25lKHsgX2lkOiByZXBvIH0pO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGNvbGwudXBkYXRlT25lKFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBfaWQ6IHJlcG8gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgJGFkZFRvU2V0OiB7IHRhcmdldDogYCR7c2Vzc2lvbi5wbGF0Zm9ybX06JHtzZXNzaW9uLmdyb3VwSWR9YCB9IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHVwc2VydDogdHJ1ZSB9LFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYFdhdGNoaW5nICR7cmVwb31gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhd2FpdCBjb2xsLmluc2VydE9uZSh7IF9pZDogcmVwbywgdGFyZ2V0OiBbYCR7c2Vzc2lvbi5wbGF0Zm9ybX06JHtzZXNzaW9uLmdyb3VwSWR9YF0gfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBXYXRjaGluZyAke3JlcG99XG4o6K+35Yib5bu6IHdlYmhvb2sg5oqV6YCS6IezIGh0dHBzOi8vZ2l0aHViLnVuZGVmaW5lZC5tb2Uvd2ViaG9vayDvvIzmoLzlvI8gYXBwbGljYXRpb24vanNvbiApYDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGFwcC5zZWxlY3QoJ2dyb3VwSWQnKS5jb21tYW5kKCdnaXRodWIubGlzdCcsICdMaXN0IHJlcG9zJylcbiAgICAgICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVwb3MgPSBhd2FpdCBjb2xsLmZpbmQoeyB0YXJnZXQ6IGAke3Nlc3Npb24ucGxhdGZvcm19OiR7c2Vzc2lvbi5ncm91cElkfWAgfSkucHJvamVjdCh7IF9pZDogMSB9KS50b0FycmF5KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcG9zLm1hcCgoZG9jKSA9PiBkb2MuX2lkKS5qb2luKCdcXG4nKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGFwcC5zZWxlY3QoJ2dyb3VwSWQnKS5jb21tYW5kKCdnaXRodWIuY2FuY2VsIDxyZXBvPicsICflj5bmtojkuIDkuKpSZXBvc2l0b3J555qE5LqL5Lu2JylcbiAgICAgICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9LCByZXBvKSA9PiB7XG4gICAgICAgICAgICAgICAgYXdhaXQgY29sbC51cGRhdGVPbmUoXG4gICAgICAgICAgICAgICAgICAgIHsgX2lkOiByZXBvLnRvTG93ZXJDYXNlKCkgfSxcbiAgICAgICAgICAgICAgICAgICAgeyAkcHVsbDogeyB0YXJnZXQ6IGAke3Nlc3Npb24ucGxhdGZvcm19OiR7c2Vzc2lvbi5ncm91cElkfWAgfSB9LFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBDYW5jZWxsZWQgJHtyZXBvfS5gO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgYXBwLmNvbW1hbmQoJ2dpdGh1Yi50b2tlbiA8dG9rZW4+JywgJ+iuvue9rnRva2VuJylcbiAgICAgICAgICAgIC51c2VyRmllbGRzKFsnR2l0aHViVG9rZW4nXSlcbiAgICAgICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9LCB0b2tlbikgPT4ge1xuICAgICAgICAgICAgICAgIHNlc3Npb24udXNlci5HaXRodWJUb2tlbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgYWNjZXNzX3Rva2VuOiB0b2tlbixcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaF90b2tlbjogJycsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+iuvue9ruaIkOWKnyc7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBhcHAuY29tbWFuZCgnZ2l0aHViLmF1dGggPHVzZXJuYW1lPicsICfnmbvlvZXotKblj7cnKVxuICAgICAgICAgICAgLnVzZXJGaWVsZHMoWydHaXRodWJUb2tlbiddKVxuICAgICAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0sIGxvZ2luKSA9PiBg6K+354K55Ye75LiL6Z2i55qE6ZO+5o6l57un57ut5pON5L2c77yaXG5odHRwczovL2dpdGh1Yi5jb20vbG9naW4vb2F1dGgvYXV0aG9yaXplP2NsaWVudF9pZD0ke2NvbmZpZy5jbGllbnRfaWR9JnN0YXRlPSR7c2Vzc2lvbi5wbGF0Zm9ybX06JHtzZXNzaW9uLnVzZXJJZH0mcmVkaXJlY3RfdXJsPSR7Y29uZmlnLnJlZGlyZWN0X3VyaX0mc2NvcGU9YWRtaW4lM0FyZXBvX2hvb2slMkNyZXBvJmxvZ2luPSR7bG9naW59YCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICB9KTtcbn07XG4iLCJpbXBvcnQgeyBleGVjIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IHRtcGRpciB9IGZyb20gJ29zJztcbmltcG9ydCB7IENvbnRleHQgfSBmcm9tICdrb2lzaGktY29yZSc7XG5pbXBvcnQgeyBzbGVlcCB9IGZyb20gJ2tvaXNoaS11dGlscyc7XG5pbXBvcnQgeyB1bmxpbmsgfSBmcm9tICdmcy1leHRyYSc7XG5cbmV4cG9ydCBjb25zdCBhcHBseSA9IChjdHg6IENvbnRleHQpID0+IHtcbiAgICBjdHguY29tbWFuZCgnZ2xhZG9zIDxtZXNzYWdlOnRleHQ+JywgJ0dsYWRvcycsIHsgbWluSW50ZXJ2YWw6IDMwMDAwIH0pXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9LCB0ZXh0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpZCA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGNvbnN0IHdhdiA9IHBhdGgucmVzb2x2ZSh0bXBkaXIoKSwgYCR7aWR9LndhdmApO1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgICAgICBleGVjKGB3Z2V0IC0tdHJpZXM9NTAgLU8gJHt3YXZ9IGh0dHBzOi8vZ2xhZG9zLmMtbmV0Lm9yZy9nZW5lcmF0ZT90ZXh0PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHRleHQpfWAsIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikgcmVzb2x2ZShlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uLnNlbmQoJ+ivt+axguato+WcqOWkhOeQhuS4re+8jOivt+eojeWQju+8iOi/meWPr+iDvemcgOimgeaVsOWIhumSn++8iScpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHNsZWVwKDEwMDAwMCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzMSA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGV4ZWMoYHdnZXQgLS10cmllcz01MCAtTyAke3dhdn0gaHR0cHM6Ly9nbGFkb3MuYy1uZXQub3JnL2dlbmVyYXRlP3RleHQ9JHtlbmNvZGVVUklDb21wb25lbnQodGV4dCl9YCwgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikgcmVzb2x2ZShlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAocmVzMSkgdGhyb3cgbmV3IEVycm9yKCdTZXJ2aWNlIEVycm9yJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCBzZXNzaW9uLnNlbmQoYFtDUTpyZWNvcmQsZmlsZT1maWxlOi8vJHt3YXZ9XWApO1xuICAgICAgICAgICAgYXdhaXQgdW5saW5rKHdhdik7XG4gICAgICAgIH0pO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGdsb2JhbC1yZXF1aXJlICovXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBzdXBlcmFnZW50IGZyb20gJ3N1cGVyYWdlbnQnO1xuaW1wb3J0IHsgd3JpdGVGaWxlIH0gZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSAna29pc2hpLWNvcmUnO1xuXG5jb25zdCBkYiA9IHt9O1xuXG50cnkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW5yZXNvbHZlZFxuICAgIGNvbnN0IGMgPSByZXF1aXJlKCcuLi8uLi8uY2FjaGUvaHNfY2FyZF96aENOLmpzb24nKTtcbiAgICBmb3IgKGNvbnN0IGNhcmQgb2YgYykge1xuICAgICAgICBkYltjYXJkLmlkXSA9IGNhcmQuaWQ7XG4gICAgICAgIGRiW2NhcmQubmFtZV0gPSBjYXJkLmlkO1xuICAgIH1cbn0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJZ25vcmVcbn1cblxudHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVucmVzb2x2ZWRcbiAgICBjb25zdCBjID0gcmVxdWlyZSgnLi4vLi4vLmNhY2hlL2hzX2NhcmRfZW5VUy5qc29uJyk7XG4gICAgZm9yIChjb25zdCBjYXJkIG9mIGMpIHtcbiAgICAgICAgZGJbY2FyZC5uYW1lXSA9IGNhcmQuaWQ7XG4gICAgfVxufSBjYXRjaCAoZSkge1xuICAgIC8vIElnbm9yZVxufVxuXG5hc3luYyBmdW5jdGlvbiBfY2FyZCh7IHNlc3Npb24gfSwgaWQpIHtcbiAgICBjb25zdCB1cmwgPSBpZC50cmltKCk7XG4gICAgaWYgKCF1cmwpIHJldHVybiBhd2FpdCBzZXNzaW9uLnNlbmQoJ+ivt+i+k+WFpeimgeafpeeci+eahENhcmQgSUQvTmFtZScpO1xuICAgIGlmICghT2JqZWN0LmtleXMoZGIpLmxlbmd0aCkge1xuICAgICAgICAvLyBMb2FkIENOXG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHN1cGVyYWdlbnQuZ2V0KCdodHRwczovL2FwaS5oZWFydGhzdG9uZWpzb24uY29tL3YxL2xhdGVzdC96aENOL2NhcmRzLmNvbGxlY3RpYmxlLmpzb24nKTtcbiAgICAgICAgYXdhaXQgd3JpdGVGaWxlKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICcuLicsICcuY2FjaGUnLCAnaHNfY2FyZF96aENOLmpzb24nKSwgSlNPTi5zdHJpbmdpZnkocmVzLmJvZHkpKTtcbiAgICAgICAgZm9yIChjb25zdCBjYXJkIG9mIHJlcy5ib2R5KSB7XG4gICAgICAgICAgICBkYltjYXJkLmlkXSA9IGNhcmQuaWQ7XG4gICAgICAgICAgICBkYltjYXJkLm5hbWVdID0gY2FyZC5pZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBMb2FkIEVOXG4gICAgICAgIGNvbnN0IHJlID0gYXdhaXQgc3VwZXJhZ2VudC5nZXQoJ2h0dHBzOi8vYXBpLmhlYXJ0aHN0b25lanNvbi5jb20vdjEvbGF0ZXN0L2VuVVMvY2FyZHMuY29sbGVjdGlibGUuanNvbicpO1xuICAgICAgICBhd2FpdCB3cml0ZUZpbGUocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJy4uJywgJy5jYWNoZScsICdoc19jYXJkX2VuVVMuanNvbicpLCBKU09OLnN0cmluZ2lmeShyZS5ib2R5KSk7XG4gICAgICAgIGZvciAoY29uc3QgY2FyZCBvZiByZS5ib2R5KSB7XG4gICAgICAgICAgICBkYltjYXJkLm5hbWVdID0gY2FyZC5pZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWRiW2lkXSkgcmV0dXJuIGF3YWl0IHNlc3Npb24uc2VuZCgnTm90Rm91bmQnKTtcbiAgICByZXR1cm4gc2Vzc2lvbi5zZW5kKGBbQ1E6aW1hZ2UsZmlsZT1odHRwczovL2FydC5oZWFydGhzdG9uZWpzb24uY29tL3YxL3JlbmRlci9sYXRlc3QvemhDTi81MTJ4LyR7ZGJbaWRdfS5wbmddYCk7XG59XG5cbmV4cG9ydCBjb25zdCBhcHBseSA9IChhcHA6IEFwcCkgPT4ge1xuICAgIGFwcC5jb21tYW5kKCdjYXJkIDxuYW1lL2lkOnRleHQ+JywgJ0dldCBhIGNhcmQnKS5hY3Rpb24oX2NhcmQpO1xufTtcbiIsImltcG9ydCB7IEFwcCB9IGZyb20gJ2tvaXNoaS1jb3JlJztcblxuY29uc3QgQUxMT1cgPSBbXG4gICAgJzEwMCcsICcxMDEnLCAnMjAwJywgJzIwMScsICcyMDInLFxuICAgICcyMDQnLCAnMjA2JywgJzIwNycsICczMDAnLCAnMzAxJyxcbiAgICAnMzAyJywgJzMwMycsICczMDQnLCAnMzA1JywgJzMwNycsXG4gICAgJzQwMCcsICc0MDEnLCAnNDAyJywgJzQwMycsICc0MDQnLFxuICAgICc0MDUnLCAnNDA2JywgJzQwOCcsICc0MDknLCAnNDEwJyxcbiAgICAnNDExJywgJzQxMicsICc0MTMnLCAnNDE0JywgJzQxNScsXG4gICAgJzQxNicsICc0MTcnLCAnNDE4JywgJzQyMCcsICc0MjEnLFxuICAgICc0MjInLCAnNDIzJywgJzQyNCcsICc0MjUnLCAnNDI2JyxcbiAgICAnNDI5JywgJzQzMScsICc0NDQnLCAnNDUwJywgJzQ1MScsXG4gICAgJzQ5OScsICc1MDAnLCAnNTAxJywgJzUwMicsICc1MDMnLFxuICAgICc1MDQnLCAnNTA1JywgJzUwNicsICc1MDcnLCAnNTA4JyxcbiAgICAnNTA5JywgJzUxMCcsICc1MTEnLCAnNTk5Jyxcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseShhcHA6IEFwcCkge1xuICAgIGFwcC5jb21tYW5kKCdjYXQgPGlkPicsICdodHRwLmNhdCcsIHsgbWluSW50ZXJ2YWw6IDEwMDAgfSlcbiAgICAgICAgLmFjdGlvbihhc3luYyAoXywgaWQpID0+IHtcbiAgICAgICAgICAgIGlmICghQUxMT1cuaW5jbHVkZXMoaWQpKSByZXR1cm4gYOS9oOWutmh0dHDljY/orq7kvJrov5Tlm54ke2lkfe+8n2A7XG4gICAgICAgICAgICByZXR1cm4gYFtDUTppbWFnZSxmaWxlPWh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9naC9odHRwY2F0cy9odHRwLmNhdC9wdWJsaWMvaW1hZ2VzLyR7aWR9LmpwZ11gO1xuICAgICAgICB9KTtcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9uby1keW5hbWljLXJlcXVpcmUgKi9cbmltcG9ydCB7IHJlc29sdmUgfSBmcm9tICdwYXRoJztcbmltcG9ydCB7IGNyZWF0ZUhhc2ggfSBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IHsgQ29udGV4dCwgTG9nZ2VyLCBzZWdtZW50IH0gZnJvbSAna29pc2hpLWNvcmUnO1xuaW1wb3J0IHlhbWwgZnJvbSAnanMteWFtbCc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgcmVhZEZpbGUgfSBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgc2hhcnAgZnJvbSAnc2hhcnAnO1xuXG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKCdpbWFnZXRhZycpO1xuY29uc3QgaW1hZ2VSRSA9IC8oXFxbQ1E6aW1hZ2UsZmlsZT1bXixdKyx1cmw9W15cXF1dK1xcXSkvO1xuY29uc3QgY2hlY2tHcm91cEFkbWluID0gKHsgc2Vzc2lvbiB9KSA9PiAoXG4gICAgKHNlc3Npb24udXNlci5hdXRob3JpdHkgPj0gNCB8fCBzZXNzaW9uLmF1dGhvci5yb2xlcy5pbmNsdWRlcygnYWRtaW4nKSB8fCBzZXNzaW9uLmF1dGhvci5yb2xlcy5pbmNsdWRlcygnb3duZXInKSlcbiAgICAgICAgPyBudWxsXG4gICAgICAgIDogJ+S7heeuoeeQhuWRmOWPr+aJp+ihjOivpeaTjeS9nOOAgidcbik7XG5cbmludGVyZmFjZSBJbWFnZVRhZ0NhY2hlIHtcbiAgICBfaWQ6IHN0cmluZyxcbiAgICBtZDU6IHN0cmluZyxcbiAgICB0eHQ6IHN0cmluZyxcbn1cbmRlY2xhcmUgbW9kdWxlICdrb2lzaGktY29yZScge1xuICAgIGludGVyZmFjZSBDaGFubmVsIHtcbiAgICAgICAgZW5hYmxlQXV0b1RhZz86IG51bWJlcixcbiAgICB9XG4gICAgaW50ZXJmYWNlIFRhYmxlcyB7XG4gICAgICAgICdpbWFnZS50YWcnOiBJbWFnZVRhZ0NhY2hlXG4gICAgfVxufVxuXG5mdW5jdGlvbiBNRDUoYnVmZmVyOiBCdWZmZXIpIHtcbiAgICBjb25zdCBoYXNoID0gY3JlYXRlSGFzaCgnbWQ1Jyk7XG4gICAgaGFzaC51cGRhdGUoYnVmZmVyKTtcbiAgICByZXR1cm4gaGFzaC5kaWdlc3QoJ2hleCcpO1xufVxuXG5leHBvcnQgY29uc3QgYXBwbHkgPSBhc3luYyAoY3R4OiBDb250ZXh0LCBjb25maWc6IGFueSA9IHt9KSA9PiB7XG4gICAgY29uc3QgdHJhbnNmaWxlID0gYXdhaXQgcmVhZEZpbGUocmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCAnZGF0YWJhc2UnLCAnaW1hZ2UudGFncy50cmFuc2xhdGlvbi55YW1sJykpO1xuICAgIGNvbnN0IHRyYW5zID0geWFtbC5zYWZlTG9hZCh0cmFuc2ZpbGUudG9TdHJpbmcoKSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV2YWxcbiAgICBjb25zdCBuYW1lcyA9IGV2YWwoJ3JlcXVpcmUnKShgJHtwcm9jZXNzLmN3ZCgpfS9kYXRhYmFzZS9jbGFzc19uYW1lc182MDAwLmpzb25gKTtcblxuICAgIGN0eC5vbignYmVmb3JlLWF0dGFjaC1jaGFubmVsJywgKF8sIGZpZWxkcykgPT4ge1xuICAgICAgICBmaWVsZHMuYWRkKCdlbmFibGVBdXRvVGFnJyk7XG4gICAgfSk7XG5cbiAgICBjdHgubWlkZGxld2FyZShhc3luYyAoc2Vzc2lvbiwgbmV4dCkgPT4ge1xuICAgICAgICBjb25zdCBjYXB0dXJlID0gaW1hZ2VSRS5leGVjKHNlc3Npb24uY29udGVudCk7XG4gICAgICAgIGlmIChjYXB0dXJlKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBpZiAoc2Vzc2lvbi5jaGFubmVsLmVuYWJsZUF1dG9UYWcgPT09IDIpIHNlc3Npb24uZXhlY3V0ZVNpbGVudChgdGFnICR7Y2FwdHVyZVsxXX1gKTtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGVsc2UgaWYgKHNlc3Npb24uY2hhbm5lbC5lbmFibGVBdXRvVGFnID09PSAxKSBzZXNzaW9uLmV4ZWN1dGUoYHRhZyAke2NhcHR1cmVbMV19YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICB9KTtcblxuICAgIGN0eC5hcHAub24oJ2Nvbm5lY3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbGwgPSBjdHguYXBwLmRhdGFiYXNlLm1vbmdvLmNvbGxlY3Rpb24oJ2ltYWdlLnRhZycpO1xuICAgICAgICBjb2xsLmNyZWF0ZUluZGV4KHsgbWQ1OiAxIH0sIHsgdW5pcXVlOiB0cnVlIH0pO1xuXG4gICAgICAgIGN0eC5jb21tYW5kKCd0YWcgW2ltYWdlXScsICdHZXQgaW1hZ2UgdGFnJywgeyBoaWRkZW46IHRydWUsIG1pbkludGVydmFsOiAyMDAwIH0pXG4gICAgICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSwgaW1hZ2UpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWltYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBzZXNzaW9uLnNlbmQoJ+ivt+WPkemAgeWbvueJh+OAgicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2UgPSBhd2FpdCBzZXNzaW9uLnByb21wdCgzMDAwMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGV0IGlkO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdXJsID0gaW1hZ2U7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBzZWdtZW50LmZyb20oaW1hZ2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGUudHlwZSAhPT0gJ2ltYWdlJykgdGhyb3cgbmV3IEVycm9yKCfmsqHmnInlj5HnjrDlm77niYfjgIInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IGZpbGUuZGF0YS51cmw7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZCA9IGZpbGUuZGF0YS5maWxlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghdXJsLnN0YXJ0c1dpdGgoJ2h0dHAnKSkgdGhyb3cgbmV3IEVycm9yKCfmsqHmnInlj5HnjrDlm77niYfjgIInKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpZCkgaWQgPSBCdWZmZXIuZnJvbSh1cmwpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGMgPSBhd2FpdCBjb2xsLmZpbmRPbmUoeyBfaWQ6IGlkIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYykgcmV0dXJuIGMudHh0O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IGF4aW9zLmdldDxBcnJheUJ1ZmZlcj4odXJsLCB7IHJlc3BvbnNlVHlwZTogJ2FycmF5YnVmZmVyJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnVmID0gQnVmZmVyLmFsbG9jKGRhdGEuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWYubGVuZ3RoOyArK2kpIGJ1ZltpXSA9IHZpZXdbaV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1kNSA9IE1ENShidWYpO1xuICAgICAgICAgICAgICAgICAgICBjID0gYXdhaXQgY29sbC5maW5kT25lKHsgbWQ1IH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYykgcmV0dXJuIGMudHh0O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbWcgPSAoYXdhaXQgc2hhcnAoYnVmKS5wbmcoKS50b0J1ZmZlcigpKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCdkb3dubG9hZGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YTogcHJvYnMgfSA9IGF3YWl0IGF4aW9zLnBvc3QoJ2h0dHA6Ly8xMjcuMC4wLjE6MTAzNzcvJywgeyBpbWcgfSkgYXMgYW55O1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHByb2JzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVycm1zZyA9IHByb2JzLnNwbGl0KCdIVFRQJylbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvYnMuaW5jbHVkZXMoJ291dHB1dCB3aXRoIHNoYXBlJykgfHwgcHJvYnMuaW5jbHVkZXMoJ3NpemUgb2YgdGVuc29yJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJtc2cgPSAn5LiN5pSv5oyB55qE5Zu+54mH5qC85byP77yI6K+35bCd6K+V5oiq5Zu+5Y+R6YCB77yJJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBjb2xsLmluc2VydE9uZSh7IF9pZDogaWQsIG1kNSwgdHh0OiBlcnJtc2cgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJybXNnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWdzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGxldCB0eHQgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIHByb2JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdzLnB1c2gobmFtZXNbaVswXV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHh0ICs9IGAke3RyYW5zW25hbWVzW2lbMF1dXSB8fCBuYW1lc1tpWzBdXX06JHtNYXRoLmZsb29yKGlbMV0gKiAxMDApfSUgIGA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8odHh0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZy51cmwgJiYgY29uZmlnLnRhZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdGFnIG9mIHRhZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnLnRhZ3MuaW5jbHVkZXModGFnKSB8fCB0YWdzLmxlbmd0aCA+IDcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXhpb3MuZ2V0KGAke2NvbmZpZy51cmx9JnNvdXJjZT0ke2VuY29kZVVSSUNvbXBvbmVudCh1cmwpfSZmb3JtYXQ9anNvbmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgY29sbC5pbnNlcnRPbmUoeyBfaWQ6IGlkLCBtZDUsIHR4dCB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHR4dDtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnRvU3RyaW5nKCkuc3BsaXQoJ1xcbicpWzBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGN0eC5jb21tYW5kKCd0YWcuZGlzYWJsZScsICflnKjnvqTlhoXnpoHnlKgnLCB7IG5vUmVkaXJlY3Q6IHRydWUgfSlcbiAgICAgICAgICAgIC51c2VyRmllbGRzKFsnYXV0aG9yaXR5J10pXG4gICAgICAgICAgICAuY2hlY2soY2hlY2tHcm91cEFkbWluKVxuICAgICAgICAgICAgLmNoYW5uZWxGaWVsZHMoWydlbmFibGVBdXRvVGFnJ10pXG4gICAgICAgICAgICAuYWN0aW9uKCh7IHNlc3Npb24gfSkgPT4ge1xuICAgICAgICAgICAgICAgIHNlc3Npb24uY2hhbm5lbC5lbmFibGVBdXRvVGFnID0gMDtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0Rpc2FibGVkJztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGN0eC5jb21tYW5kKCd0YWcuZW5hYmxlJywgJ+WcqOe+pOWGheWQr+eUqCcsIHsgbm9SZWRpcmVjdDogdHJ1ZSB9KVxuICAgICAgICAgICAgLm9wdGlvbignc2lsZW50JywgJy1zJylcbiAgICAgICAgICAgIC51c2VyRmllbGRzKFsnYXV0aG9yaXR5J10pXG4gICAgICAgICAgICAuY2hlY2soY2hlY2tHcm91cEFkbWluKVxuICAgICAgICAgICAgLmNoYW5uZWxGaWVsZHMoWydlbmFibGVBdXRvVGFnJ10pXG4gICAgICAgICAgICAuYWN0aW9uKCh7IHNlc3Npb24sIG9wdGlvbnMgfSkgPT4ge1xuICAgICAgICAgICAgICAgIHNlc3Npb24uY2hhbm5lbC5lbmFibGVBdXRvVGFnID0gb3B0aW9ucy5zaWxlbnQgPyAyIDogMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VuYWJsZWQnO1xuICAgICAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuIiwiaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gJ2tvaXNoaS1jb3JlJztcblxuZGVjbGFyZSBtb2R1bGUgJ2tvaXNoaS1jb3JlJyB7XG4gICAgaW50ZXJmYWNlIENoYW5uZWwge1xuICAgICAgICBqand6OiBbbnVtYmVyLCBzdHJpbmddW11cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseShjdHg6IENvbnRleHQpIHtcbiAgICBjdHguY29tbWFuZCgnamp3eicsICfnu53lj6Xmlofnq6AnKTtcbiAgICBjdHguY29tbWFuZCgnamp3ei5hZGQgPGNvbnRlbnQ6dGV4dD4nLCAn5Yib5bu6L+a3u+WKoCcpXG4gICAgICAgIC5jaGFubmVsRmllbGRzKFsnamp3eiddKVxuICAgICAgICAudXNlckZpZWxkcyhbJ2lkJ10pXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9LCBjb250ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoY29udGVudC5sZW5ndGggPiA3KSByZXR1cm4gJ+S9oOaAjuS5iOWGmei/meS5iOmVvyc7XG4gICAgICAgICAgICBpZiAoIXNlc3Npb24uY2hhbm5lbC5qand6KSBzZXNzaW9uLmNoYW5uZWwuamp3eiA9IFtdO1xuICAgICAgICAgICAgZWxzZSBpZiAoKHNlc3Npb24uY2hhbm5lbC5qand6W3Nlc3Npb24uY2hhbm5lbC5qand6Lmxlbmd0aCAtIDFdIHx8IFtdKVswXSA9PT0gK3Nlc3Npb24udXNlci5pZCkgcmV0dXJuICfkvaDkuI3og73ov57nu63mt7vliqAnO1xuICAgICAgICAgICAgc2Vzc2lvbi5jaGFubmVsLmpqd3oucHVzaChbK3Nlc3Npb24udXNlci5pZCwgY29udGVudF0pO1xuICAgICAgICAgICAgcmV0dXJuIGAke3Nlc3Npb24uY2hhbm5lbC5qand6Lm1hcCgoaSkgPT4gaVsxXSkuam9pbignJyl9Li4uYDtcbiAgICAgICAgfSk7XG5cbiAgICBjdHguY29tbWFuZCgnamp3ei5lbmQnLCAn57uT5p2fJylcbiAgICAgICAgLmNoYW5uZWxGaWVsZHMoWydqand6J10pXG4gICAgICAgIC51c2VyRmllbGRzKFsnaWQnXSlcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0pID0+IHtcbiAgICAgICAgICAgIGlmICghc2Vzc2lvbi5jaGFubmVsLmpqd3opIHJldHVybiAn6L+Y5pyq5byA5aeLJztcbiAgICAgICAgICAgIHNlc3Npb24uY2hhbm5lbC5qand6ID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBzZXNzaW9uLmNoYW5uZWwuamp3ei5tYXAoKGkpID0+IGlbMV0pLmpvaW4oJycpO1xuICAgICAgICB9KTtcblxuICAgIGN0eC5jb21tYW5kKCdqand6LmVkaXQgPGNvbnRlbnQ6dGV4dD4nLCAn57yW6L6RJylcbiAgICAgICAgLmNoYW5uZWxGaWVsZHMoWydqand6J10pXG4gICAgICAgIC51c2VyRmllbGRzKFsnaWQnXSlcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0sIGNvbnRlbnQpID0+IHtcbiAgICAgICAgICAgIGlmICghc2Vzc2lvbi5jaGFubmVsLmpqd3opIHJldHVybiAn6L+Y5pyq5byA5aeLJzsgaWYgKGNvbnRlbnQubGVuZ3RoID4gNykgcmV0dXJuICfkvaDmgI7kuYjlhpnov5nkuYjplb8nO1xuICAgICAgICAgICAgaWYgKHNlc3Npb24uY2hhbm5lbC5qand6W3Nlc3Npb24uY2hhbm5lbC5qand6Lmxlbmd0aCAtIDFdWzBdICE9PSArc2Vzc2lvbi51c2VyLmlkKSByZXR1cm4gJ+S4iuS4gOadoeS4jeaYr+S9oOaJgOe8lui+kSc7XG4gICAgICAgICAgICBzZXNzaW9uLmNoYW5uZWwuamp3eltzZXNzaW9uLmNoYW5uZWwuamp3ei5sZW5ndGggLSAxXVsxXSA9IGNvbnRlbnQ7XG4gICAgICAgICAgICByZXR1cm4gYCR7c2Vzc2lvbi5jaGFubmVsLmpqd3oubWFwKChpKSA9PiBpWzFdKS5qb2luKCcnKX0uLi5gO1xuICAgICAgICB9KTtcblxuICAgIGN0eC5jb21tYW5kKCdqand6LmRlbCcsICfliKDpmaQnKVxuICAgICAgICAuY2hhbm5lbEZpZWxkcyhbJ2pqd3onXSlcbiAgICAgICAgLnVzZXJGaWVsZHMoWydpZCddKVxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFzZXNzaW9uLmNoYW5uZWwuamp3eikgcmV0dXJuICfov5jmnKrlvIDlp4snO1xuICAgICAgICAgICAgaWYgKHNlc3Npb24uY2hhbm5lbC5qand6W3Nlc3Npb24uY2hhbm5lbC5qand6Lmxlbmd0aCAtIDFdWzBdICE9PSArc2Vzc2lvbi51c2VyLmlkKSByZXR1cm4gJ+S4iuS4gOadoeS4jeaYr+S9oOaJgOe8lui+kSc7XG4gICAgICAgICAgICBzZXNzaW9uLmNoYW5uZWwuamp3ei5wb3AoKTtcbiAgICAgICAgICAgIHJldHVybiBgJHtzZXNzaW9uLmNoYW5uZWwuamp3ei5tYXAoKGkpID0+IGlbMV0pLmpvaW4oJycpfS4uLmA7XG4gICAgICAgIH0pO1xufVxuIiwiaW1wb3J0IHsgQXBwIH0gZnJvbSAna29pc2hpLWNvcmUnO1xuaW1wb3J0IHsgT2JqZWN0SUQgfSBmcm9tICdtb25nb2RiJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IGVuZE9mVG9kYXkgfSBmcm9tICcuLi9saWIvZXhwaXJlJztcblxubW9tZW50LmxvY2FsZSgnemgtY24nKTtcblxuaW50ZXJmYWNlIFByaWNlIHtcbiAgICBfaWQ6IG51bWJlcixcbiAgICBwcmljZTogbnVtYmVyLFxuICAgIGV4cGlyZTogRGF0ZSxcbiAgICBib3VnaHQ6IG51bWJlcixcbn1cblxuaW50ZXJmYWNlIFN0b2NrIHtcbiAgICBfaWQ6IE9iamVjdElELFxuICAgIHVzZXJJZDogbnVtYmVyLFxuICAgIG51bWJlcjogbnVtYmVyLFxuICAgIGJ1eVByaWNlOiBudW1iZXIsXG4gICAgZXhwaXJlOiBEYXRlLFxufVxuZGVjbGFyZSBtb2R1bGUgJ2tvaXNoaS1jb3JlJyB7XG4gICAgaW50ZXJmYWNlIFRhYmxlcyB7XG4gICAgICAgICdrYWJ1LnByaWNlJzogUHJpY2UsXG4gICAgICAgICdrYWJ1LnN0b2NrJzogU3RvY2ssXG4gICAgfVxufVxuXG5pbnRlcmZhY2UgQ29uZmlnIHtcbiAgICBleHBpcmVEYXlzPzogbnVtYmVyLFxuICAgIHNlcnZpY2VGZWU/OiBudW1iZXIsXG4gICAgbWF4QnV5UGVyRGF5PzogbnVtYmVyLFxufVxuXG5jb25zdCBkZWZhdWx0Q29uZmlnID0ge1xuICAgIGV4cGlyZURheXM6IDcsXG4gICAgc2VydmljZUZlZTogMC4wMyxcbiAgICBtYXhCdXlQZXJEYXk6IDEwLFxufTtcblxuZXhwb3J0IGNvbnN0IGFwcGx5ID0gKGFwcDogQXBwLCBjb25maWc6IENvbmZpZykgPT4ge1xuICAgIGNvbmZpZyA9IHsgLi4uZGVmYXVsdENvbmZpZywgLi4uY29uZmlnIH07XG5cbiAgICBhcHAub24oJ2Nvbm5lY3QnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHByaWNlQ29sbCA9IGFwcC5kYXRhYmFzZS5tb25nby5jb2xsZWN0aW9uKCdrYWJ1LnByaWNlJyk7XG4gICAgICAgIHByaWNlQ29sbC5jcmVhdGVJbmRleCgnZXhwaXJlJywgeyBleHBpcmVBZnRlclNlY29uZHM6IDAgfSk7XG5cbiAgICAgICAgY29uc3Qgc3RvY2tDb2xsID0gYXBwLmRhdGFiYXNlLm1vbmdvLmNvbGxlY3Rpb24oJ2thYnUuc3RvY2snKTtcbiAgICAgICAgc3RvY2tDb2xsLmNyZWF0ZUluZGV4KHsgdXNlcklkOiAxLCBleHBpcmU6IDEgfSk7XG4gICAgICAgIHN0b2NrQ29sbC5jcmVhdGVJbmRleCgnZXhwaXJlJywgeyBleHBpcmVBZnRlclNlY29uZHM6IDAgfSk7XG5cbiAgICAgICAgYXN5bmMgZnVuY3Rpb24gcHJpY2VUb2RheShfaWQ6IG51bWJlcikge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcHJpY2VDb2xsLmZpbmRPbmUoeyBfaWQgfSk7XG4gICAgICAgICAgICBpZiAocmVzKSByZXR1cm4gW3Jlcy5wcmljZSwgcmVzLmJvdWdodCB8fCAwXTtcbiAgICAgICAgICAgIGNvbnN0IHByaWNlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpIDwgMC41ID8gMTAgKyBNYXRoLnNxcnQoTWF0aC5yYW5kb20oKSAqIDQwMCkgOiA1MCAtIE1hdGguc3FydChNYXRoLnJhbmRvbSgpICogNDAwKSk7XG4gICAgICAgICAgICBhd2FpdCBwcmljZUNvbGwuaW5zZXJ0T25lKHtcbiAgICAgICAgICAgICAgICBfaWQsIHByaWNlLCBleHBpcmU6IGVuZE9mVG9kYXkoKSwgYm91Z2h0OiAwLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gW3ByaWNlLCAwXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFwcC5jb21tYW5kKCdrYWJ1LnF1ZXJ5JywgJ+afpeivouiHquW3seeahOW6k+WtmOS7peWPiuS7iuaXpeWkp+WktOiPnOS7t+agvCcpXG4gICAgICAgICAgICAuc2hvcnRjdXQoJ+afpeivouWkp+WktOiPnCcsIHsgcHJlZml4OiBmYWxzZSB9KVxuICAgICAgICAgICAgLnVzZXJGaWVsZHMoWydjb2luJywgJ2lkJ10pXG4gICAgICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IFtyZXMsIGNvdW50XSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICAgICAgc3RvY2tDb2xsLmZpbmQoeyB1c2VySWQ6ICtzZXNzaW9uLnVzZXIuaWQgfSkuc29ydCgnZXhwaXJlJywgMSkubGltaXQoMTApLnRvQXJyYXkoKSxcbiAgICAgICAgICAgICAgICAgICAgc3RvY2tDb2xsLmZpbmQoeyB1c2VySWQ6ICtzZXNzaW9uLnVzZXIuaWQgfSkuY291bnQoKSxcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICBsZXQgc3RvY2tMaXN0ID0gJyc7XG4gICAgICAgICAgICAgICAgbGV0IHN1bSA9IDA7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB7IG51bWJlciwgYnV5UHJpY2UsIGV4cGlyZSB9IG9mIHJlcykge1xuICAgICAgICAgICAgICAgICAgICBzdW0gKz0gbnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICBzdG9ja0xpc3QgKz0gYOS9oOaciSAke251bWJlcn0g5qO15LulICR7YnV5UHJpY2V9IOS4quehrOW4geavj+ajteS5sOWFpeeahOWkp+WktOiPnO+8jOWug+S7rOS8muWcqCAke21vbWVudChleHBpcmUpLmZyb21Ob3coKX0g54OC5o6J44CCXFxuYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgW3ByaWNlLCBib3VnaHRdID0gYXdhaXQgcHJpY2VUb2RheSgrc2Vzc2lvbi51c2VyLmlkKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjYW5CdXkgPSBjb25maWcubWF4QnV5UGVyRGF5IC0gYm91Z2h0O1xuICAgICAgICAgICAgICAgIGlmICghc2Vzc2lvbi51c2VyLmNvaW4pIHNlc3Npb24udXNlci5jb2luID0gMDtcbiAgICAgICAgICAgICAgICBpZiAoY291bnQgPT09IDApIHN0b2NrTGlzdCA9IGDkvaDnjrDlnKjmiYvkuIrov5jmsqHmnInlpKflpLToj5wkeyhzZXNzaW9uLnVzZXIuY29pbiA+PSBwcmljZSAmJiBjYW5CdXkpID8gJ++8jOimgeadpeS5sOeCueWQl++8nycgOiAn44CCJ31gO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvdW50ID4gcmVzLmxlbmd0aCkgc3RvY2tMaXN0ICs9IGDpmpDol4/kuoYgJHtjb3VudCAtIHJlcy5sZW5ndGh9IOS4quadoeebruOAgmA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGDkvaDnjrDlnKjlhbHmnIkgJHtzdW19IOajteWkp+WktOiPnOWSjCAke3Nlc3Npb24udXNlci5jb2lufSDkuKrnoazluIHjgIJcbuS7iuWkqeWNlue7mSAke3Nlc3Npb24udXNlcm5hbWV9IOeahOWkp+WktOiPnOS7t+agvOaYr+avj+ajtSAke3ByaWNlfSDnoazluIHjgILmgqjku4rlpKnov5jlj6/otK3lhaUke2NhbkJ1eX3kuKrlpKflpLToj5zjgIJcbiR7c3RvY2tMaXN0fWA7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBhcHAuY29tbWFuZCgna2FidS5idXkgW251bWJlcl0nLCBg6LSt5Lmw5aSn5aS06I+c44CC6Iul5LiN5oyH5a6a5pWw6YeP5YiZ5bC96YeP5aSa5Zyw6LSt5Lmw44CC5omL57ut6LS5ICR7Y29uZmlnLnNlcnZpY2VGZWUgKiAxMDB9JeOAgmAsIHsgbm9SZWRpcmVjdDogdHJ1ZSB9KVxuICAgICAgICAgICAgLnNob3J0Y3V0KCfotK3kubDlpKflpLToj5wnLCB7IHByZWZpeDogZmFsc2UsIGZ1enp5OiB0cnVlIH0pXG4gICAgICAgICAgICAudXNlckZpZWxkcyhbJ2NvaW4nLCAnaWQnXSlcbiAgICAgICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9LCBhcmcpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBbcHJpY2UsIGJvdWdodF0gPSBhd2FpdCBwcmljZVRvZGF5KCtzZXNzaW9uLnVzZXIuaWQpO1xuICAgICAgICAgICAgICAgIGlmICghc2Vzc2lvbi51c2VyLmNvaW4pIHNlc3Npb24udXNlci5jb2luID0gMDtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXhOdW1iZXIgPSBNYXRoLmZsb29yKHNlc3Npb24udXNlci5jb2luIC8gcHJpY2UgLyAoMSArIGNvbmZpZy5zZXJ2aWNlRmVlKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbnVtYmVyID0gTWF0aC5taW4oY29uZmlnLm1heEJ1eVBlckRheSAtIGJvdWdodCwgKyhhcmcgPz8gbWF4TnVtYmVyKSk7XG4gICAgICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcikgfHwgbnVtYmVyIDw9IDAgfHwgbnVtYmVyID4gbWF4TnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBg6LSt5Lmw5pWw6YeP6ZyA6KaB5pivIDF+JHttYXhOdW1iZXJ9IOS5i+mXtOeahOato+aVtOaVsOOAgmA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGV4cGlyZSA9IG1vbWVudCgpO1xuICAgICAgICAgICAgICAgIGV4cGlyZS5hZGQoY29uZmlnLmV4cGlyZURheXMsICdkYXlzJyk7XG4gICAgICAgICAgICAgICAgYXdhaXQgc3RvY2tDb2xsLmluc2VydE9uZSh7XG4gICAgICAgICAgICAgICAgICAgIF9pZDogbmV3IE9iamVjdElEKCksXG4gICAgICAgICAgICAgICAgICAgIHVzZXJJZDogK3Nlc3Npb24udXNlci5pZCxcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICBidXlQcmljZTogcHJpY2UsXG4gICAgICAgICAgICAgICAgICAgIGV4cGlyZTogZXhwaXJlLnRvRGF0ZSgpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvc3QgPSBNYXRoLmNlaWwoKDEgKyBjb25maWcuc2VydmljZUZlZSkgKiBwcmljZSAqIG51bWJlcik7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbi51c2VyLmNvaW4gLT0gY29zdDtcbiAgICAgICAgICAgICAgICBhd2FpdCBwcmljZUNvbGwudXBkYXRlT25lKFxuICAgICAgICAgICAgICAgICAgICB7IF9pZDogK3Nlc3Npb24udXNlci5pZCB9LFxuICAgICAgICAgICAgICAgICAgICB7ICRzZXQ6IHsgYm91Z2h0OiBudW1iZXIgKyBib3VnaHQgfSB9LFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGDkvaDoirHkuoYgJHtjb3N0fSDkuKrnoazluIHvvIjlkKsgJHtjb3N0IC0gcHJpY2UgKiBudW1iZXJ9IOS4quehrOW4geeahOaJi+e7rei0ue+8ieS7pSAke3ByaWNlfSDmr4/mo7XnmoTku7fmoLzotK3kubDkuoYgJHtudW1iZXJ9IOajteWkp+WktOiPnOOAglxu6KaB5piv5L2g5rKh5pyJ5ZyoICR7Y29uZmlnLmV4cGlyZURheXN9IOWkqeWGheaKiuWkp+WktOiPnOWNluaOie+8jOWug+S7rOWwseS8muWFqOmDqOeDguaOie+8jOWus+S9oOWkp+S6j+acrO+8geS4gOWumuimgeazqOaEj+i/meS4gOeCueWWlOOAgmA7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBhcHAuY29tbWFuZCgna2FidS5zZWxsIFtudW1iZXJdJywgYOWNluWHuuacgOaXqei0reS5sO+8iOacgOWFiOeDguaOie+8ieeahOWkp+WktOiPnOOAguiLpeS4jeaMh+WumuaVsOmHj+WImeWFqOmDqOWNluWHuuOAguaJi+e7rei0uSAke2NvbmZpZy5zZXJ2aWNlRmVlICogMTAwfSXjgIJgLCB7IG5vUmVkaXJlY3Q6IHRydWUgfSlcbiAgICAgICAgICAgIC5zaG9ydGN1dCgn5Y2W5Ye65aSn5aS06I+cJywgeyBwcmVmaXg6IGZhbHNlLCBmdXp6eTogdHJ1ZSB9KVxuICAgICAgICAgICAgLnVzZXJGaWVsZHMoWydjb2luJywgJ2lkJ10pXG4gICAgICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSwgYXJnKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsbE51bWJlciA9ICsoYXJnID8/IEluZmluaXR5KTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsbE51bWJlciAhPT0gSW5maW5pdHkgJiYgKCFOdW1iZXIuaXNJbnRlZ2VyKHNlbGxOdW1iZXIpIHx8IHNlbGxOdW1iZXIgPD0gMCkpIHJldHVybiAn5Y2W5Ye655qE5pWw6YeP6ZyA6KaB5piv5LiA5Liq5q2j5pW05pWwJztcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBzdG9ja0NvbGwuZmluZCh7IHVzZXJJZDogK3Nlc3Npb24udXNlci5pZCB9KS5zb3J0KCdleHBpcmUnLCAxKS50b0FycmF5KCk7XG4gICAgICAgICAgICAgICAgbGV0IHN1bSA9IDA7XG4gICAgICAgICAgICAgICAgbGV0IHVwZGF0ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsZXRlSWRzID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHJlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3VtICsgaXRlbS5udW1iZXIgPD0gc2VsbE51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VtICs9IGl0ZW0ubnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlSWRzLnB1c2goaXRlbS5faWQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN1bSA8IHNlbGxOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZSA9IHsgX2lkOiBpdGVtLl9pZCwgbmV3TnVtYmVyOiBpdGVtLm51bWJlciAtIChzZWxsTnVtYmVyIC0gc3VtKSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VtID0gc2VsbE51bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzdW0gPT09IDAgfHwgKHNlbGxOdW1iZXIgIT09IEluZmluaXR5ICYmIHN1bSAhPT0gc2VsbE51bWJlcikpIHJldHVybiAn5L2g5rKh5pyJ6Laz5aSf5aSa55qE5aSn5aS06I+c5p2l5Y2W5Ye677yBJztcbiAgICAgICAgICAgICAgICBjb25zdCBbcHJpY2VdID0gYXdhaXQgcHJpY2VUb2RheSgrc2Vzc2lvbi51c2VyLmlkKTtcbiAgICAgICAgICAgICAgICBpZiAoIXNlc3Npb24udXNlci5jb2luKSBzZXNzaW9uLnVzZXIuY29pbiA9IDA7XG4gICAgICAgICAgICAgICAgY29uc3QgZ2FpbiA9IE1hdGguZmxvb3IoKDEgLSBjb25maWcuc2VydmljZUZlZSkgKiBzdW0gKiBwcmljZSk7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbi51c2VyLmNvaW4gKz0gZ2FpbjtcbiAgICAgICAgICAgICAgICBpZiAoZGVsZXRlSWRzLmxlbmd0aCkgYXdhaXQgc3RvY2tDb2xsLmRlbGV0ZU1hbnkoeyBfaWQ6IHsgJGluOiBkZWxldGVJZHMgfSB9KTtcbiAgICAgICAgICAgICAgICBpZiAodXBkYXRlKSBhd2FpdCBzdG9ja0NvbGwudXBkYXRlT25lKHsgX2lkOiB1cGRhdGUuX2lkIH0sIHsgJHNldDogeyBudW1iZXI6IHVwZGF0ZS5uZXdOdW1iZXIgfSB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYOS9oOW3suaIkOWKn+WNluWHuiAke3N1bX0g5qO15aSn5aS06I+c77yM6I635b6X5LqGICR7Z2Fpbn0g5Liq56Gs5biB77yI5bey5omj6ZmkICR7c3VtICogcHJpY2UgLSBnYWlufSDkuKrnoazluIHnmoTmiYvnu63otLnvvInvvIFgO1xuICAgICAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBhcHAuY29tbWFuZCgna2FidScsICflpKflpLToj5wnKTtcbn07XG4iLCJpbXBvcnQgc3VwZXJhZ2VudCBmcm9tICdzdXBlcmFnZW50JztcbmltcG9ydCB7IENvbnRleHQsIExvZ2dlciB9IGZyb20gJ2tvaXNoaS1jb3JlJztcblxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcignbHVvZ3UnKTtcblxuZXhwb3J0IGNvbnN0IGFwcGx5ID0gKGN0eDogQ29udGV4dCkgPT4ge1xuICAgIGN0eC5jb21tYW5kKCdvaScsICdPSSByZWxhdGVkJyk7XG4gICAgY3R4LmNvbW1hbmQoJ29pL2x1b2d1JywgJ0x1b2d1Jyk7XG5cbiAgICBjdHguY29tbWFuZCgnb2kvbHVvZ3UucHJvYmxlbSA8cGlkPicsICfojrflj5ZMdW9ndemimOebricpXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKF8sIGlkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYWdlID0gYXdhaXQgY3R4LmFwcC5icm93c2VyLm5ld1BhZ2UoKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgcGFnZS5nb3RvKGBodHRwczovL3d3dy5sdW9ndS5jb20uY24vcHJvYmxlbS8ke2lkfWAsIHtcbiAgICAgICAgICAgICAgICAgICAgd2FpdFVudGlsOiAnbmV0d29ya2lkbGUwJyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcGFnZS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiAn6K+35rGC6LaF5pe244CCJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBhd2FpdCBwYWdlLiQoJy5wcm9ibGVtLWNhcmQnKTtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LnNjcmVlbnNob3Qoe30pLnRoZW4oYXN5bmMgKGJ1ZmZlcikgPT4ge1xuICAgICAgICAgICAgICAgIHBhZ2UuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYFtDUTppbWFnZSxmaWxlPWJhc2U2NDovLyR7YnVmZmVyLnRvU3RyaW5nKCdiYXNlNjQnKX1dYDtcbiAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHBhZ2UuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybiAn5oiq5Zu+5aSx6LSl44CCJztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgIGN0eC5jb21tYW5kKCdvaS9sdW9ndS51c2VyIDx1aWQ+JywgJ+afpeivoueUqOaItycpXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKF8sIGlkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBzdXBlcmFnZW50LmdldChgaHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3VzZXIvJHtpZH0/X2NvbnRlbnRPbmx5PTFgKVxuICAgICAgICAgICAgICAgIC5zZXQoJ1VzZXItQWdlbnQnLCAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IFRyaWRlbnQvNy4wOyBydjoxMS4wKSBsaWtlIEdlY2tvJyk7XG4gICAgICAgICAgICBpZiAocmVzLmJvZHkuY29kZSA9PT0gJzQwNCcpIHJldHVybiAn5rKh6L+Z5Liq5Lq6ISc7XG4gICAgICAgICAgICBjb25zdCB1ZG9jID0gcmVzLmJvZHkuY3VycmVudERhdGEudXNlcjtcbiAgICAgICAgICAgIGNvbnN0IGxldmVsID0gdWRvYy5jY2ZMZXZlbCA9PT0gMFxuICAgICAgICAgICAgICAgID8gJ+aXoC/ol4/kuobku6Xmlrnkvr/lgYcnXG4gICAgICAgICAgICAgICAgOiB1ZG9jLmNjZkxldmVsO1xuICAgICAgICAgICAgcmV0dXJuIGAke3Vkb2MubmFtZX1cbuWFs+azqDogJHt1ZG9jLmZvbGxvd2luZ0NvdW50fVxu57KJ5LidOiAke3Vkb2MuZm9sbG93ZXJDb3VudH0ke3Vkb2MucGFzc2VkUHJvYmxlbUNvdW50ID8gYFxuQUNzL1N1Ym1pdHM6ICR7dWRvYy5wYXNzZWRQcm9ibGVtQ291bnR9LyR7dWRvYy5zdWJtaXR0ZWRQcm9ibGVtQ291bnR9YCA6ICcnfVxu6aKc6ImyOiAke3Vkb2MuY29sb3J9XG5DQ0bor4Tnuqc6JHtsZXZlbH1gO1xuICAgICAgICB9KTtcbn07XG4iLCJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gJ2tvaXNoaS1jb3JlJztcblxuZXhwb3J0IGNvbnN0IGFwcGx5ID0gKGN0eDogQ29udGV4dCkgPT4ge1xuICAgIGN0eC5taWRkbGV3YXJlKGFzeW5jIChzZXNzaW9uLCBuZXh0KSA9PiB7XG4gICAgICAgIGlmIChzZXNzaW9uLmNvbnRlbnQuaW5jbHVkZXMoJ2h0dHBzOi8vYm90LWFwaS5seG5zLm5ldC9ib3QtbWVzc2FnZS8nKSkge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovLyR7c2Vzc2lvbi5jb250ZW50LnNwbGl0KCdodHRwczovLycpWzFdfWApO1xuICAgICAgICAgICAgc2Vzc2lvbi5jb250ZW50ID0gcmVzLmRhdGEucmVwbGFjZSgvPC4qPz4vZywgJycpO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IG5leHQoKTtcbiAgICB9LCB0cnVlKTtcbn07XG4iLCJpbXBvcnQgeyBBcHAsIHNlZ21lbnQgfSBmcm9tICdrb2lzaGktY29yZSc7XG5pbXBvcnQgc3VwZXJhZ2VudCBmcm9tICdzdXBlcmFnZW50JztcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5KGFwcDogQXBwKSB7XG4gICAgYXBwLmNvbW1hbmQoJ3Rvb2xzJywgJ+WunueUqOW3peWFtycpO1xuXG4gICAgYXBwLmNvbW1hbmQoJ3Rvb2xzL29jciBbaW1hZ2VdJywgeyBtaW5JbnRlcnZhbDogMzAwMCB9KVxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSwgaW1hZ2UpID0+IHtcbiAgICAgICAgICAgIGlmICghaW1hZ2UpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBzZXNzaW9uLnNlbmRRdWV1ZWQoJ+ivt+WPkemAgeWbvueJh+OAgicpO1xuICAgICAgICAgICAgICAgIGltYWdlID0gYXdhaXQgc2Vzc2lvbi5wcm9tcHQoMzAwMDApIGFzIHN0cmluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaW1hZ2UpIHJldHVybiAn5rKh5pyJ5qOA5rWL5Yiw5Zu+54mH44CCJztcbiAgICAgICAgICAgIGNvbnN0IGltZyA9IHNlZ21lbnQuZnJvbShpbWFnZSk7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBzdXBlcmFnZW50LmdldChgaHR0cHM6Ly9haS5xcS5jb20vY2dpLWJpbi9hcHBkZW1vX2ltYWdldHJhbnNsYXRlP2ltYWdlX3VybD0ke2ltZy5kYXRhLnVybH1gKTtcbiAgICAgICAgICAgIGlmIChyZXMuYm9keS5yZXQgIT09IDApIHJldHVybiByZXMuYm9keS5tc2c7XG4gICAgICAgICAgICByZXR1cm4gcmVzLmJvZHkuZGF0YS5pbWFnZV9yZWNvcmRzLm1hcCgobm9kZSkgPT4gbm9kZS5zb3VyY2VfdGV4dCkuam9pbignJyk7XG4gICAgICAgIH0pO1xufVxuIiwiaW1wb3J0IHsgQXBwIH0gZnJvbSAna29pc2hpLWNvcmUnO1xuaW1wb3J0IHN1cGVyYWdlbnQgZnJvbSAnc3VwZXJhZ2VudCc7XG5pbXBvcnQgeyB0YWtlIH0gZnJvbSAnbG9kYXNoJztcblxuY29uc3QgR0VOREVSID0ge1xuICAgICctMSc6ICflpbMnLFxuICAgIDA6ICfmnKrnn6UnLFxuICAgIDE6ICfnlLcnLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5KGFwcDogQXBwKSB7XG4gICAgYXBwLmNvbW1hbmQoJ29pJywgJ09JIFJlbGF0ZWQnKTtcblxuICAgIGFwcC5jb21tYW5kKCdvaS9vaWVyIDxxdWVyeT4nLCAn5p+l6K+ib2llcicsIHsgbWluSW50ZXJ2YWw6IDMwMDAwIH0pXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKF8sIHF1ZXJ5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBzdXBlcmFnZW50LmdldChgaHR0cHM6Ly9ieXRldy5uZXQvT0llci9zZWFyY2gucGhwP21ldGhvZD1ub3JtYWwmcT0ke2VuY29kZVVSSUNvbXBvbmVudChxdWVyeSl9YCk7XG4gICAgICAgICAgICBjb25zdCB7IHJlc3VsdDogcmVzdWx0cyB9ID0gSlNPTi5wYXJzZShyZXMudGV4dCk7XG4gICAgICAgICAgICBsZXQgbWVzc2FnZSA9ICcnO1xuICAgICAgICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgdGFrZTxhbnk+KHJlc3VsdHMsIDMpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXdhcmRzID0gSlNPTi5wYXJzZShyZXN1bHQuYXdhcmRzLnJlcGxhY2UoLycvZ21pLCAnXCInKSk7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSArPSBg5aeT5ZCN77yaJHtyZXN1bHQubmFtZX0gIOeUn+eQhuaAp+WIq++8miR7R0VOREVSW3Jlc3VsdC5zZXhdfVxcbmA7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBhd2FyZCBvZiB0YWtlPGFueT4oYXdhcmRzLCA1KSkge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlICs9IGDkuo4ke2F3YXJkLmdyYWRlfeaXtuWcqCR7YXdhcmQucHJvdmluY2V9JHthd2FyZC5zY2hvb2x95Y+C5YqgJHthd2FyZC5pZGVudGl0eX3vvIxgO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXdhcmQuc2NvcmUpIG1lc3NhZ2UgKz0gYOS7pSR7YXdhcmQuc2NvcmV955qE5oiQ57upYDtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSBg5Y+W5b6XJHthd2FyZC5hd2FyZF90eXBlfe+8jOaOkuWQjSR7YXdhcmQucmFua33jgIJcXG5gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYXdhcmRzLmxlbmd0aCA+IDUpIG1lc3NhZ2UgKz0gYCR7YXdhcmRzLmxlbmd0aCAtIDV95Liq5aWW6aG56KKr6ZqQ6JeP44CCXFxuYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA+IDMpIG1lc3NhZ2UgKz0gYCR7cmVzdWx0cy5sZW5ndGggLSAzfeS4quaQnOe0oue7k+aenOiiq+makOiXj+OAgmA7XG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgfSk7XG59XG4iLCJpbXBvcnQgeyBDb250ZXh0LCBTZXNzaW9uIH0gZnJvbSAna29pc2hpLWNvcmUnO1xuXG5leHBvcnQgY29uc3QgYXBwbHkgPSAoY3R4OiBDb250ZXh0KSA9PiB7XG4gICAgY3R4LmNvbW1hbmQoJ3Byb3h5IDxjb21tYW5kOnRleHQ+JywgJ1Byb3h5IGEgY29tbWFuZCcsIHsgaGlkZGVuOiB0cnVlLCBhdXRob3JpdHk6IDQgfSlcbiAgICAgICAgLm9wdGlvbigndXNlcicsICctdSA8dXNlcklkPicpXG4gICAgICAgIC5vcHRpb24oJ3NlbGYnLCAnLXMgPHNlbGZJZD4nKVxuICAgICAgICAub3B0aW9uKCdncm91cCcsICctZyA8Z3JvdXBJZD4nKVxuICAgICAgICAub3B0aW9uKCdsZW5ndGgnLCAnLWwgPGxlbmd0aD4nLCB7IGZhbGxiYWNrOiAxIH0pXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiwgb3B0aW9ucyB9LCBjb21tYW5kKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdTZXNzaW9uID0gbmV3IFNlc3Npb24oY3R4LmFwcCwgc2Vzc2lvbik7XG4gICAgICAgICAgICBkZWxldGUgbmV3U2Vzc2lvbi5ncm91cElkO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZ3JvdXApIHtcbiAgICAgICAgICAgICAgICBuZXdTZXNzaW9uLmdyb3VwSWQgPSBvcHRpb25zLmdyb3VwO1xuICAgICAgICAgICAgICAgIG5ld1Nlc3Npb24uc3VidHlwZSA9ICdncm91cCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ld1Nlc3Npb24uZ3JvdXBJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBuZXdTZXNzaW9uLnN1YnR5cGUgPSAncHJpdmF0ZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zZWxmKSBuZXdTZXNzaW9uLnNlbGZJZCA9IG9wdGlvbnMuc2VsZjtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnVzZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IG9wdGlvbnMudXNlcjtcbiAgICAgICAgICAgICAgICBpZiAoIWlkKSByZXR1cm4gJ+acquaMh+Wumuebruagh+OAgic7XG4gICAgICAgICAgICAgICAgbmV3U2Vzc2lvbi51c2VySWQgPSBpZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IG5ld1Nlc3Npb24uc2VuZChjb21tYW5kKTtcbiAgICAgICAgICAgIGxldCBtZXNzYWdlID0gJyc7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYXdhaXQtaW4tbG9vcFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gb3B0aW9ucy5sZW5ndGg7IGkrKykgbWVzc2FnZSArPSBhd2FpdCBuZXdTZXNzaW9uLnByb21wdCgzMDAwMCk7XG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgfSk7XG59O1xuIiwiaW1wb3J0IHsgQXBwIH0gZnJvbSAna29pc2hpLWNvcmUnO1xuaW1wb3J0IHsgTG9nZ2VyLCBub29wIH0gZnJvbSAna29pc2hpLXV0aWxzJztcbmltcG9ydCB7IFBORyB9IGZyb20gJ3BuZ2pzJztcbmltcG9ydCB7IGFwcGx5IGFzIFBsdWdpblB1cHBldGVlciwgQ29uZmlnIH0gZnJvbSAna29pc2hpLXBsdWdpbi1wdXBwZXRlZXInO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdENvbmZpZzogQ29uZmlnID0ge1xuICAgIGxvYWRUaW1lb3V0OiAxMDAwMCwgLy8gMTBzXG4gICAgaWRsZVRpbWVvdXQ6IDMwMDAwLCAvLyAzMHNcbiAgICBtYXhMZW5ndGg6IDEwMDAwMDAsIC8vIDFNQlxufTtcblxuY29uc3QgYWxsb3dlZFByb3RvY29scyA9IFsnaHR0cCcsICdodHRwcyddO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcigncHVwcGV0ZWVyJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseShhcHA6IEFwcCwgY29uZmlnOiBDb25maWcpIHtcbiAgICBjb25maWcgPSB7IC4uLmRlZmF1bHRDb25maWcsIC4uLmNvbmZpZyB9O1xuICAgIGFwcC5wbHVnaW4oUGx1Z2luUHVwcGV0ZWVyLCBjb25maWcpO1xuICAgIGFwcC5jb21tYW5kKCdzaG90JykuZGlzcG9zZSgpO1xuXG4gICAgYXBwLmNvbW1hbmQoJ3BhZ2UgPHVybDp0ZXh0PicsICdHZXQgcGFnZScsIHsgYXV0aG9yaXR5OiAzLCBtaW5JbnRlcnZhbDogMzAwMCB9KVxuICAgICAgICAuYWxpYXMoJ3NjcmVlbnNob3QnLCAnc2hvdCcpXG4gICAgICAgIC5vcHRpb24oJ2Z1bGwnLCAnLWYgRnVsbCBwYWdlJylcbiAgICAgICAgLm9wdGlvbignZWxlbWVudCcsICctZSwgLS1lbGVtZW50IDxzZWxlY3RvcjpzdHJpbmc+IEVsZW1lbnQgU2VsZWN0b3InKVxuICAgICAgICAub3B0aW9uKCd2aWV3cG9ydCcsICc8dmlld3BvcnQ+IOaMh+WumlZpZXdwb3J0JywgeyBmYWxsYmFjazogJzE2MDB4OTAwJyB9KVxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24sIG9wdGlvbnMgfSwgbWVzc2FnZSA9ICcnKSA9PiB7XG4gICAgICAgICAgICBsZXQgdXJsID0gbWVzc2FnZS50cmltKCk7XG4gICAgICAgICAgICBpZiAoIXVybCkgcmV0dXJuICfor7fovpPlhaXnvZHlnYDjgIInO1xuICAgICAgICAgICAgY29uc3QgdCA9IG9wdGlvbnMudmlld3BvcnQuc3BsaXQoJ3gnKTtcbiAgICAgICAgICAgIGlmICh0Lmxlbmd0aCAhPT0gMikgcmV0dXJuICdJbnZhbGlkIHZpZXdwb3J0JztcbiAgICAgICAgICAgIGNvbnN0IHNjaGVtZSA9IC9eKFxcdyspOlxcL1xcLy8uZXhlYyh1cmwpO1xuICAgICAgICAgICAgaWYgKCFzY2hlbWUpIHVybCA9IGBodHRwOi8vJHt1cmx9YDtcbiAgICAgICAgICAgIGVsc2UgaWYgKCFhbGxvd2VkUHJvdG9jb2xzLmluY2x1ZGVzKHNjaGVtZVsxXSkpIHJldHVybiAn6K+36L6T5YWl5q2j56Gu55qE572R5Z2A44CCJztcbiAgICAgICAgICAgIGNvbnN0IHBhZ2UgPSBhd2FpdCBhcHAuYnJvd3Nlci5uZXdQYWdlKCk7XG4gICAgICAgICAgICBsZXQgbG9hZGVkID0gZmFsc2U7XG4gICAgICAgICAgICBwYWdlLm9uKCdsb2FkJywgKCkgPT4gbG9hZGVkID0gdHJ1ZSk7XG4gICAgICAgICAgICBhd2FpdCBwYWdlLnNldFZpZXdwb3J0KHtcbiAgICAgICAgICAgICAgICB3aWR0aDogcGFyc2VJbnQodFswXSwgMTApLFxuICAgICAgICAgICAgICAgIGhlaWdodDogcGFyc2VJbnQodFsxXSwgMTApLFxuICAgICAgICAgICAgICAgIGRldmljZVNjYWxlRmFjdG9yOiAxLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGltZXIgPSBzZXRUaW1lb3V0KFxuICAgICAgICAgICAgICAgICAgICAgICAgKCkgPT4gKGxvYWRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gc2Vzc2lvbi5zZW5kKCfmraPlnKjliqDovb3kuK3vvIzor7fnqI3nrYnniYfliLt+JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHJlamVjdChuZXcgRXJyb3IoJ25hdmlnYXRpb24gdGltZW91dCcpKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5sb2FkVGltZW91dCxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgX3Jlc29sdmUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBwYWdlLmdvdG8odXJsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YWl0VW50aWw6ICduZXR3b3JraWRsZTAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogY29uZmlnLmlkbGVUaW1lb3V0LFxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKF9yZXNvbHZlLCAoKSA9PiAobG9hZGVkID8gX3Jlc29sdmUoKSA6IHJlamVjdChuZXcgRXJyb3IoJ25hdmlnYXRpb24gdGltZW91dCcpKSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBwYWdlLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGVycm9yKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+aXoOazleaJk+W8gOmhtemdouOAgic7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQgPyBhd2FpdCBwYWdlLiQob3B0aW9ucy5lbGVtZW50KSA6IHBhZ2U7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC5zY3JlZW5zaG90KHtcbiAgICAgICAgICAgICAgICBmdWxsUGFnZTogb3B0aW9ucy5mdWxsLFxuICAgICAgICAgICAgfSkudGhlbihhc3luYyAoYnVmZmVyOiBCdWZmZXIpID0+IHtcbiAgICAgICAgICAgICAgICBwYWdlLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgaWYgKGJ1ZmZlci5ieXRlTGVuZ3RoID4gY29uZmlnLm1heExlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZTxQTkc+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBuZyA9IG5ldyBQTkcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBuZy5wYXJzZShidWZmZXIsIChlcnJvciwgZGF0YSkgPT4gKGVycm9yID8gcmVqZWN0KGVycm9yKSA6IHJlc29sdmUoZGF0YSkpKTtcbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBkYXRhLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gKGRhdGEuaGVpZ2h0ICogY29uZmlnLm1heExlbmd0aCkgLyBidWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBuZyA9IG5ldyBQTkcoeyB3aWR0aCwgaGVpZ2h0IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5iaXRibHQocG5nLCAwLCAwLCB3aWR0aCwgaGVpZ2h0LCAwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IFBORy5zeW5jLndyaXRlKHBuZyk7XG4gICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKG5vb3ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYFtDUTppbWFnZSxmaWxlPWJhc2U2NDovLyR7YnVmZmVyLnRvU3RyaW5nKCdiYXNlNjQnKX1dYDtcbiAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHBhZ2UuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybiAn5oiq5Zu+5aSx6LSl44CCJztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbn1cbiIsImltcG9ydCBBeGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBBcHAgfSBmcm9tICdrb2lzaGktY29yZSc7XG5pbXBvcnQgeyB0ZXh0MnBuZyB9IGZyb20gJy4uL2xpYi9ncmFwaCc7XG5pbXBvcnQgeyB9IGZyb20gJ2tvaXNoaS1wbHVnaW4tcHVwcGV0ZWVyJztcblxuY29uc3QgTEFOR1MgPSB7XG4gICAgYzoge1xuICAgICAgICB0eXBlOiAnY29tcGlsZXInLFxuICAgICAgICBjb21waWxlOiBbJy91c3IvYmluL2djYycsICctTzInLCAnLVdhbGwnLCAnLXN0ZD1jOTknLCAnLW8nLCAnY29kZScsICdmb28uYycsICctbG0nLCAnLWZkaWFnbm9zdGljcy1jb2xvcj1hbHdheXMnXSxcbiAgICAgICAgY29kZV9maWxlOiAnZm9vLmMnLFxuICAgICAgICBleGVjdXRlOiBbJy93L2NvZGUnXSxcbiAgICB9LFxuICAgIGNjOiB7XG4gICAgICAgIHR5cGU6ICdjb21waWxlcicsXG4gICAgICAgIGNvbXBpbGU6IFsnL3Vzci9iaW4vZysrLTcnLCAnLU8yJywgJy1XYWxsJywgJy1zdGQ9YysrMTEnLCAnLW8nLCAnY29kZScsICdmb28uY2MnLCAnLWxtJywgJy1mZGlhZ25vc3RpY3MtY29sb3I9YWx3YXlzJ10sXG4gICAgICAgIGNvZGVfZmlsZTogJ2Zvby5jYycsXG4gICAgICAgIGV4ZWN1dGU6IFsnL3cvY29kZSddLFxuICAgIH0sXG4gICAgcGFzOiB7XG4gICAgICAgIHR5cGU6ICdjb21waWxlcicsXG4gICAgICAgIGNvbXBpbGU6IFsnL3Vzci9iaW4vZnBjJywgJy1PMicsICctby93L2NvZGUnLCAnZm9vLnBhcyddLFxuICAgICAgICBjb2RlX2ZpbGU6ICdmb28ucGFzJyxcbiAgICAgICAgZXhlY3V0ZTogWycvdy9jb2RlJ10sXG4gICAgfSxcbiAgICBweToge1xuICAgICAgICB0eXBlOiAnaW50ZXJwcmV0ZXInLFxuICAgICAgICBjb2RlX2ZpbGU6ICdmb28ucHknLFxuICAgICAgICBleGVjdXRlOiBbJy91c3IvYmluL3B5dGhvbicsICdmb28ucHknXSxcbiAgICB9LFxuICAgIHB5Mjoge1xuICAgICAgICB0eXBlOiAnaW50ZXJwcmV0ZXInLFxuICAgICAgICBjb2RlX2ZpbGU6ICdmb28ucHknLFxuICAgICAgICBleGVjdXRlOiBbJy91c3IvYmluL3B5dGhvbicsICdmb28ucHknXSxcbiAgICB9LFxuICAgIHB5Mzoge1xuICAgICAgICB0eXBlOiAnaW50ZXJwcmV0ZXInLFxuICAgICAgICBjb2RlX2ZpbGU6ICdmb28ucHknLFxuICAgICAgICBleGVjdXRlOiBbJy91c3IvYmluL3B5dGhvbjMnLCAnZm9vLnB5J10sXG4gICAgfSxcbiAgICBqYXZhOiB7XG4gICAgICAgIHR5cGU6ICdjb21waWxlcicsXG4gICAgICAgIGNvbXBpbGU6IFsnL3Vzci9iaW4vamF2YWMnLCAnLWQnLCAnL3cnLCAnLWVuY29kaW5nJywgJ3V0ZjgnLCAnLi9NYWluLmphdmEnXSxcbiAgICAgICAgY29kZV9maWxlOiAnTWFpbi5qYXZhJyxcbiAgICAgICAgY29weU91dDogJ01haW4uY2xhc3MnLFxuICAgICAgICBleGVjdXRlOiBbJy91c3IvYmluL2phdmEnLCAnTWFpbiddLFxuICAgIH0sXG4gICAgcGhwOiB7XG4gICAgICAgIHR5cGU6ICdpbnRlcnByZXRlcicsXG4gICAgICAgIGNvZGVfZmlsZTogJ2Zvby5waHAnLFxuICAgICAgICBleGVjdXRlOiBbJy91c3IvYmluL3BocCcsICdmb28ucGhwJ10sXG4gICAgfSxcbiAgICBqczoge1xuICAgICAgICB0eXBlOiAnaW50ZXJwcmV0ZXInLFxuICAgICAgICBjb2RlX2ZpbGU6ICdmb28uanMnLFxuICAgICAgICBleGVjdXRlOiBbJy91c3IvYmluL2pzYycsICcvdy9mb28uanMnXSxcbiAgICB9LFxuICAgIGdvOiB7XG4gICAgICAgIHR5cGU6ICdjb21waWxlcicsXG4gICAgICAgIGNvbXBpbGU6IFsnL3Vzci9iaW4vZ28nLCAnYnVpbGQnLCAnLW8nLCAnZm9vJywgJ2Zvby5nbyddLFxuICAgICAgICBjb2RlX2ZpbGU6ICdmb28uZ28nLFxuICAgICAgICBleGVjdXRlOiBbJy93L2ZvbyddLFxuICAgIH0sXG4gICAgc2g6IHtcbiAgICAgICAgdHlwZTogJ2ludGVycHJldGVyJyxcbiAgICAgICAgY29kZV9maWxlOiAnZm9vLnNoJyxcbiAgICAgICAgZXhlY3V0ZTogWycvYmluL2Jhc2gnLCAnZm9vLnNoJ10sXG4gICAgfSxcbiAgICBjczoge1xuICAgICAgICB0eXBlOiAnY29tcGlsZXInLFxuICAgICAgICBjb21waWxlOiBbJy91c3IvYmluL21jcycsICctb3B0aW1pemUrJywgJy1vdXQ6L3cvZm9vJywgJy93L2Zvby5jcyddLFxuICAgICAgICBjb2RlX2ZpbGU6ICdmb28uY3MnLFxuICAgICAgICBleGVjdXRlOiBbJy91c3IvYmluL21vbm8nLCAnZm9vJ10sXG4gICAgfSxcbn07XG5jb25zdCBlbnYgPSBbJ1BBVEg9L3Vzci9sb2NhbC9zYmluOi91c3IvbG9jYWwvYmluOi91c3Ivc2JpbjovdXNyL2Jpbjovc2JpbjovYmluJywgJ0hPTUU9L3cnXTtcbmNvbnN0IGF4aW9zID0gQXhpb3MuY3JlYXRlKHsgYmFzZVVSTDogJ2h0dHA6Ly9sb2NhbGhvc3Q6NTA1MCcgfSk7XG5cbmFzeW5jIGZ1bmN0aW9uIF9wb3N0KGFyZ3M6IHN0cmluZ1tdLCB7XG4gICAgdGltZV9saW1pdF9tcyA9IDUwMDAsXG4gICAgbWVtb3J5X2xpbWl0X21iID0gMjU2LFxuICAgIHByb2Nlc3NfbGltaXQgPSAzMixcbiAgICBzdGRpbiA9ICcnLCBjb3B5SW4gPSB7fSwgY29weU91dCA9IFtdLCBjb3B5T3V0Q2FjaGVkID0gbnVsbCxcbn0gPSB7fSkge1xuICAgIGxldCByZXN1bHQ7XG4gICAgbGV0IGJvZHk7XG4gICAgdHJ5IHtcbiAgICAgICAgYm9keSA9IHtcbiAgICAgICAgICAgIGNtZDogW3tcbiAgICAgICAgICAgICAgICBhcmdzLFxuICAgICAgICAgICAgICAgIGVudixcbiAgICAgICAgICAgICAgICBmaWxlczogW1xuICAgICAgICAgICAgICAgICAgICBzdGRpbiA/IHsgY29udGVudDogc3RkaW4gfSA6IHsgY29udGVudDogJycgfSxcbiAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiAnc3Rkb3V0JywgbWF4OiAyMDQ4MCB9LFxuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6ICdzdGRlcnInLCBtYXg6IDIwNDgwIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBjcHVMaW1pdDogdGltZV9saW1pdF9tcyAqIDEwMDAgKiAxMDAwLFxuICAgICAgICAgICAgICAgIHJlYWRDcHVMaW1pdDogdGltZV9saW1pdF9tcyAqIDEyMDAgKiAxMDAwLFxuICAgICAgICAgICAgICAgIG1lbW9yeUxpbWl0OiBtZW1vcnlfbGltaXRfbWIgKiAxMDI0ICogMTAyNCxcbiAgICAgICAgICAgICAgICBwcm9jTGltaXQ6IHByb2Nlc3NfbGltaXQsXG4gICAgICAgICAgICAgICAgY29weUluLFxuICAgICAgICAgICAgICAgIGNvcHlPdXQsXG4gICAgICAgICAgICAgICAgY29weU91dENhY2hlZCxcbiAgICAgICAgICAgIH1dLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5wb3N0KCcvcnVuJywgYm9keSk7XG4gICAgICAgIHJlc3VsdCA9IHJlcy5kYXRhWzBdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICAgIHRocm93IGU7XG4gICAgfVxuICAgIGNvbnN0IHJldDogYW55ID0ge1xuICAgICAgICBzdGF0dXM6IHJlc3VsdC5zdGF0dXMsXG4gICAgICAgIHRpbWVfdXNhZ2VfbXM6IHJlc3VsdC50aW1lIC8gMTAwMDAwMCxcbiAgICAgICAgbWVtb3J5X3VzYWdlX2tiOiByZXN1bHQubWVtb3J5IC8gMTAyNCxcbiAgICAgICAgZmlsZXM6IHJlc3VsdC5maWxlcyxcbiAgICB9O1xuICAgIHJlc3VsdC5maWxlcyA9IHJlc3VsdC5maWxlcyB8fCB7fTtcbiAgICByZXQuc3Rkb3V0ID0gcmVzdWx0LmZpbGVzLnN0ZG91dCB8fCAnJztcbiAgICByZXQuc3RkZXJyID0gcmVzdWx0LmZpbGVzLnN0ZGVyciB8fCAnJztcbiAgICBpZiAocmVzdWx0LmVycm9yKSB7XG4gICAgICAgIHJldC5lcnJvciA9IHJlc3VsdC5lcnJvcjtcbiAgICB9XG4gICAgcmV0LmZpbGVzID0gcmVzdWx0LmZpbGVzO1xuICAgIGlmIChyZXN1bHQuZmlsZUlkcykgcmV0LmZpbGVJZHMgPSByZXN1bHQuZmlsZUlkcztcbiAgICByZXR1cm4gcmV0O1xufVxuXG5hc3luYyBmdW5jdGlvbiBfcnVuKGNvZGU6IHN0cmluZywgbGFuZzogc3RyaW5nLCBpbnB1dDogc3RyaW5nKSB7XG4gICAgY29uc3QgY29weUluID0ge307XG4gICAgY29uc3QgaW5mbyA9IExBTkdTW2xhbmddO1xuICAgIGlmICghTEFOR1NbbGFuZ10pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXR1czogJ1N5c3RlbUVycm9yJyxcbiAgICAgICAgICAgIHN0ZG91dDogJ+S4jeaUr+aMgeeahOivreiogCcsXG4gICAgICAgICAgICBzdGRlcnI6ICfnm67liY3mlK/mjIFzaCxjLGNjLHBhcyxweTIscHkzLGpzLGNzLGdvLHBocCxqYXZhJyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29weUluW2luZm8uY29kZV9maWxlXSA9IHsgY29udGVudDogY29kZSB9O1xuICAgIGlmIChpbmZvLnR5cGUgPT09ICdjb21waWxlcicpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3RhdHVzLCBzdGRvdXQsIHN0ZGVyciwgZmlsZUlkcyxcbiAgICAgICAgfSA9IGF3YWl0IF9wb3N0KFxuICAgICAgICAgICAgaW5mby5jb21waWxlLCB7IGNvcHlJbiwgY29weU91dENhY2hlZDogW2luZm8uY29weU91dCB8fCAnY29kZSddIH0sXG4gICAgICAgICk7XG4gICAgICAgIGlmIChzdGF0dXMgIT09ICdBY2NlcHRlZCcpIHJldHVybiB7IHN0YXR1czogYENvbXBpbGUgRXJyb3I6JHtzdGF0dXN9YCwgc3Rkb3V0LCBzdGRlcnIgfTtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgX3Bvc3QoXG4gICAgICAgICAgICBpbmZvLmV4ZWN1dGUsIHsgY29weUluOiB7IFtpbmZvLmNvcHlPdXQgfHwgJ2NvZGUnXTogeyBmaWxlSWQ6IGZpbGVJZHNbaW5mby5jb3B5T3V0IHx8ICdjb2RlJ10gfSB9IH0sXG4gICAgICAgICk7XG4gICAgICAgIGF3YWl0IGF4aW9zLmRlbGV0ZShgL2ZpbGUvJHtmaWxlSWRzW2luZm8uY29weU91dCB8fCAnY29kZSddfWApO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH0gaWYgKGluZm8udHlwZSA9PT0gJ2ludGVycHJldGVyJykge1xuICAgICAgICByZXR1cm4gYXdhaXQgX3Bvc3QoaW5mby5leGVjdXRlLCB7IGNvcHlJbiwgc3RkaW46IGlucHV0IH0pO1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gcnVuKGNvZGU6IHN0cmluZywgbGFuZzogc3RyaW5nLCBpbnB1dDogc3RyaW5nKSB7XG4gICAgY29uc3QgeyBzdGF0dXMsIHN0ZG91dCwgc3RkZXJyIH0gPSBhd2FpdCBfcnVuKGNvZGUsIGxhbmcsIGlucHV0KS5jYXRjaCgoZSkgPT4gKHtcbiAgICAgICAgc3RhdHVzOiAnU3lzdGVtRXJyb3InLFxuICAgICAgICBzdGRvdXQ6IGUudG9TdHJpbmcoKSxcbiAgICAgICAgc3RkZXJyOiAnJyxcbiAgICB9KSk7XG4gICAgcmV0dXJuIChzdGF0dXMgPT09ICdBY2NlcHRlZCcpXG4gICAgICAgID8gYEV4ZWN1dGUgcmVzdWx0OiBcXG4ke3N0ZG91dH1cXG4ke3N0ZGVycn1gXG4gICAgICAgIDogYEVycm9yOiAke3N0YXR1c31cXG4ke3N0ZG91dH1cXG4ke3N0ZGVycn1gO1xufVxuXG5leHBvcnQgY29uc3QgYXBwbHkgPSAoYXBwOiBBcHApID0+IHtcbiAgICBhcHAuY29tbWFuZCgndG9vbHMnLCAn5a6e55So5bel5YW3Jyk7XG5cbiAgICBhcHAuY29tbWFuZCgndG9vbHMvcnVuIDxsYW5ndWFnZT4gPGNvZGU6dGV4dD4nLCAn6L+Q6KGM56iL5bqPJywgeyBtaW5JbnRlcnZhbDogMTAwMCB9KVxuICAgICAgICAuYWxpYXMoJ2NvZGUnKVxuICAgICAgICAub3B0aW9uKCdpbnB1dCcsICflkK/nlKhzdGRpbicpXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiwgb3B0aW9ucyB9LCBsYW5nLCBjb2RlKSA9PiB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pbnB1dCkgc2Vzc2lvbi5zZW5kKCdQbGVhc2UgaW5wdXQ6Jyk7XG4gICAgICAgICAgICBjb25zdCBpbnB1dDogc3RyaW5nID0gKG9wdGlvbnMuaW5wdXQpXG4gICAgICAgICAgICAgICAgPyBhd2FpdCBzZXNzaW9uLnByb21wdCgxMDAwMCkgYXMgc3RyaW5nXG4gICAgICAgICAgICAgICAgOiAnJztcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcnVuKGNvZGUucmVwbGFjZSgvXFxyL2dtaSwgJycpLmRlY29kZSgpLCBsYW5nLCBpbnB1dC5kZWNvZGUoKSk7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UubGVuZ3RoID4gMjU2IHx8IHJlc3BvbnNlLnNwbGl0KCdcXG4nKS5sZW5ndGggPiAxMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2UgPSBhd2FpdCBhcHAuYnJvd3Nlci5uZXdQYWdlKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaW1nID0gYXdhaXQgdGV4dDJwbmcocGFnZSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiBgW0NROmltYWdlLGZpbGU9YmFzZTY0Oi8vJHtpbWd9XWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH0pO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXRlbXBsYXRlLWN1cmx5LWluLXN0cmluZyAqL1xuaW1wb3J0IHsgdG90YWxtZW0sIGZyZWVtZW0gfSBmcm9tICdvcyc7XG5pbXBvcnQgeyBDb250ZXh0IH0gZnJvbSAna29pc2hpLWNvcmUnO1xuaW1wb3J0IHsgYXBwbHkgYXMgS29pc2hpUGx1Z2luU3RhdHVzIH0gZnJvbSAna29pc2hpLXBsdWdpbi13ZWJ1aSc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5cbmRlY2xhcmUgbW9kdWxlICdrb2lzaGktcGx1Z2luLXdlYnVpJyB7XG4gICAgaW50ZXJmYWNlIFN0YXR1cyB7XG4gICAgICAgIHRvdGFsU2VuZENvdW50OiBudW1iZXIsXG4gICAgICAgIHRvdGFsUmVjZWl2ZUNvdW50OiBudW1iZXIsXG4gICAgICAgIHVzZWRtZW06IG51bWJlcixcbiAgICAgICAgdG90YWxtZW06IG51bWJlcixcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhcHBseShjdHg6IENvbnRleHQsIGNvbmZpZzogYW55KSB7XG4gICAgY3R4LnBsdWdpbihLb2lzaGlQbHVnaW5TdGF0dXMsIHtcbiAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICBmb3JtYXQ6IFtcbiAgICAgICAgICAgICd7eyBib3RzIH19JyxcbiAgICAgICAgICAgICc9PT09PT09PT09JyxcbiAgICAgICAgICAgICfnlKjmiLfmlbDph4/vvJp7eyBhY3RpdmVVc2VycyB9fScsXG4gICAgICAgICAgICAn576k5pWw6YeP77yae3sgYWN0aXZlR3JvdXBzIH19JyxcbiAgICAgICAgICAgICdDUFUg5L2/55So546H77yae3sgKGNwdVsxXSAqIDEwMCkudG9GaXhlZCgpIH19JScsXG4gICAgICAgICAgICAn5YaF5a2Y5L2/55So6YeP77yae3sgdXNlZG1lbSB9fU0gLyB7eyB0b3RhbG1lbSB9fU0nLFxuICAgICAgICAgICAgJ+S7iuaXpeaUtuWPkea2iOaBr+mHjyB7eyB0b3RhbFJlY2VpdmVDb3VudCB9fS97eyB0b3RhbFNlbmRDb3VudCB9fScsXG4gICAgICAgIF0uam9pbignXFxuJyksXG4gICAgfSk7XG5cbiAgICBjdHguYXBwLm9uKCdjb25uZWN0JywgKCkgPT4ge1xuICAgICAgICBjb25zdCBjID0gY3R4LmFwcC5kYXRhYmFzZS5tb25nby5jb2xsZWN0aW9uKCdtZXNzYWdlJyk7XG5cbiAgICAgICAgY3R4LmFwcC53ZWJ1aS5zb3VyY2VzLm1ldGEuZXh0ZW5kKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXR1czogYW55ID0ge307XG4gICAgICAgICAgICBjb25zdCB1ZG9jcyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICAgICAgICAgIGN0eC5hcHAuYm90cy5tYXAoKGJvdCkgPT4gY3R4LmFwcC5kYXRhYmFzZS5nZXRVc2VyKGJvdC5wbGF0Zm9ybSwgYm90LnNlbGZJZC50b1N0cmluZygpKSksXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3QgaWRzID0gdWRvY3MubWFwKChpKSA9PiBpPy5pZCkuZmlsdGVyKChpKSA9PiAhIWkpO1xuICAgICAgICAgICAgY29uc3QgdGltZSA9IHsgdGltZTogeyAkZ3Q6IG1vbWVudCgpLmFkZCgtMSwgJ2RheScpLnRvRGF0ZSgpIH0gfTtcbiAgICAgICAgICAgIHN0YXR1cy5hY3RpdmVVc2VycyA9IGF3YWl0IGN0eC5hcHAuZGF0YWJhc2UubW9uZ28udXNlci5maW5kKHt9KS5jb3VudCgpO1xuICAgICAgICAgICAgc3RhdHVzLnRvdGFsU2VuZENvdW50ID0gYXdhaXQgYy5maW5kKHsgLi4udGltZSwgc2VuZGVyOiB7ICRpbjogaWRzLm1hcChwYXJzZUludCkgfSB9KS5jb3VudCgpO1xuICAgICAgICAgICAgc3RhdHVzLnRvdGFsUmVjZWl2ZUNvdW50ID0gYXdhaXQgYy5maW5kKHsgLi4udGltZSwgc2VuZGVyOiB7ICRuaW46IGlkcy5tYXAocGFyc2VJbnQpIH0gfSkuY291bnQoKTtcbiAgICAgICAgICAgIHN0YXR1cy51c2VkbWVtID0gTWF0aC5mbG9vcigodG90YWxtZW0oKSAtIGZyZWVtZW0oKSkgLyAxMDI0IC8gMTAyNCk7XG4gICAgICAgICAgICBzdGF0dXMudG90YWxtZW0gPSBNYXRoLmZsb29yKHRvdGFsbWVtKCkgLyAxMDI0IC8gMTAyNCk7XG4gICAgICAgICAgICByZXR1cm4gc3RhdHVzO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbiIsImltcG9ydCB7IENvbnRleHQgfSBmcm9tICdrb2lzaGktY29yZSc7XG5cbmRlY2xhcmUgbW9kdWxlICdrb2lzaGktY29yZScge1xuICAgIGludGVyZmFjZSBVc2VyIHtcbiAgICAgICAgc3Vkb2VyPzogYm9vbGVhbixcbiAgICB9XG4gICAgaW50ZXJmYWNlIFNlc3Npb24ge1xuICAgICAgICBfc3Vkbz86IGJvb2xlYW4sXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHkoY3R4OiBDb250ZXh0KSB7XG4gICAgY3R4LmNvbW1hbmQoJ3N1ZG8gPGNvbW1hbmQ6dGV4dD4nLCB7IGhpZGRlbjogdHJ1ZSwgbm9SZWRpcmVjdDogdHJ1ZSB9KVxuICAgICAgICAudXNlckZpZWxkcyhbJ3N1ZG9lcicsICdhdXRob3JpdHknXSlcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0sIGNvbW1hbmQpID0+IHtcbiAgICAgICAgICAgIGlmICghc2Vzc2lvbi51c2VyLnN1ZG9lcikgdGhyb3cgbmV3IEVycm9yKCdZb3UgYXJlIG5vdCBpbiB0aGUgc3Vkb2VycyBmaWxlLicpO1xuICAgICAgICAgICAgY29uc3Qgb2xkID0gc2Vzc2lvbi51c2VyLmF1dGhvcml0eTtcbiAgICAgICAgICAgIHNlc3Npb24udXNlci5hdXRob3JpdHkgPSA1O1xuICAgICAgICAgICAgc2Vzc2lvbi5fc3VkbyA9IHRydWU7XG4gICAgICAgICAgICBhd2FpdCBzZXNzaW9uLmV4ZWN1dGUoY29tbWFuZCk7XG4gICAgICAgICAgICBzZXNzaW9uLnVzZXIuYXV0aG9yaXR5ID0gb2xkO1xuICAgICAgICB9KTtcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLWF3YWl0LWluLWxvb3AgKi9cbmltcG9ydCB7IENvbnRleHQgfSBmcm9tICdrb2lzaGktY29yZSc7XG5pbXBvcnQgeyBhcHBseSBhcyBLb2lzaGlQbHVnaW5UZWFjaCB9IGZyb20gJ2tvaXNoaS1wbHVnaW4tdGVhY2gnO1xuaW1wb3J0IHR5cGUgeyBEaWFsb2d1ZSB9IGZyb20gJ2tvaXNoaS1wbHVnaW4tdGVhY2gvbGliL3V0aWxzJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBCaW5hcnkgfSBmcm9tICdtb25nb2RiJztcblxuaW50ZXJmYWNlIEltYWdlU2VydmVyU3RhdHVzIHtcbiAgICB0b3RhbFNpemU6IG51bWJlclxuICAgIHRvdGFsQ291bnQ6IG51bWJlclxufVxuaW50ZXJmYWNlIEltYWdlRG9jIHtcbiAgICBfaWQ6IHN0cmluZyxcbiAgICBkYXRhOiBCaW5hcnlcbn1cbmRlY2xhcmUgbW9kdWxlICdrb2lzaGktY29yZScge1xuICAgIG5hbWVzcGFjZSBDb21tYW5kIHtcbiAgICAgICAgaW50ZXJmYWNlIENvbmZpZyB7XG4gICAgICAgICAgICBub1JlZGlyZWN0PzogYm9vbGVhbixcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbnRlcmZhY2UgU2Vzc2lvbiB7XG4gICAgICAgIF9kaWFsb2d1ZT86IERpYWxvZ3VlXG4gICAgfVxuICAgIGludGVyZmFjZSBBcHAge1xuICAgICAgICBnZXRJbWFnZVNlcnZlclN0YXR1cygpOiBQcm9taXNlPEltYWdlU2VydmVyU3RhdHVzPlxuICAgIH1cbiAgICBpbnRlcmZhY2UgVGFibGVzIHtcbiAgICAgICAgaW1hZ2U6IEltYWdlRG9jXG4gICAgfVxufVxuZGVjbGFyZSBtb2R1bGUgJ2tvaXNoaS1wbHVnaW4tdGVhY2gnIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93XG4gICAgbmFtZXNwYWNlIERpYWxvZ3VlIHtcbiAgICAgICAgaW50ZXJmYWNlIENvbmZpZyB7XG4gICAgICAgICAgICBpbWFnZVBhdGg/OiBzdHJpbmdcbiAgICAgICAgICAgIGltYWdlU2VydmVyPzogc3RyaW5nXG4gICAgICAgICAgICB1cGxvYWRLZXk/OiBzdHJpbmdcbiAgICAgICAgICAgIHVwbG9hZFBhdGg/OiBzdHJpbmdcbiAgICAgICAgICAgIHVwbG9hZFNlcnZlcj86IHN0cmluZ1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jb25zdCBpbWFnZVJFID0gL1xcW0NROmltYWdlLGZpbGU9KFteLF0rKSx1cmw9KFteXFxdXSspXFxdLztcbmNvbnN0IFJFaW1hZ2UgPSAvXFxbQ1E6aW1hZ2UsZmlsZT1pbWFnZTpcXC9cXC8oW14sXSspXFxdLztcblxuZXhwb3J0IGNvbnN0IGFwcGx5ID0gKGN0eDogQ29udGV4dCwgY29uZmlnOiBEaWFsb2d1ZS5Db25maWcpID0+IHtcbiAgICBjb25zdCBsb2dnZXIgPSBjdHgubG9nZ2VyKCd0ZWFjaCcpO1xuXG4gICAgY3R4LnBsdWdpbihLb2lzaGlQbHVnaW5UZWFjaCwgY29uZmlnKTtcbiAgICBjdHguY29tbWFuZCgndGVhY2gnLCB7IGNoZWNrQXJnQ291bnQ6IGZhbHNlIH0pO1xuXG4gICAgY3R4Lm9uKCdiZWZvcmUtY29tbWFuZCcsIGFzeW5jICh7IHNlc3Npb24sIGNvbW1hbmQgfSkgPT4ge1xuICAgICAgICBjb25zdCBub1JlZGlyZWN0ID0gY29tbWFuZC5nZXRDb25maWcoJ25vUmVkaXJlY3QnLCBzZXNzaW9uKTtcbiAgICAgICAgaWYgKG5vUmVkaXJlY3QgJiYgc2Vzc2lvbi5fcmVkaXJlY3RlZCkge1xuICAgICAgICAgICAgY29uc3QgY3JlYXRvciA9IGF3YWl0IGN0eC5hcHAuZGF0YWJhc2UuZ2V0VXNlcignaWQnLCBzZXNzaW9uLl9kaWFsb2d1ZS53cml0ZXIsIFsnYXV0aG9yaXR5J10pO1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgaWYgKGNyZWF0b3IuYXV0aG9yaXR5IDwgNSAmJiAhY3JlYXRvci5zdWRvZXIpIHJldHVybiAn5LiN5pSv5oyB5Zyo5o+S5YC85Lit6LCD55So6K+l5ZG95Luk44CCJztcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgY3R4Lm9uKCdjb25uZWN0JywgKCkgPT4ge1xuICAgICAgICBjb25zdCBjb2xsID0gY3R4LmFwcC5kYXRhYmFzZS5tb25nby5jb2xsZWN0aW9uKCdpbWFnZScpO1xuXG4gICAgICAgIGNvbnN0IGRvd25sb2FkRmlsZSA9IGFzeW5jIChmaWxlOiBzdHJpbmcsIHVybDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBpZiAoYXdhaXQgY29sbC5maW5kT25lKHsgX2lkOiBmaWxlIH0pKSByZXR1cm47XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IGF4aW9zLmdldDxBcnJheUJ1ZmZlcj4odXJsLCB7IHJlc3BvbnNlVHlwZTogJ2FycmF5YnVmZmVyJyB9KTtcbiAgICAgICAgICAgIGNvbnN0IGJ1ZiA9IEJ1ZmZlci5hbGxvYyhkYXRhLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgY29uc3QgdmlldyA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWYubGVuZ3RoOyArK2kpIGJ1ZltpXSA9IHZpZXdbaV07XG4gICAgICAgICAgICBhd2FpdCBjb2xsLmluc2VydE9uZSh7IF9pZDogZmlsZSwgZGF0YTogbmV3IEJpbmFyeShidWYpIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGN0eC5vbignZGlhbG9ndWUvZGV0YWlsJywgYXN5bmMgKGRpYWxvZ3VlLCBvdXRwdXQpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIGluIG91dHB1dCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2FwdHVyZTogUmVnRXhwRXhlY0FycmF5O1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uZC1hc3NpZ25cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNhcHR1cmUgPSBSRWltYWdlLmV4ZWMob3V0cHV0W2ldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW3RleHQsIGZpbGVdID0gY2FwdHVyZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgKz0gb3V0cHV0W2ldLnNsaWNlKDAsIGNhcHR1cmUuaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W2ldID0gb3V0cHV0W2ldLnNsaWNlKGNhcHR1cmUuaW5kZXggKyB0ZXh0Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBjb2xsLmZpbmRPbmUoeyBfaWQ6IGZpbGUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ICs9IGBbQ1E6aW1hZ2UsZmlsZT1iYXNlNjQ6Ly8ke3Jlcy5kYXRhLmJ1ZmZlci50b1N0cmluZygnYmFzZTY0Jyl9XWA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0W2ldID0gdCArIG91dHB1dFtpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign5LiL6L295Zu+54mH5pe25Y+R55Sf6ZSZ6K+v44CCJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGN0eC5vbignZGlhbG9ndWUvYmVmb3JlLXNlbmQnLCBhc3luYyAoc3RhdGUpID0+IHtcbiAgICAgICAgICAgIGxldCB7IGFuc3dlciB9ID0gc3RhdGU7XG4gICAgICAgICAgICBpZiAoIWFuc3dlcikgcmV0dXJuO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBsZXQgb3V0cHV0ID0gJyc7XG4gICAgICAgICAgICAgICAgbGV0IGNhcHR1cmU6IFJlZ0V4cEV4ZWNBcnJheTtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uZC1hc3NpZ25cbiAgICAgICAgICAgICAgICB3aGlsZSAoY2FwdHVyZSA9IFJFaW1hZ2UuZXhlYyhhbnN3ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFt0ZXh0LCBmaWxlXSA9IGNhcHR1cmU7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCArPSBhbnN3ZXIuc2xpY2UoMCwgY2FwdHVyZS5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGFuc3dlciA9IGFuc3dlci5zbGljZShjYXB0dXJlLmluZGV4ICsgdGV4dC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBjb2xsLmZpbmRPbmUoeyBfaWQ6IGZpbGUgfSk7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCArPSBgW0NROmltYWdlLGZpbGU9YmFzZTY0Oi8vJHtyZXMuZGF0YS5idWZmZXIudG9TdHJpbmcoJ2Jhc2U2NCcpfV1gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdGF0ZS5hbnN3ZXIgPSBvdXRwdXQgKyBhbnN3ZXI7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign5LiL6L295Zu+54mH5pe25Y+R55Sf6ZSZ6K+v44CCJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGN0eC5vbignZGlhbG9ndWUvYmVmb3JlLW1vZGlmeScsIGFzeW5jICh7IG9wdGlvbnMgfSkgPT4ge1xuICAgICAgICAgICAgbGV0IHsgYW5zd2VyIH0gPSBvcHRpb25zO1xuICAgICAgICAgICAgaWYgKCFhbnN3ZXIpIHJldHVybjtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbGV0IG91dHB1dCA9ICcnO1xuICAgICAgICAgICAgICAgIGxldCBjYXB0dXJlOiBSZWdFeHBFeGVjQXJyYXk7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbmQtYXNzaWduXG4gICAgICAgICAgICAgICAgd2hpbGUgKGNhcHR1cmUgPSBpbWFnZVJFLmV4ZWMoYW5zd2VyKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBbdGV4dCwgZmlsZSwgdXJsXSA9IGNhcHR1cmU7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCArPSBhbnN3ZXIuc2xpY2UoMCwgY2FwdHVyZS5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGFuc3dlciA9IGFuc3dlci5zbGljZShjYXB0dXJlLmluZGV4ICsgdGV4dC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBkb3dubG9hZEZpbGUoZmlsZSwgdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9IGBbQ1E6aW1hZ2UsZmlsZT1pbWFnZTovLyR7ZmlsZX1dYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hbnN3ZXIgPSBvdXRwdXQgKyBhbnN3ZXI7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiK5Lyg5Zu+54mH5pe25Y+R55Sf6ZSZ6K+v44CCJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tYXdhaXQtaW4tbG9vcCAqL1xuaW1wb3J0IHN1cGVyYWdlbnQgZnJvbSAnc3VwZXJhZ2VudCc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHNoYXJwIGZyb20gJ3NoYXJwJztcbmltcG9ydCB7IENvbnRleHQgfSBmcm9tICdrb2lzaGktY29yZSc7XG5pbXBvcnQgeyB0YWtlLCBmaWx0ZXIgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgYXBwbHkgYXMgS29pc2hpUGx1Z2luSW1hZ2VTZWFyY2ggfSBmcm9tICdrb2lzaGktcGx1Z2luLWltYWdlLXNlYXJjaCc7XG5pbXBvcnQgeyBhcHBseSBhcyBLb2lzaGlQbHVnaW5Ub29scyB9IGZyb20gJ2tvaXNoaS1wbHVnaW4tdG9vbHMnO1xuaW1wb3J0IHsgZXhpc3RzU3luYyB9IGZyb20gJ2ZzJztcbmltcG9ydCB7IHRleHQycG5nIH0gZnJvbSAnLi4vbGliL2dyYXBoJztcbmltcG9ydCBzaGVsbEV4ZWN1dGUgZnJvbSAnLi4vbGliL3NoZWxsJztcblxuZXhwb3J0IGNvbnN0IGFwcGx5ID0gKGN0eDogQ29udGV4dCkgPT4ge1xuICAgIGN0eC5wbHVnaW4oS29pc2hpUGx1Z2luVG9vbHMsIHtcbiAgICAgICAgYmlsaWJpbGk6IGZhbHNlLFxuICAgICAgICBtYWdpOiBmYWxzZSxcbiAgICAgICAgb2VpczogZmFsc2UsXG4gICAgfSk7XG4gICAgY3R4LnBsdWdpbihLb2lzaGlQbHVnaW5JbWFnZVNlYXJjaCk7XG4gICAgY3R4LmNvbW1hbmQoJ3NlYXJjaCcsICcnLCB7IG1heFVzYWdlOiA1LCBtaW5JbnRlcnZhbDogNjAwMDAgfSk7XG5cbiAgICBjdHguY29tbWFuZCgndG9vbHMvdGV4IDxjb2RlOnRleHQ+JywgJ0thVGVYIOa4suafkycsIHsgbWluSW50ZXJ2YWw6IDEwMDAgfSlcbiAgICAgICAgLmFsaWFzKCdrYXRleCA8Y29kZTp0ZXh0PicpXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9LCB0ZXgpID0+IHtcbiAgICAgICAgICAgIGxldCB7IGRhdGE6IHN2ZyB9ID0gYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL3d3dy56aGlodS5jb20vZXF1YXRpb24/dGV4PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHRleCl9YCk7XG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gc3ZnLm1hdGNoKC8+KFtePF0rKTxcXC90ZXh0Pi8pO1xuICAgICAgICAgICAgaWYgKHRleHQpIHJldHVybiBzZXNzaW9uLnNlbmQodGV4dFsxXSk7XG4gICAgICAgICAgICBjb25zdCB2aWV3Qm94ID0gc3ZnLm1hdGNoKC8gdmlld0JveD1cIjAgKC0/XFxkKiguXFxkKyk/KSAtP1xcZCooLlxcZCspPyAtP1xcZCooLlxcZCspP1wiIC8pO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cbiAgICAgICAgICAgIGlmICh2aWV3Qm94KSBzdmcgPSBzdmcucmVwbGFjZSgnXFxuJywgYFxcbjxyZWN0IHg9XCIwXCIgeT1cIiR7dmlld0JveFsxXX1cIiB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCIgZmlsbD1cIndoaXRlXCI+PC9yZWN0PlxcbmApOyAvLyBsZ3RtIFtqcy9pbmNvbXBsZXRlLXNhbml0aXphdGlvbl1cbiAgICAgICAgICAgIGNvbnN0IHBuZyA9IGF3YWl0IHNoYXJwKEJ1ZmZlci5mcm9tKHN2ZykpLnBuZygpLnRvQnVmZmVyKCk7XG4gICAgICAgICAgICByZXR1cm4gc2Vzc2lvbi5zZW5kKGBbQ1E6aW1hZ2UsZmlsZT1iYXNlNjQ6Ly8ke3BuZy50b1N0cmluZygnYmFzZTY0Jyl9XWApO1xuICAgICAgICB9KTtcblxuICAgIGN0eC5jb21tYW5kKCd0b29scy9pcCA8aXA+JywgJ+afpeivomlwJylcbiAgICAgICAgLmFjdGlvbihhc3luYyAoXywgYXJncykgPT4ge1xuICAgICAgICAgICAgY29uc3QgdXJsID0gYGh0dHA6Ly9mcmVlYXBpLmlwaXAubmV0LyR7YXJnc31gO1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgc3VwZXJhZ2VudC5nZXQodXJsKTtcbiAgICAgICAgICAgIHJldHVybiByZXMuYm9keS5qb2luKCcgJyk7XG4gICAgICAgIH0pO1xuXG4gICAgY3R4LmNvbW1hbmQoJ3Rvb2xzL29laXMgPHNlcXVlbmNlPicsICfkvb/nlKggT0VJUyDov5vooYzmlbDliJfmn6Xor6InLCB7IG1heFVzYWdlOiAxMCB9KVxuICAgICAgICAub3B0aW9uKCdzdGFydCcsICctcyA8c3RhcnQ+IOiuvue9rui1t+Wni+mhteeggScsIHsgZmFsbGJhY2s6IDAgfSlcbiAgICAgICAgLnVzYWdlKCfovpPlhaXnlKjpgJflj7fpmpTlvIDnmoTmlbDkvZzkuLropoHmn6Xor6LnmoTmlbDliJfnmoTliY3lh6DpobnvvIzmiJbogIXnm7TmjqXovpPlhaXku6UgaWQ6QSDmiZPlpLTnmoTmlbDliJfnvJblj7fjgIInKVxuICAgICAgICAuZXhhbXBsZSgnb2VpcyAxLDIsMyw2LDExLDIzLDQ3LDEwNiwyMzUnKVxuICAgICAgICAuZXhhbXBsZSgnb2VpcyBpZDpBMDAwMDU1JylcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBvcHRpb25zLCBzZXNzaW9uIH0sIHNlcXVlbmNlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGJvZHkgfSA9IGF3YWl0IHN1cGVyYWdlbnQuZ2V0KGBodHRwczovL29laXMub3JnL3NlYXJjaD9mbXQ9anNvbiZxPSR7c2VxdWVuY2V9JnN0YXJ0PSR7b3B0aW9ucy5zdGFydH1gKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBmaWx0ZXIoYm9keS5yZXN1bHRzLCAocmVzdWx0KSA9PiAhcmVzdWx0Lm5hbWUuc3RhcnRzV2l0aCgnRHVwbGljYXRlJykpO1xuICAgICAgICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgdGFrZShyZXN1bHRzLCAzKSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHNlc3Npb24uc2VuZFF1ZXVlZChbXG4gICAgICAgICAgICAgICAgICAgIGBodHRwczovL29laXMub3JnL0Eke1N0cmluZyhyZXN1bHQubnVtYmVyKS5wYWRTdGFydCg2LCAnMCcpfWAsXG4gICAgICAgICAgICAgICAgICAgIGAke3Jlc3VsdC5uYW1lfSR7cmVzdWx0LmlkID8gYCAoJHtyZXN1bHQuaWR9KWAgOiAnJ31gLFxuICAgICAgICAgICAgICAgICAgICBgJHt0YWtlKHJlc3VsdC5kYXRhLnNwbGl0KCcsJyksIDEwKS5qb2luKCcsJyl9YCxcbiAgICAgICAgICAgICAgICBdLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICBjdHguY29tbWFuZCgndG9vbHMvcG9ybmh1YiA8dGV4dDE+IDx0ZXh0Mj4nLCAn55Sf5oiQUG9ybkh1YumjjuagvExvZ28nKVxuICAgICAgICAuYWN0aW9uKGFzeW5jIChfLCB0ZXh0MSwgdGV4dDIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhZ2UgPSBhd2FpdCBjdHguYXBwLmJyb3dzZXIubmV3UGFnZSgpO1xuICAgICAgICAgICAgYXdhaXQgcGFnZS5nb3RvKCdodHRwczovL3d3dy5kdXRlLm9yZy9wb3JuaHViLWxvZ28nKTtcbiAgICAgICAgICAgIGF3YWl0IHBhZ2UuZXZhbHVhdGUoKHRleHQxLCB0ZXh0MikgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Bvcm5odWItcHJlZml4JylbMF0uaW5uZXJIVE1MID0gdGV4dDE7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncG9ybmh1Yi1wb3N0Zml4JylbMF0uaW5uZXJIVE1MID0gdGV4dDI7XG4gICAgICAgICAgICB9LCB0ZXh0MSwgdGV4dDIpO1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGF3YWl0IHBhZ2UuJCgnLnNjcmVlbnNob3RhYmxlJyk7XG4gICAgICAgICAgICBjb25zdCBidWYgPSBhd2FpdCBlbGVtZW50LnNjcmVlbnNob3Qoe30pO1xuICAgICAgICAgICAgYXdhaXQgcGFnZS5jbG9zZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGBbQ1E6aW1hZ2UsZmlsZT1iYXNlNjQ6Ly8ke2J1Zi50b1N0cmluZygnYmFzZTY0Jyl9XWA7XG4gICAgICAgIH0pO1xuXG4gICAgaWYgKGV4aXN0c1N5bmMoJy91c3IvYmluL3dkJykpIHtcbiAgICAgICAgY3R4LmNvbW1hbmQoJ3Rvb2xzL2RpY3QgPHdvcmQ+JywgJ+S9v+eUqOaXoOmBk+ivjeWFuOafpeivjScpXG4gICAgICAgICAgICAuZXhhbXBsZSgnZGljdCBoZWxsbycpXG4gICAgICAgICAgICAuYWxpYXMoJ3dkJylcbiAgICAgICAgICAgIC5hY3Rpb24oYXN5bmMgKF8sIHdvcmQpID0+IHtcbiAgICAgICAgICAgICAgICB3b3JkID0gd29yZC5zcGxpdCgnJykuZmlsdGVyKCh3KSA9PiAvWy1hLXpBLVowLTldLy50ZXN0KHcpKS5qb2luKCcnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwID0gYXdhaXQgc2hlbGxFeGVjdXRlKGAvdXNyL2Jpbi93ZCAke3dvcmR9YCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFnZSA9IGF3YWl0IGN0eC5hcHAuYnJvd3Nlci5uZXdQYWdlKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaW1nID0gYXdhaXQgdGV4dDJwbmcocGFnZSwgcCk7XG4gICAgICAgICAgICAgICAgcGFnZS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBgW0NROmltYWdlLGZpbGU9YmFzZTY0Oi8vJHtpbWd9XWA7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG59O1xuIiwiaW1wb3J0IHsgQXBwIH0gZnJvbSAna29pc2hpLWNvcmUnO1xuXG5jb25zdCBnZXRGaXJzdFBpbnlpbiA9IChkYXRhKSA9PiAoZGF0YS5waW55aW4uc3BsaXQoL1xccysvKS5zaGlmdCgpIHx8ICcnKVxuICAgIC5yZXBsYWNlKC9bxIHDoceOw6BdL2csICdhJykucmVwbGFjZSgvW8WNw7PHksOyXS9nLCAnbycpLnJlcGxhY2UoL1vEk8OpxJvDqMOqXS9nLCAnZScpXG4gICAgLnJlcGxhY2UoL1vEq8Otx5DDrF0vZywgJ2knKVxuICAgIC5yZXBsYWNlKC9bxavDuseUw7ldL2csICd1JylcbiAgICAucmVwbGFjZSgvW8eWx5jHmsecw7xdL2csICd2Jyk7XG5jb25zdCBnZXRMYXN0UGlueWluID0gKGRhdGEpID0+IChkYXRhLnBpbnlpbi5zcGxpdCgvXFxzKy8pLnBvcCgpIHx8ICcnKVxuICAgIC5yZXBsYWNlKC9bxIHDoceOw6BdL2csICdhJykucmVwbGFjZSgvW8WNw7PHksOyXS9nLCAnbycpLnJlcGxhY2UoL1vEk8OpxJvDqMOqXS9nLCAnZScpXG4gICAgLnJlcGxhY2UoL1vEq8Otx5DDrF0vZywgJ2knKVxuICAgIC5yZXBsYWNlKC9bxavDuseUw7ldL2csICd1JylcbiAgICAucmVwbGFjZSgvW8eWx5jHmsecw7xdL2csICd2Jyk7XG5jb25zdCBmaXggPSAoZGF0YSkgPT4ge1xuICAgIGlmIChkYXRhLndvcmQgPT09ICflkbPlkIzlmrzonKEnKSBkYXRhLnBpbnlpbiA9IGRhdGEucGlueWluLnJlcGxhY2UoJ2PDuScsICdsw6AnKTtcbiAgICBpZiAoZGF0YS53b3JkLmVuZHNXaXRoKCfkv6knKSkgZGF0YS5waW55aW4gPSBkYXRhLnBpbnlpbi5yZXBsYWNlKCdsaceObmcnLCAnbGnHjicpO1xuICAgIGRhdGEucGlueWluID0gZGF0YS5waW55aW4ucmVwbGFjZSgveWkoW8STw6nEm8Oow6plXSkvZywgJ3kkMScpO1xuICAgIHJldHVybiBkYXRhO1xufTtcbmNvbnN0IGluZGV4ZWQgPSAoanNvbikgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHsgZmlyc3RQaW55aW46IHt9LCBsYXN0UGlueWluOiB7fSwgd29yZDoge30gfTtcbiAgICBmb3IgKGNvbnN0IGRhdGEgb2YganNvbikge1xuICAgICAgICBmaXgoZGF0YSk7XG4gICAgICAgIGlmIChkYXRhLndvcmQubGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgICBjb25zdCBrZXkxID0gZ2V0TGFzdFBpbnlpbihkYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlczEgPSByZXN1bHQubGFzdFBpbnlpbltrZXkxXSB8fCBbXTtcbiAgICAgICAgICAgIHJlc3VsdC5sYXN0UGlueWluW2tleTFdID0gdmFsdWVzMTtcbiAgICAgICAgICAgIHZhbHVlczEucHVzaChkYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IGtleTIgPSBnZXRGaXJzdFBpbnlpbihkYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlczIgPSByZXN1bHQuZmlyc3RQaW55aW5ba2V5Ml0gfHwgW107XG4gICAgICAgICAgICByZXN1bHQuZmlyc3RQaW55aW5ba2V5Ml0gPSB2YWx1ZXMyO1xuICAgICAgICAgICAgdmFsdWVzMi5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgcmVzdWx0LndvcmRbZGF0YS53b3JkXSA9IGRhdGE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHBpbnlpbnMgPSBuZXcgU2V0KFsneWknXSk7XG4gICAgZm9yIChsZXQgbGV2ZWwgPSAxOyBwaW55aW5zLnNpemUgPiAwOyArK2xldmVsKSB7XG4gICAgICAgIGNvbnN0IG5ld3BpbnlpbnM6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xuICAgICAgICBwaW55aW5zLmZvckVhY2goKHBpbnlpbikgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCBkYXRhIG9mIHJlc3VsdC5sYXN0UGlueWluW3Bpbnlpbl0gfHwgW10pIHtcbiAgICAgICAgICAgICAgICBpZiAoIWRhdGEubGV2ZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5sZXZlbCA9IGxldmVsO1xuICAgICAgICAgICAgICAgICAgICBuZXdwaW55aW5zLmFkZChnZXRGaXJzdFBpbnlpbihkYXRhKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcGlueWlucyA9IG5ld3BpbnlpbnM7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5jb25zdCBkYiA9IGluZGV4ZWQoZXZhbCgncmVxdWlyZScpKGAke3Byb2Nlc3MuY3dkKCl9L2RhdGFiYXNlL3lpR2VEaW5nTGlhLmpzb25gKSk7XG5cbmNvbnN0IGhhbmRsZSA9IChpbnB1dDogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IGRhdGEgPSBkYi53b3JkW2lucHV0XTtcbiAgICB3aGlsZSAoZGF0YSAmJiBkYXRhLmxldmVsKSB7XG4gICAgICAgIGNvbnN0IHsgbGV2ZWwgfSA9IGRhdGE7XG4gICAgICAgIHJlc3VsdC5wdXNoKGRhdGEpO1xuICAgICAgICBpZiAobGV2ZWwgPiAxKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gZGIuZmlyc3RQaW55aW5bZ2V0TGFzdFBpbnlpbihkYXRhKV07XG4gICAgICAgICAgICBjb25zdCBmaWx0ZXJlZCA9IG5leHQuZmlsdGVyKChkKSA9PiBkLmxldmVsICYmIGQubGV2ZWwgPCBsZXZlbCk7XG4gICAgICAgICAgICBkYXRhID0gZmlsdGVyZWRbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZmlsdGVyZWQubGVuZ3RoKV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh7IHdvcmQ6ICfkuIDkuKrpobbkv6knLCBwaW55aW46ICd5xKsgZ8OoIGTHkG5nIGxpx44nIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGNvbnN0IGFwcGx5ID0gKGFwcDogQXBwKSA9PiB7XG4gICAgYXBwLmNvbW1hbmQoJ+aIkOivreaOpem+mSA85oiQ6K+tPicsICfmiJDor63mjqXpvpknLCB7IG1pbkludGVydmFsOiAxMDAwLCBjaGVja0FyZ0NvdW50OiBmYWxzZSB9KVxuICAgICAgICAuYWN0aW9uKChfLCBhcmdzKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWFyZ3MpIHJldHVybiAn6K+36L6T5YWl5oiQ6K+t44CCJztcbiAgICAgICAgICAgIGNvbnN0IGQgPSBoYW5kbGUoYXJncyk7XG4gICAgICAgICAgICBpZiAoZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgaW4gZCkgcmVzLnB1c2goZFtpXS53b3JkLCAnICcpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXMuam9pbignJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xufTtcbiIsInZhciBtYXAgPSB7XG5cdFwiLi9hdXRva2lja1wiOiA2Mjg2LFxuXHRcIi4vYXV0b2tpY2sudHNcIjogNjI4Nixcblx0XCIuL2JpbGliaWxpXCI6IDEyOTgsXG5cdFwiLi9iaWxpYmlsaS50c1wiOiAxMjk4LFxuXHRcIi4vYm90dGxlXCI6IDI5MzIsXG5cdFwiLi9ib3R0bGUudHNcIjogMjkzMixcblx0XCIuL2J1c3lib3hcIjogNDQ1NCxcblx0XCIuL2J1c3lib3gudHNcIjogNDQ1NCxcblx0XCIuL2NhbGNcIjogODM0Mixcblx0XCIuL2NhbGMudHNcIjogODM0Mixcblx0XCIuL2NvZGVmb3JjZXNcIjogNjEzNCxcblx0XCIuL2NvZGVmb3JjZXMudHNcIjogNjEzNCxcblx0XCIuL2RyZXNzXCI6IDE5MTYsXG5cdFwiLi9kcmVzcy50c1wiOiAxOTE2LFxuXHRcIi4vZWNvbm9teVwiOiA1MjgyLFxuXHRcIi4vZWNvbm9teS50c1wiOiA1MjgyLFxuXHRcIi4vZXZhbFwiOiA3Mjc2LFxuXHRcIi4vZXZhbC50c1wiOiA3Mjc2LFxuXHRcIi4vZ2l0aHViXCI6IDgzOTQsXG5cdFwiLi9naXRodWIudHNcIjogODM5NCxcblx0XCIuL2dsYWRvc1wiOiA0ODE5LFxuXHRcIi4vZ2xhZG9zLnRzXCI6IDQ4MTksXG5cdFwiLi9oZWFydGhzdG9uZVwiOiA3NzgwLFxuXHRcIi4vaGVhcnRoc3RvbmUudHNcIjogNzc4MCxcblx0XCIuL2h0dHBjYXRcIjogMTI2Myxcblx0XCIuL2h0dHBjYXQudHNcIjogMTI2Myxcblx0XCIuL2ltYWdldGFnXCI6IDU3NzgsXG5cdFwiLi9pbWFnZXRhZy50c1wiOiA1Nzc4LFxuXHRcIi4vamp3elwiOiAxOTI1LFxuXHRcIi4vamp3ei50c1wiOiAxOTI1LFxuXHRcIi4va2FidVwiOiAyMTc5LFxuXHRcIi4va2FidS50c1wiOiAyMTc5LFxuXHRcIi4vbHVvZ3VcIjogMTc4Nyxcblx0XCIuL2x1b2d1LnRzXCI6IDE3ODcsXG5cdFwiLi9seGJvdFwiOiA3NzUwLFxuXHRcIi4vbHhib3QudHNcIjogNzc1MCxcblx0XCIuL29jclwiOiAxMDc4LFxuXHRcIi4vb2NyLnRzXCI6IDEwNzgsXG5cdFwiLi9vaWVyXCI6IDgxNDAsXG5cdFwiLi9vaWVyLnRzXCI6IDgxNDAsXG5cdFwiLi9wcm94eVwiOiA1NDA1LFxuXHRcIi4vcHJveHkudHNcIjogNTQwNSxcblx0XCIuL3B1cHBldGVlclwiOiA4NDE0LFxuXHRcIi4vcHVwcGV0ZWVyLnRzXCI6IDg0MTQsXG5cdFwiLi9ydW5cIjogMzM3Mixcblx0XCIuL3J1bi50c1wiOiAzMzcyLFxuXHRcIi4vc3RhdHVzXCI6IDcwODgsXG5cdFwiLi9zdGF0dXMudHNcIjogNzA4OCxcblx0XCIuL3N1ZG9cIjogOTg5MSxcblx0XCIuL3N1ZG8udHNcIjogOTg5MSxcblx0XCIuL3RlYWNoXCI6IDQ3NSxcblx0XCIuL3RlYWNoLnRzXCI6IDQ3NSxcblx0XCIuL3Rvb2xzXCI6IDg0MjQsXG5cdFwiLi90b29scy50c1wiOiA4NDI0LFxuXHRcIi4vd29yZGNsb3VkXCI6IDc1NTgsXG5cdFwiLi93b3JkY2xvdWQudHNcIjogNzU1OCxcblx0XCIuL3lnZGxcIjogMjQ2OCxcblx0XCIuL3lnZGwudHNcIjogMjQ2OFxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDUzMDU7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLmNhY2hlL2hzX2NhcmRfZW5VUy5qc29uXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uY2FjaGUvaHNfY2FyZF96aENOLmpzb25cIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImFuc2lfdXBcIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImF4aW9zXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjaGlsZF9wcm9jZXNzXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjcnlwdG9cIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImZzXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJmcy1leHRyYVwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwianMteWFtbFwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwia29pc2hpLWFkYXB0ZXItb25lYm90XCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJrb2lzaGktYWRhcHRlci10ZWxlZ3JhbVwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwia29pc2hpLWNvcmVcIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImtvaXNoaS1wbHVnaW4tY29tbW9uXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJrb2lzaGktcGx1Z2luLWV2YWxcIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImtvaXNoaS1wbHVnaW4taW1hZ2Utc2VhcmNoXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJrb2lzaGktcGx1Z2luLW1vbmdvXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJrb2lzaGktcGx1Z2luLXB1cHBldGVlclwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwia29pc2hpLXBsdWdpbi10ZWFjaFwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwia29pc2hpLXBsdWdpbi10b29sc1wiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwia29pc2hpLXBsdWdpbi13ZWJ1aVwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwia29pc2hpLXV0aWxzXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm1vbWVudFwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibW9uZ29kYlwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwib3NcIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInBhdGhcIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInBuZ2pzXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJzaGFycFwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwic3VwZXJhZ2VudFwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwic3VwZXJhZ2VudC1wcm94eVwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidXRpbFwiKTs7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oOTA2Myk7XG4iXSwic291cmNlUm9vdCI6IiJ9