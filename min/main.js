(()=>{var __webpack_modules__={9740:()=>{},4134:()=>{},1200:()=>{},9147:()=>{},9794:()=>{},7028:()=>{},1050:()=>{},1927:()=>{},8825:()=>{},8310:()=>{},4280:()=>{},7704:()=>{},6145:()=>{},4158:()=>{},8372:()=>{},2983:()=>{},3019:()=>{},8109:()=>{},4830:()=>{},5735:()=>{},2030:()=>{},3565:()=>{},5486:()=>{},7711:()=>{},9375:()=>{},9666:()=>{},4599:()=>{},5891:()=>{},8734:()=>{},7617:()=>{},9186:()=>{},3490:()=>{},3655:()=>{},9425:()=>{},438:()=>{},7867:()=>{},2315:()=>{},6374:()=>{},2989:()=>{},9408:()=>{},3219:()=>{},5309:()=>{},9037:()=>{},3609:()=>{},420:()=>{},1707:()=>{},1729:()=>{},8795:()=>{},2137:()=>{},211:()=>{},2563:()=>{},5471:()=>{},8744:()=>{},1665:()=>{},3332:()=>{},8669:()=>{},9308:()=>{},3579:()=>{},9834:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.endOfToday=void 0;const a=n(o(2470));t.endOfToday=function(){return a.default().utc().add(8,"hours").endOf("day").subtract(8,"hours").toDate()}},5289:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.text2png=void 0;const a=new(n(o(4768)).default);t.text2png=async function(e,t){const o=`<pre style="font-family:'Source Code Pro', Consolas, 'Microsoft Yahei', HYShuaiXianTiW;font-size:14px;max-width:630px">${a.ansi_to_html(t)}</pre>`;let n,i;try{await e.setViewport({height:100,width:30}),await e.setContent(o);const t=await e.$("pre"),a=await e.evaluate((()=>{const e=document.getElementsByTagName("pre")[0];return{width:e.scrollWidth,height:e.scrollHeight}})),i=await t.boundingBox();await e.setViewport({width:Math.ceil(a.width+14),height:Math.ceil(i.height+14)}),n=await e.screenshot({})}catch(e){i=e}if(i)throw i;return(n||Buffer.from("")).toString("base64")}},6414:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.registerItem=t.Items=void 0,t.Items={fallback:{id:"fallback",weight:0,name:"未知物品",description:"未知物品"}},t.registerItem=function(e,o,n,a){t.Items[e]={id:e,weight:o,name:n,description:a}}},3837:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=o(3129);t.default=async function(e){let t;try{t=await new Promise(((t,o)=>{n.exec(e,((e,n,a)=>{e&&o(e),t(n+a)}))}))}catch(e){return e.toString()}return t.trim().length?t:"(execute success)"}},7326:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};const a=n(o(5622)),i=o(8664),s=o(280),r=n(o(4298)),c=o(9585);o(8573),o(9711),process.on("unhandledRejection",((e,t)=>{console.log("Unhandled Rejection:",t)})),s.Logger.showDiff=!1,s.Logger.showTime="MM-DD hh:mm:ss",i.Command.defaultConfig.checkArgCount=!0,String.prototype.decode=function(){return this.replace(/&#91;/gm,"[").replace(/&#93;/gm,"]").replace(/&amp;/gm,"&")},String.prototype.encode=function(){return this.replace(/&/gm,"&amp;").replace(/\[/gm,"&#91;").replace(/\]/gm,"&#93;")},i.Session.prototype.executeSilent=function(e,t){return this._silent=!0,this.send=s.noop,this.sendQueued=s.noop,this.execute(e,t)};class l{constructor(e){this.logger=new s.Logger("main"),this.config=e.config,this.app=new i.App({port:this.config.port,bots:this.config.bots,type:this.config.type,onebot:this.config.onebot,telegram:this.config.telegram,prefix:this.config.prompt,autoAuthorize:1,autoAssign:!0,minSimilarity:.7}),this.run()}async run(){r.default.ensureDirSync(a.default.resolve(__dirname,"..",".cache")),this.app.plugin(c.apply,this.config.db),this.app.on("connect",(async()=>{for(const e of this.config.admin){const t=e.split("&");let o;for(const e of t){const[t,n]=e.split(":");await this.app.database.getUser(t,n)&&(o=[t,n])}const n=Object.assign({},...t.map((e=>e.split(":"))).map((e=>({[e[0]]:e[1]}))));o&&this.app.database.setUser(o[0],o[1],{...n,authority:5,sudoer:!0}),this.logger.info(`Opped ${e}`)}})),await this.load(),await this.app.start()}async load(){for(const e of this.config.enabledplugins)try{"string"==typeof e?e.startsWith("#")?this.app.plugin(o(8085)(`./${e.split("#")[1]}`)):this.app.plugin(o(8845)(e).apply):e instanceof Array&&(e[0].startsWith("#")&&this.app.plugin(o(8085)(`./${e[0].split("#")[1]}`),e[1]),this.app.plugin(o(8845)(e[0]).apply,e[1]))}catch(t){this.logger.error("Failed to load ",e,t)}}}global.Main=l,e.exports=l},2615:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const a=o(8664),i=o(3804),s=n(o(2470));a.Channel.extend((()=>({kick:0}))),t.apply=async function(e){e.select("platform","onebot").command("autokick <count>","",{hidden:!0,authority:4}).channelFields(["kick"]).action((async({session:e},t)=>(e.channel.kick=+t,`set to ${t}`))),e.app.on("connect",(()=>{const t=e.app.database.mongo.collection("autokick");e.select("platform","onebot").command("autokick.run","",{hidden:!0,authority:4}).channelFields(["kick"]).option("dry","dry run",{authority:2}).action((async({session:e,options:o})=>{const n=await e.bot.getGroup(e.groupId);let a=await e.bot.$getGroupMemberList(n.groupId);const r=(await t.find({groupId:e.groupId}).toArray()).map((e=>e.userId));if(a=i.filter(a,(e=>!r.includes(e.userId))),e.channel.kick&&e.channel.kick<a.length){let r;a=i.sortBy(a.map((e=>({...e,sort:Math.max(e.lastSentTime,e.joinTime)}))),"sort");for(const o of a){if(!await t.findOne({groupId:e.groupId,userId:o.userId})){r=o;break}}await e.send([`将 ${r.nickname||r.card} (${r.userId}) 移出群`,`（${s.default(1e3*r.joinTime||0).fromNow()}加入，上次发言 ${s.default(1e3*r.lastSentTime||0).fromNow()}）`].join("\n")),o.dry||await Promise.all([e.bot.$setGroupKick(n.groupId,r.userId),t.insertOne({groupId:e.groupId,userId:r.userId})])}}))}))}},364:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const a=n(o(4515)),i={};for(let e=0;e<58;e++)i["fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF"[e]]=e;const s=[11,10,3,8,4,6],r=["B","V","1","","","4","","1","","7","",""];function c(e){if(12!==e.length||(e[0]+e[1]+e[2]+e[5]+e[7]+e[9]).toUpperCase()!==r.join(""))return null;let t=0;for(let o=0;o<6;o++)t+=i[e[s[o]]]*58**o;return t=t-8728348608^177451812,t>0&&t<1e9?t:null}const l=[[/(BV[0-9a-zA-Z]{10})/gim,e=>c(e[1])],[/av([0-9]+)/gim,e=>parseInt(e[1],10)],[/b23\.tv\/([a-zA-Z0-9]+)/gim,async e=>{const t=`https://b23.tv/${e[1]}`;return c((await new Promise((e=>{a.default.get(t).buffer(!1).end(((o,n)=>{e(n.redirects.length?n.redirects.pop():t)}))}))).split("video/")[1].split("?")[0])}]];t.apply=e=>{e.command("bilibili <avid>",{hidden:!0}).action((async({session:e},t)=>{const o=await a.default.get(`http://api.bilibili.com/x/web-interface/view?aid=${t}`);0===o.body.code&&await e.send(`bilibili.com/video/av${t}\n${o.body.data.title}\n[CQ:image,file=${o.body.data.pic}]`)})),e.middleware((async(e,t)=>{let o;await t();for(const t of l){const n=t[0].exec(e.content);if(n){const e=t[1](n);o=e instanceof Promise?await e:e;break}}o&&await e.execute(`bilibili ${o}`)}))}},1413:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;t.apply=e=>{e.on("connect",(async()=>{const t=e.database.mongo.collection("bottle");e.command("bottle.throw <content:text>","丢漂流瓶",{noRedirect:!0}).alias("丢漂流瓶").userFields(["id"]).action((async({session:e},o)=>`已丢出。(${(await t.insertOne({groupId:`${e.platform}:${e.groupId}`,userId:+e.user.id,content:o.trim(),pick:0})).insertedId})`)),e.command("bottle.pick","捡漂流瓶").alias("捡漂流瓶").action((async()=>{const e=await t.find({}).count();if(!e)return"没有捡到";const o=Math.floor(Math.random()*e),[n]=await t.find({}).skip(o).limit(1).toArray();return Math.random()>.5?await t.deleteOne({_id:n._id}):await t.updateOne({_id:n._id},{$inc:{pick:1}}),`被捡起 ${n.pick+1} 次\n时间：${new Date(1e3*n._id.generationTime).toLocaleString()}\n内容：${n.content}`})),e.command("bottle.del <query:text>",{authority:5,hidden:!0}).action((async(e,o)=>(await t.deleteMany(JSON.parse(o.decode()))).deletedCount.toString()))})),e.command("bottle","漂流瓶")}},7113:function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.apply=void 0;const child_process_1=__importDefault(__webpack_require__(3129)),util_1=__webpack_require__(1669),koishi_core_1=__webpack_require__(8664),koishi_plugin_common_1=__webpack_require__(4393),moment_1=__importDefault(__webpack_require__(2470)),graph_1=__webpack_require__(5289),shell_1=__importDefault(__webpack_require__(3837));koishi_core_1.Channel.extend((()=>({disallowedCommands:[]})));const groupMap={},userMap={};async function getGroupName(e){if("private"===e.subtype)return"私聊";const t=Date.now(),o=e.channelId;if(!groupMap[o]||t-groupMap[o][1]>=koishi_core_1.Time.hour){const n=e.bot.getGroup(o).then((e=>e.groupName),(()=>o));groupMap[o]=[n,t]}let n=await groupMap[o][0];return n!==`${o}`&&(n+=` (${o})`),n}async function formatMessage(e){const t=koishi_core_1.segment.parse(e.content);let o="";for(const n of t)if("string"==typeof n)o+=n;else if("text"===n.type)o+=n.data.content;else if("at"===n.type)if("all"===n.data.qq)o+="@全体成员";else{const t=n.data.qq,a=Date.now();if(!userMap[t]||a-userMap[t][1]>=koishi_core_1.Time.hour){const o=e.bot.getGroupMember(e.groupId,t).then((e=>e.nickname||e.username),(()=>t));userMap[t]=[o,a]}o+=`@${await userMap[t][0]}`}else"face"===n.type?o+=`[face ${n.data.id}]`:"image"===n.type?o+=`[image ${(n.data.url||"").split("?")[0]}]`:"reply"===n.type?o+=`[reply ${n.data.id}]`:o+=`[${n.type}]`;return o}const checkGroupAdmin=({session:e})=>e.user.authority>=4||e.author.roles.includes("admin")||e.author.roles.includes("owner")?null:"仅管理员可执行该操作。",apply=(ctx,config={})=>{var _a,_b;const logger=new koishi_core_1.Logger("busybox");koishi_core_1.Logger.levels.message=3,koishi_core_1.Time.setTimezoneOffset(null!==(_a=config.timezoneOffset)&&void 0!==_a?_a:-480),config.recordMessage=null===(_b=config.recordMessage)||void 0===_b||_b,ctx.plugin(koishi_plugin_common_1.apply,{}),ctx.command("help",{authority:1,hidden:!0}),ctx.command("tex",{authority:1}),ctx.command("_","管理工具"),ctx.select("groupId").command("_.assign","assign",{authority:4}).channelFields(["assignee"]).action((async({session:e})=>{e.channel.assignee=e.selfId.toString()})),ctx.command("_.echo <msg:text>","echo",{noRedirect:!0,authority:3}).action(((e,t)=>t.decode())),ctx.command("_.eval <expr:text>",{authority:5,noRedirect:!0,hidden:!0}).option("i","Output as image").userFields(koishi_core_1.User.fields).channelFields(koishi_core_1.Channel.fields).action((async({session,options},input)=>{let res;const expr=`        (async function f() {\n            return ${input.decode()}\n        })()`;try{res=await eval(expr)}catch(e){res=e}const output=util_1.inspect(res,!1,3);if(!options.i)return output;const page=await ctx.app.browser.newPage(),img=await graph_1.text2png(page,output);return page.close(),`[CQ: image, file = base64://${img}]`})),ctx.command("_.sh <command:text>","执行shell命令",{authority:5,noRedirect:!0}).option("i","Output as image").action((async({options:e},t)=>{const o=await shell_1.default(t.decode());if(!e.i)return o;const n=await ctx.app.browser.newPage(),a=await graph_1.text2png(n,o);return n.close(),`[CQ:image,file=base64://${a}]`})),ctx.command("_.shutdown","关闭机器人",{authority:5,noRedirect:!0}).action((()=>(setTimeout((()=>{process.env.pm_id?child_process_1.default.exec(`pm2 stop ${process.env.pm_id}`):process.exit(0)}),3e3),"Exiting in 3 secs..."))),ctx.command("_.restart","重启机器人",{authority:5,noRedirect:!0}).action((()=>process.env.pm_id?(setTimeout((()=>{child_process_1.default.exec(`pm2 restart ${process.env.pm_id}`)}),3e3),"Restarting in 3 secs..."):"Cannot restart: not pm2 environment")),ctx.select("platform").command("_.leave","退出该群",{noRedirect:!0}).userFields(["authority"]).check(checkGroupAdmin).action((async({session:e})=>{await e.bot.$setGroupLeave(e.groupId)})),ctx.command("_.setPriv <userId> <authority>","设置用户权限",{authority:5,noRedirect:!0}).action((async({session:e},t,o)=>("null"===o?(await ctx.database.setUser(e.platform,t,{flag:koishi_core_1.User.Flag.ignore}),o="0"):await ctx.database.setUser(e.platform,t,{flag:0}),await e.app.database.setUser(e.platform,t,{authority:+o}),`Set ${e.platform}:${t} to ${o}`))),ctx.command("_.boardcast <message:text>","全服广播",{authority:5,noRedirect:!0}).option("forced","-f 无视 silent 标签进行广播").action((async({options:e,session:t},o)=>{if(!o)return"请输入要发送的文本。";let n=await ctx.database.getAssignedChannels(["id","flag"]);e.forced||(n=n.filter((e=>!(e.flag&koishi_core_1.Channel.Flag.silent)))),n.forEach((e=>{t.bot.sendMessage(e.id,o)}))})),ctx.command("contextify <command:text>","在特定上下文中触发指令",{authority:4,noRedirect:!0}),ctx.command("_.deactivate","在群内禁用",{noRedirect:!0}).userFields(["authority"]).check(checkGroupAdmin).channelFields(["flag"]).action((({session:e})=>(e.channel.flag|=koishi_core_1.Channel.Flag.ignore,"Deactivated"))),ctx.command("_.activate","在群内启用",{noRedirect:!0}).userFields(["authority"]).check(checkGroupAdmin).channelFields(["flag"]).action((({session:e})=>(e.channel.flag&=~koishi_core_1.Channel.Flag.ignore,"Activated"))),ctx.command("_.switch <command>","启用/停用命令",{noRedirect:!0}).userFields(["authority"]).channelFields(["disallowedCommands"]).check(checkGroupAdmin).action((({session:e},t)=>{if(e.channel.disallowedCommands=e.channel.disallowedCommands||[],e.channel.disallowedCommands.includes(t)){const o=new Set(e.channel.disallowedCommands);return o.delete(t),e.channel.disallowedCommands=Array.from(o),`${t} 命令为启用状态。`}return e.channel.disallowedCommands.push(t),`${t} 命令为禁用状态。`})),ctx.command("_.mute <user> <periodSecs>","禁言用户",{noRedirect:!0}).userFields(["authority"]).check(checkGroupAdmin).action((({session:e},t,o="600000")=>e.bot.$setGroupBan(e.groupId,t,parseInt(o,10)))),ctx.on("message",(async e=>{const t=await getGroupName(e),o=`${e.username}(${e.userId})`,n=await formatMessage(e);if(logger.info(`[${t}] ${o}: ${n}`),e.groupId&&">_.activate"===e.content){if((await ctx.database.getUser(e.platform,e.userId)).authority>=4||e.author.roles.includes("admin")||e.author.roles.includes("owner")){const t=(await ctx.database.getChannel(e.platform,e.groupId)).flag&~koishi_core_1.Channel.Flag.ignore;await ctx.database.setChannel(e.platform,e.groupId,{flag:t}),await e.send("Activated")}else await e.send("您没有权限执行该操作")}})),ctx.on("before-send",(e=>{Promise.all([getGroupName(e),formatMessage(e)]).then((([t,o])=>logger.info(`send [${t}] ${e.selfId}: ${o}`)))})),ctx.on("group-member/ban",(e=>{e.userId.toString()===e.selfId.toString()&&console.log(e)})),ctx.on("group-member-added",(async e=>{const t=await e.app.database.getChannel(e.platform,e.groupId);logger.info("Event.Group_Increase",e,t),t.welcomeMsg&&await e.send(t.welcomeMsg.replace(/%@/gim,`[CQ:at,qq=${e.userId}`))})),ctx.on("group-member-deleted",(async e=>{const t=await ctx.database.getUser(e.platform,e.userId);logger.info("Event.Group_Decrease",e,t),e.send(`${e.username} 退出了群聊。`)})),ctx.on("before-command",(({session:e,command:t})=>{if(e.channel)return(e.channel.disallowedCommands||[]).includes(t.name)?"":void 0})),ctx.on("before-attach-user",((e,t)=>{t.add("id")})),ctx.on("before-attach-channel",((e,t)=>{t.add("disallowedCommands")})),ctx.app.on("friend-request",(e=>e.bot.setFriendAddRequest(e.flag,!0))),ctx.app.on("group-request",(async e=>{const t=await ctx.database.getUser(e.platform,e.userId);(config.public||[]).includes(`${e.platform}:${e.selfId}`)||5===(null==t?void 0:t.authority)?(logger.info("Approve Invite Request",e,t),e.bot.setGroupAddRequest(e.flag,e.subtype,!0)):(logger.info("Denied Invite Request",e,t),e.bot.setGroupAddRequest(e.flag,e.subtype,"此账号不对外开放，请使用其他账号。"))})),ctx.on("connect",(async()=>{const e=ctx.database.mongo.collection("message");logger.info("Ensuring index..."),await e.createIndex({time:-1,group:1,user:1}),logger.info("Done."),ctx.command("_.recall","撤回消息").userFields(["authority"]).check(checkGroupAdmin).option("count","-c <count> 数量",{fallback:1}).action((async({session:t,options:o})=>{const n=await t.app.database.getUser(t.platform,t.selfId.toString()),a=await e.find({group:t.groupId,sender:+n.id}).sort({time:-1}).limit(o.count).toArray();logger.info("deleting message: %o",a);for(const e of a)await t.bot.deleteMessage(t.groupId,e.id)})),ctx.command("_.stat [duration]","stat").option("total","-t Total").action((async({session:t,options:o},n="1day")=>{const[,a="1",i]=/(\d+)?(\w+)/.exec(n),s=`${t.platform}:${t.groupId}`,r=await t.app.database.getUser(t.platform,t.selfId.toString()),c=o.total?{}:{time:{$gt:moment_1.default().add(-a,i).toDate()}},l=await e.find({...c,sender:+r.id}).count(),u=await e.find({...c,group:s,sender:+r.id}).count(),d=await e.find({...c,sender:{$ne:+r.id}}).count(),p=await e.find({...c,group:s,sender:{$ne:+r.id}}).count();return`统计信息${o.total?"（总计）":`（${n}）`}\n发送消息${l}条，本群${u}条。\n收到消息${d}条，本群${p}条。`})),ctx.command("_.rank [duration]","rank").option("total","Total").action((async({session:t,options:o},n="1day")=>{var a;const[,i="1",s]=/(\d+)?(\w+)/.exec(n),r=`${t.platform}:${t.groupId}`,c=o.total?{group:r}:{time:{$gt:moment_1.default().add(-i,s).toDate()},group:r},l=await e.aggregate([{$match:c},{$group:{_id:"$sender",count:{$sum:1}}},{$sort:{count:-1}},{$limit:10}]).toArray(),u=await t.app.database.getUser("id",l.map((e=>e._id)),[t.platform,"name"]),d={};for(let e=0;e<l.length;e++){const o=l[e];try{d[o._id]=await t.bot.getGroupMember(t.groupId,u[e][t.platform])}catch(t){d[o._id]={username:(null===(a=u[e])||void 0===a?void 0:a.name)||o._id,nickname:""}}}return`群成员发言排行${o.total?"（共计）":`（${n}）`}\n${l.map((e=>`${d[e._id].nickname||d[e._id].username} ${e.count}条`)).join("\n")}`})),config.recordMessage&&(ctx.middleware(((t,o)=>{if(!t.groupId)return o();const n=`${t.platform}:${t.groupId}`;e.insertOne({group:n,message:t.content,sender:t.user.id,time:new Date,id:t.messageId})})),ctx.on("send",(async t=>{if(!t.groupId)return;const o=`${t.platform}:${t.groupId}`,n=await t.app.database.getUser(t.platform,t.selfId.toString(),["id"]);e.insertOne({time:new Date,sender:+n.id,group:o,message:t.content,id:t.messageId})})))}))};exports.apply=apply},7229:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const a=n(o(2376));t.apply=function(e){e.command("tools/calc <expr:text>","calc",{minInterval:2e3}).shortcut(/^\?([\s\S]+)$/,{args:["$1"]}).option("full","-f, --full full output").option("raw","-r, --raw raw input",{authority:5}).example("calc 1+1").example("calc Solve[x^2+1==0,{x}]").example("calc FactorInteger[233333]").action((async({session:e,options:t},o)=>{const{data:n}=await a.default.post("http://127.0.0.1:10378/",{raw:t.raw?"1":null,input:o.decode(),type:t.full?"Image":"Result"});if(!n.startsWith("<?xml"))return n;const i=await e.app.browser.newPage();await i.setContent(n);const s=await i.$("svg"),r=await i.screenshot({clip:await s.boundingBox()});return i.close(),`[CQ:image,file=base64://${r.toString("base64")}]`})),e.command("tools/calc.zebra <image:image>","Horse to Zebra",{minInterval:2e3})}},7901:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const a=n(o(4515)),i=o(3804);t.apply=function(e){e.command("oi","OI related"),e.command("oi/cf","Codeforces"),e.command("oi/cf.user <name>","Codeforces User",{minInterval:3e3}).action((async(e,t)=>{const o=await a.default.get(`https://codeforces.com/api/user.info?handles=${t}`).catch((()=>{}));if(!o)return"CF 挂了！";if("FAILED"===o.body.status)return"没这个人!";const n=o.body.result[0];return`${n.handle} ${n.firstName||""} ${n.lastName||""} ${n.organization||""}\n[CQ:image,file=https:${n.avatar}]\nRating: ${n.rating}\nRank: ${n.rank}\nMaxRating: ${n.maxRating}\nMaxRank: ${n.maxRank}`})),e.command("oi/cf.contest","Codeforces Contest",{minInterval:3e3}).action((async()=>{const e=await a.default.get("https://codeforces.com/api/contest.list").catch((()=>{}));if(!e||"OK"!==e.body.status)return"CF 挂了！";const t=(new Date).getTime(),o=i.filter(e.body.result,(e=>1e3*e.startTimeSeconds>t));let n="最近的比赛：\n";for(let e=o.length-1;e>=Math.max(o.length-5,0);e--){const t=o[e];n+=`${t.name} ${new Date(1e3*t.startTimeSeconds).toLocaleString()}\n`}return n}))}},5671:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const a=n(o(4515));t.apply=function(e){e.command("github/dress <path>","komeiji-satori/Dress").example("dress wuxianucw/001.jpg").action((async({session:e},t)=>{try{const o=await a.default.get(`https://cdn.jsdelivr.net/gh/komeiji-satori/Dress/${t}`).buffer();await e.send(`[CQ:image,file=base64://${o.body.toString("base64")}]`)}catch(e){return e.toString()}}))}},244:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const n=o(8664),a=o(6414);function i(...e){let t=0;for(const o of e)t+=o;return t}n.User.extend((()=>({coin:0,backpack:[]}))),t.apply=function(e){e.command("property","财产系统"),e.command("property/backpack","背包").userFields(["backpack"]).action((({session:e})=>e.user.backpack.length?[`你的背包共${i(...e.user.backpack.map((e=>e.count)))}个物品。`,...e.user.backpack.map((e=>`${(a.Items[e.id]||a.Items.fallback).name} * ${e.count}`))].join("\n"):"你的背包是空的！")),e.command("property/checkin","签到",{maxUsage:1}).shortcut("签到",{prefix:!1}).userFields(["coin"]).action((async({session:e})=>{const t=20+Math.floor(10*Math.random());return e.user.coin+=t,`签到成功，获得${t}个硬币（共有${e.user.coin}个）`})),e.command("property/pay <targetUserId> <count>","转账",{noRedirect:!0}).userFields(["coin"]).action((async({session:t},o,a)=>{const i=parseInt(a,10);if(!(Number.isSafeInteger(i)&&i>0))return"不合法的数值。";if(t.user.coin<i)return"你没有足够的硬币。";if(!o)return"未指定目标。";const s=new n.Session(e,t);s.userId=o,s.author.userId=o,delete s.user;const r=await s.observeUser(["coin"]);return t.user.coin-=i,r.coin+=i,await s.user._update(),`已转账${i}个硬币。`}))}},1465:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const n=o(8664),a=o(9160),i=o(280);t.apply=function(e,t){e.plugin(a.apply,t),e.command("evaluate").option("i","Output as image",{hidden:!0}).userFields(n.User.fields).channelFields(n.Channel.fields).check((({session:e})=>{if(!e._sudo)return;const t=e.argv.args[0].replace("eval ","");return e.argv.options.i&&e.execute(`_.eval -i ${t}`),e.execute(`_.eval ${t}`),""})),e.command("@","utils",{hidden:!0}),e.command("@.silent <command:text>",{hidden:!0}).action((({session:e},t)=>e.executeSilent(t))),e.command("@.sleep <duration> <command:text>",{hidden:!0}).action((async({session:e},t,o)=>{let n=Math.min(1e4,+t);!Number.isNaN(n)&&n||(n=0),await i.sleep(n),await e.execute(o)}))}},9028:function(e,t,o){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,o,n){void 0===n&&(n=o),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,n){void 0===n&&(n=o),e[n]=t[o]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&n(t,e,o);return a(t,e),t},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const r=s(o(6417)),c=i(o(4515)),l=s(o(3680)),u=o(280);l.default(c);const d=new u.Logger("github");class p extends Error{}function m(e){return e.replace(/^```(.*)$/gm,"").replace(/^<!--(.*)-->$/gm,"").replace(/\n\s*\n/g,"\n").replace(/(\r?\n *)+/gim,"\n")}async function f(e,t,o,n){const a=await e.newPage();try{await a.goto(t,{waitUntil:"networkidle0"});const e=await a.$(o);let i=await e.boundingBox();await a.setViewport({height:Math.ceil(i.y+i.height+50),width:1080}),i=await e.boundingBox(),i={x:i.x-n[0],y:i.y-n[1],width:i.width+n[2],height:i.height+n[3]};const s=await a.screenshot({encoding:"base64",clip:i});return await a.close(),s}catch(e){throw await a.close(),e}}t.apply=(e,t)=>{function o(e){return c.post(e).proxy(t.proxy).set("Accept","application/vnd.github.v3+json").set("User-Agent","HydroBot")}function n(e){return c.put(e).proxy(t.proxy).set("Accept","application/vnd.github.v3+json").set("User-Agent","HydroBot")}e.on("connect",(()=>{const a=e.database.mongo.collection("github_watch"),i=e.database.mongo.collection("github_data"),s={push:{async hook(e){const o=e.ref.split("/")[2],n=e.head_commit?e.head_commit.author.username:e.sender.login;let a=0,i=0,s=0,r=`Recent commit to ${e.repository.full_name}${"master"===o?"":`:${o}`} by ${n}`;if(t.sourcegraph)try{const o=await c.post("https://sourcegraph.com/.api/graphql").set("Authorization",`token ${t.sourcegraph}`).send({query:`query{\nrepository(name:"github.com/${e.repository.full_name}"){\n  comparison(base:"${e.before}",head:"${e.after}"){\n    fileDiffs{nodes{stat{added changed deleted}}}\n  }\n}\n}`});if(o.body.data)if(o.body.data.repository){const e=o.body.data.repository.comparison.fileDiffs.nodes;for(const t of e)a+=t.stat.added||0,i+=t.stat.deleted||0,s+=t.stat.changed||0}else d.info("Repo not found: %s",e.repository.full_name);else d.info(o.body)}catch(e){d.error(e)}(a||i||s)&&(r+=`\n${a}+ ${i}- ${s}M`);for(const t of e.commits){const e=[];t.added.length&&e.push(`${t.added.length}+`),t.removed.length&&e.push(`${t.removed.length}-`),t.modified.length&&e.push(`${t.modified.length}M`),r+=`\n${t.id.substr(0,6)} ${m(t.message).replace(/\n/g,"\r\n")} (${e.join(" ")})`}return[r,{link:e.compare}]},async interact(t,o,n){if(t.includes("!!link"))return[n.link];if(t.includes("!!diff")){return[`[CQ:image,file=base64://${await f(e.browser,n.link,".files-bucket",[0,0,0,0])}]`]}return[]}},issues:{async hook(t){var o;let n;if("opened"===t.action||"edited"===t.action){n=`${t.sender.login} ${t.action} issue ${t.repository.full_name}#${t.issue.number}`;try{const o=await f(e.browser,t.issue.html_url,".js-discussion",[68,130,92,130]);n+=`\n${u.segment.image(`base64://${o}`)}`}catch(e){new u.Logger("puppeteer").warn(e),n+=`\n${m(t.issue.title)}\n${m(t.issue.body||"")}`}}else n="assigned"===t.action?`${t.repository.full_name}#${t.issue.number}: Assigned ${t.assignee.login}`:"unassigned"===t.action?`${t.repository.full_name}#${t.issue.number}: Unassigned ${t.assignee.login}`:"closed"===t.action?`${t.sender.login} closed ${t.repository.full_name}#${t.issue.number}.`:["reopened","locked","unlocked"].includes(t.action)?`${t.sender.login} ${t.action} Issue:${t.repository.full_name}#${t.issue.number}`:"labled"===t.action?`${t.sender.login} labled ${t.repository.full_name}#${t.issue.number} ${t.lable.name}`:`Unknown issue action: ${t.action}`;return[n,{link:(null===(o=t.comment)||void 0===o?void 0:o.html_url)||t.issue.html_url,reponame:t.repository.full_name,issueId:t.issue.number}]},async interact(e,o,n,a){if(e.includes("!!link"))return[n.link];const i=await a();var s;return console.log(e),await(s=`https://api.github.com/repos/${n.reponame}/issues/${n.issueId}/comments`,c.get(s).proxy(t.proxy).set("Accept","application/vnd.github.v3+json").set("User-Agent","HydroBot")).set("Authorization",`token ${i}`).send({body:e}),[]}},issue_comment:{async hook(t){let o;if("created"===t.action||"edited"===t.action){o=`${t.comment.user.login} ${"created"===t.action?"commented":"edited a comment"} on ${t.repository.full_name}#${t.issue.number}`;try{const n=await f(e.browser,t.issue.html_url,`#${t.comment.html_url.split("#")[1]}`,[86,14,92,20]);o+=`\n${u.segment.image(`base64://${n}`)}`}catch(e){new u.Logger("puppeteer").warn(e),o+=`\n${m(t.comment.body)}`}}return[o,{link:t.issue.html_url,reponame:t.repository.full_name,issueId:t.issue.number}]},async interact(e,t,a,i){if(e.includes("!!link"))return[a.link];const s=await i();if(e.includes("!!merge")){const t=e.split("!!merge")[1];return await n(`https://api.github.com/repos/${a.reponame}/pulls/${a.issueId}/merge`).set("Authorization",`token ${s}`).send({commit_title:t}),[]}return e.includes("!!approve")?(await o(`https://api.github.com/repos/${a.reponame}/pulls/${a.issueId}/reviews`).set("Authorization",`token ${s}`).send({event:"APPROVE"}),[]):(await o(`https://api.github.com/repos/${a.reponame}/issues/${a.issueId}/comments`).set("Authorization",`token ${s}`).send({body:e}),[])}},pull_request:{async hook(e){let t;const{full_name:o,owner:n}=e.repository,{user:a,html_url:i,title:s,base:r,head:c,number:l,merged:u}=e.pull_request,d=new RegExp(`^${n.login}:`),p=r.label.replace(d,""),m=c.label.replace(d,"");if("Bot"!==a.type){if("opened"===e.action)t=`${a.login} opened an pull request for ${o}#${l}(${p}<${m})`,t+=`\n${s}`,e.pull_request.body&&(t+=`\n${e.pull_request.body}`);else if("created"===e.action)t=`${a.login} commented on ${o}#${l}(${p}<${m})`,t+=`\n${e.comment.body}`;else if("assigned"===e.action)t=`${o}#${l}: Assigned ${e.assignee.login}`;else if("unassigned"===e.action)t=`${o}#${l}: Unassigned ${e.assignee.login}`;else if("review_requested"===e.action)t=`${o}#${l}: Request a review.`;else if("closed"===e.action){const n=u?"merged":"closed";t=`${e.sender.login} ${n} ${o}#${l}(${p}<${m})`}else t=["reopened","locked","unlocked"].includes(e.action)?`${e.sender.login} ${e.action} PR:${o}#${l}`:["synchronize"].includes(e.action)?"":"ready_for_review"===e.action?`${o}#${l} is ready for review.`:`Unknown pull request action: ${e.action}`;return[t,{link:i,reponame:o,issueId:l}]}},async interact(e,t,a,i){if(e.includes("!!link"))return[a.link];const s=await i();if(e.includes("!!merge")){const t=e.split("!!merge")[1];await n(`https://api.github.com/repos/${a.reponame}/pulls/${a.issueId}/merge`).set("Authorization",`token ${s}`).send({commit_title:t})}else e.includes("!!approve")?await o(`https://api.github.com/repos/${a.reponame}/pulls/${a.issueId}/reviews`).set("Authorization",`token ${s}`).send({event:"APPROVE"}):await o(`https://api.github.com/repos/${a.reponame}/issues/${a.issueId}/comments`).set("Authorization",`token ${s}`).send({body:e});return[]}},pull_request_review:{hook:async e=>"commented"===e.review.state?[]:"approved"===e.review.state?[`${e.sender.login} approved ${e.repository.full_name}#${e.pull_request.number}`]:[]},pull_request_review_comment:{async hook(e){let t="";return"created"===e.action&&(t=`${e.comment.user.login} commented on ${e.repository.full_name}#${e.pull_request.number}\n`,t+=m(e.comment.body)),[t,{link:e.pull_request.html_url,reponame:e.repository.full_name,issueId:e.pull_request.number}]},async interact(e,t,n,a){if(e.includes("!!link"))return[n.link];const i=await a();return await o(`https://api.github.com/repos/${n.reponame}/issues/${n.issueId}/comments`).set("Authorization",`token ${i}`).send({body:e}),[]}},star:{hook:async e=>"created"===e.action?await i.findOne({user:e.sender.login,repo:e.repository.full_name})?[]:[`${e.sender.login} starred ${e.repository.full_name} (total ${e.repository.stargazers_count} stargazers)`,{user:e.sender.login,repo:e.repository.full_name}]:[]},watch:{},project_card:{},project_column:{},check_run:{},check_suite:{},repository_vulnerability_alert:{},status:{},label:{}};e.router.post("/github",(async t=>{try{const n=t.request.headers["x-github-event"];let c;c="string"==typeof t.request.body.payload?JSON.parse(t.request.body.payload):t.request.body;const l=(o=JSON.stringify(c),r.default.createHash("sha256").update(o).digest("hex"));if(s[n]||(s[n]={hook:e=>Promise.resolve([`${e.repository.full_name} triggered an unknown event: ${n}`])}),s[n].hook){const o=c.repository.full_name,[r,u]=await s[n].hook(c);if(await i.findOne({_id:l}))t.body="Duplicate event";else{let s=[];if(r){const t=await a.findOne({_id:o.toLowerCase()});if(t)for(const o of t.target){const[t,n]=o.split(":"),a=await e.database.getChannel(t,n,["assignee"]);a.assignee&&e.bots[`${t}:${a.assignee}`]?s.push(e.bots[`${t}:${a.assignee}`].sendMessage(n,r)):d.warn("Cannot send message to %s:%d with assignee %d",t,o,a.assignee)}s=await Promise.all(s),await i.insertOne({_id:l,type:n,relativeIds:s,...u})}t.body=`Pushed to ${s.length} group(s)`}}else t.body="Event ignored."}catch(e){console.log(e),t.body=e.toString()}var o})),e.router.get("/github/authorize",(async o=>{const[n,a]=o.query.state.split(":"),i=o.query.code,s=await c.post("https://github.com/login/oauth/access_token").proxy(t.proxy).send({client_id:t.client_id,client_secret:t.client_secret,code:i,redirect_uri:t.redirect_uri,state:o.query.state});s.body.access_token?(await e.database.setUser(n,a,{GithubToken:s.body}),o.body="Done"):o.body="Error"})),e.middleware((async(o,n)=>{if(!o.quote)return n();const a=o.parsed.content.replace(/\[CQ:at,.*\]/g,"").replace(/\[CQ:image,file=(.*)\]/g,(e=>` ![](${/\[CQ:image,file=(.*)\]/g.exec(e)[1]}) `)).decode().trim();if(!a)return n();const[r,l]=await Promise.all([i.findOne({relativeIds:o.quote.messageId}),e.database.getUser(o.platform,o.userId,["GithubToken"])]);if(r&&s[r.type].interact){if(d.info(a),d.info("Reply: %s",r),a.startsWith("//"))return n();try{let n;try{n=await s[r.type].interact(a.trim(),o,r,(async function(){var n;if(!(null===(n=l.GithubToken)||void 0===n?void 0:n.access_token))throw new p;if(200!==(await c.get("https://api.github.com/").proxy(t.proxy).set("Authorization",`token ${l.GithubToken.access_token}`).set("User-Agent","HydroBot")).status){if(!l.GithubToken.refresh_token)throw new p;const n=await c.post("https://github.com/login/oauth/access_token").proxy(t.proxy).set("User-Agent","HydroBot").send({grant_type:"refresh_token",client_id:t.client_id,client_secret:t.client_secret,refresh_token:l.GithubToken.refresh_token});if(!n.body.access_token)throw new p;return await e.database.setUser(o.platform,o.userId,{GithubToken:n.body}),n.body.access_token}return l.GithubToken.access_token})),console.log(n)}catch(e){if(console.log("catch",e),e instanceof p){o.send("请输入Github用户名");const e=await o.prompt(6e4);return e?o.send(`请点击下面的链接继续操作：\nhttps://github.com/login/oauth/authorize?client_id=${t.client_id}&state=${o.platform}:${o.userId}&redirect_url=${t.redirect_uri}&scope=admin%3Arepo_hook%2Crepo&login=${e}`):o.send("输入超时")}throw e}const[u,d]=n;u&&await o.send(u),d&&await i.updateOne({_id:r._id},{$set:d})}catch(e){o.send(e.message)}return n()}})),e.select("groupId").command("github.listen <repo>","监听一个Repository的事件").action((async({session:e},t)=>{if(2!==(t=t.toLowerCase()).split("/").length)return"无效地址";return await a.findOne({_id:t})?(await a.updateOne({_id:t},{$addToSet:{target:`${e.platform}:${e.groupId}`}},{upsert:!0}),`Watching ${t}`):(await a.insertOne({_id:t,target:[`${e.platform}:${e.groupId}`]}),`Watching ${t}\n(请创建 webhook 投递至 https://github.undefined.moe/webhook ，格式 application/json )`)})),e.select("groupId").command("github.list","List repos").action((async({session:e})=>(await a.find({target:`${e.platform}:${e.groupId}`}).project({_id:1}).toArray()).map((e=>e._id)).join("\n"))),e.select("groupId").command("github.cancel <repo>","取消一个Repository的事件").action((async({session:e},t)=>(await a.updateOne({_id:t.toLowerCase()},{$pull:{target:`${e.platform}:${e.groupId}`}}),`Cancelled ${t}.`)))}))}},6552:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const a=o(3129),i=n(o(5622)),s=o(2087),r=o(280),c=o(4298);t.apply=e=>{e.command("glados <message:text>","Glados",{minInterval:3e4}).action((async({session:e},t)=>{const o=Math.random().toString(),n=i.default.resolve(s.tmpdir(),`${o}.wav`);if(await new Promise((e=>{a.exec(`wget --tries=50 -O ${n} https://glados.c-net.org/generate?text=${encodeURIComponent(t)}`,(t=>{t&&e(t),e(void 0)}))}))){e.send("请求正在处理中，请稍后（这可能需要数分钟）"),await r.sleep(1e5);if(await new Promise((e=>{a.exec(`wget --tries=50 -O ${n} https://glados.c-net.org/generate?text=${encodeURIComponent(t)}`,(t=>{t&&e(t),e(void 0)}))})))throw new Error("Service Error")}await e.send(`[CQ:record,file=file://${n}]`),await c.unlink(n)}))}},2105:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const a=n(o(5622)),i=n(o(4515)),s=o(4298),r={};try{const e=o(9802);for(const t of e)r[t.id]=t.id,r[t.name]=t.id}catch(e){}try{const e=o(2293);for(const t of e)r[t.name]=t.id}catch(e){}async function c({session:e},t){if(!t.trim())return await e.send("请输入要查看的Card ID/Name");if(!Object.keys(r).length){const e=await i.default.get("https://api.hearthstonejson.com/v1/latest/zhCN/cards.collectible.json");await s.writeFile(a.default.resolve(__dirname,"..","..",".cache","hs_card_zhCN.json"),JSON.stringify(e.body));for(const t of e.body)r[t.id]=t.id,r[t.name]=t.id;const t=await i.default.get("https://api.hearthstonejson.com/v1/latest/enUS/cards.collectible.json");await s.writeFile(a.default.resolve(__dirname,"..","..",".cache","hs_card_enUS.json"),JSON.stringify(t.body));for(const e of t.body)r[e.name]=e.id}return r[t]?e.send(`[CQ:image,file=https://art.hearthstonejson.com/v1/render/latest/zhCN/512x/${r[t]}.png]`):await e.send("NotFound")}t.apply=e=>{e.command("card <name/id:text>","Get a card").action(c)}},1021:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const o=["100","101","200","201","202","204","206","207","300","301","302","303","304","305","307","400","401","402","403","404","405","406","408","409","410","411","412","413","414","415","416","417","418","420","421","422","423","424","425","426","429","431","444","450","451","499","500","501","502","503","504","505","506","507","508","509","510","511","599"];t.apply=function(e){e.command("cat <id>","http.cat",{minInterval:1e3}).action((async(e,t)=>o.includes(t)?`[CQ:image,file=https://cdn.jsdelivr.net/gh/httpcats/http.cat/public/images/${t}.jpg]`:`你家http协议会返回${t}？`))}},1290:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const a=o(5622),i=o(6417),s=o(8664),r=n(o(6675)),c=n(o(2376)),l=o(4298),u=n(o(742)),d=new s.Logger("imagetag"),p=/(\[CQ:image,file=[^,]+,url=[^\]]+\])/,m=({session:e})=>e.user.authority>=4||e.author.roles.includes("admin")||e.author.roles.includes("owner")?null:"仅管理员可执行该操作。";t.apply=async(e,t={})=>{const n=await l.readFile(a.resolve(__dirname,"..","..","database","image.tags.translation.yaml")),f=r.default.safeLoad(n.toString()),g=o(7233);e.on("before-attach-channel",((e,t)=>{t.add("enableAutoTag")})),e.middleware((async(e,t)=>{const o=p.exec(e.content);return o&&(2===e.channel.enableAutoTag?e.executeSilent(`tag ${o[1]}`):1===e.channel.enableAutoTag&&e.execute(`tag ${o[1]}`)),t()})),e.app.on("connect",(async()=>{const o=e.app.database.mongo.collection("image.tag");o.createIndex({md5:1},{unique:!0}),e.command("tag [image]","Get image tag",{hidden:!0,minInterval:2e3}).action((async({session:e},n)=>{try{let a;n||(await e.send("请发送图片。"),n=await e.prompt(3e4));let r=n;const l=s.segment.from(n);if(l){if("image"!==l.type)throw new Error("没有发现图片。");r=l.data.url,a=l.data.file}if(!r.startsWith("http"))throw new Error("没有发现图片。");a||(a=Buffer.from(r).toString("base64"));let p=await o.findOne({_id:a});if(p)return p.txt;const{data:m}=await c.default.get(r,{responseType:"arraybuffer"}),h=Buffer.alloc(m.byteLength),y=new Uint8Array(m);for(let e=0;e<h.length;++e)h[e]=y[e];const _=function(e){const t=i.createHash("md5");return t.update(e),t.digest("hex")}(h);if(p=await o.findOne({md5:_}),p)return p.txt;const w=(await u.default(h).png().toBuffer()).toString("base64");d.info("downloaded");const{data:b}=await c.default.post("http://127.0.0.1:10377/",{img:w});if("string"==typeof b){let e=b.split("HTTP")[0];throw(b.includes("output with shape")||b.includes("size of tensor"))&&(e="不支持的图片格式（请尝试截图发送）",await o.insertOne({_id:a,md5:_,txt:e})),new Error(e)}const $=[];let x="";for(const e of b)$.push(g[e[0]]),x+=`${f[g[e[0]]]||g[e[0]]}:${Math.floor(100*e[1])}%  `;if(d.info(x),t.url&&t.tags)for(const e of $)if(t.tags.includes(e)||$.length>7){c.default.get(`${t.url}&source=${encodeURIComponent(r)}&format=json`);break}return await o.insertOne({_id:a,md5:_,txt:x}),x}catch(e){return e.toString().split("\n")[0]}})),e.command("tag.disable","在群内禁用",{noRedirect:!0}).userFields(["authority"]).check(m).channelFields(["enableAutoTag"]).action((({session:e})=>(e.channel.enableAutoTag=0,"Disabled"))),e.command("tag.enable","在群内启用",{noRedirect:!0}).option("silent","-s").userFields(["authority"]).check(m).channelFields(["enableAutoTag"]).action((({session:e,options:t})=>(e.channel.enableAutoTag=t.silent?2:1,"enabled")))}))}},3196:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0,t.apply=function(e){e.command("jjwz","绝句文章"),e.command("jjwz.add <content:text>","创建/添加").channelFields(["jjwz"]).userFields(["id"]).action((async({session:e},t)=>{if(t.length>7)return"你怎么写这么长";if(e.channel.jjwz){if((e.channel.jjwz[e.channel.jjwz.length-1]||[])[0]===+e.user.id)return"你不能连续添加"}else e.channel.jjwz=[];return e.channel.jjwz.push([+e.user.id,t]),`${e.channel.jjwz.map((e=>e[1])).join("")}...`})),e.command("jjwz.end","结束").channelFields(["jjwz"]).userFields(["id"]).action((async({session:e})=>e.channel.jjwz?(e.channel.jjwz=null,e.channel.jjwz.map((e=>e[1])).join("")):"还未开始")),e.command("jjwz.edit <content:text>","编辑").channelFields(["jjwz"]).userFields(["id"]).action((async({session:e},t)=>e.channel.jjwz?t.length>7?"你怎么写这么长":e.channel.jjwz[e.channel.jjwz.length-1][0]!==+e.user.id?"上一条不是你所编辑":(e.channel.jjwz[e.channel.jjwz.length-1][1]=t,`${e.channel.jjwz.map((e=>e[1])).join("")}...`):"还未开始")),e.command("jjwz.del","删除").channelFields(["jjwz"]).userFields(["id"]).action((async({session:e})=>e.channel.jjwz?e.channel.jjwz[e.channel.jjwz.length-1][0]!==+e.user.id?"上一条不是你所编辑":(e.channel.jjwz.pop(),`${e.channel.jjwz.map((e=>e[1])).join("")}...`):"还未开始"))}},9982:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const a=o(7548),i=n(o(2470)),s=o(9834);i.default.locale("zh-cn");const r={expireDays:7,serviceFee:.03,maxBuyPerDay:10};t.apply=(e,t)=>{t={...r,...t},e.on("connect",(()=>{const o=e.database.mongo.collection("kabu.price");o.createIndex("expire",{expireAfterSeconds:0});const n=e.database.mongo.collection("kabu.stock");async function r(e){const t=await o.findOne({_id:e});if(t)return[t.price,t.bought||0];const n=Math.floor(Math.random()<.5?10+Math.sqrt(400*Math.random()):50-Math.sqrt(400*Math.random()));return await o.insertOne({_id:e,price:n,expire:s.endOfToday(),bought:0}),[n,0]}n.createIndex({userId:1,expire:1}),n.createIndex("expire",{expireAfterSeconds:0}),e.command("kabu.query","查询自己的库存以及今日大头菜价格").shortcut("查询大头菜",{prefix:!1}).userFields(["coin","id"]).action((async({session:e})=>{const[o,a]=await Promise.all([n.find({userId:+e.user.id}).sort("expire",1).limit(10).toArray(),n.find({userId:+e.user.id}).count()]);let s="",c=0;for(const{number:e,buyPrice:t,expire:n}of o)c+=e,s+=`你有 ${e} 棵以 ${t} 个硬币每棵买入的大头菜，它们会在 ${i.default(n).fromNow()} 烂掉。\n`;const[l,u]=await r(+e.user.id),d=t.maxBuyPerDay-u;return e.user.coin||(e.user.coin=0),0===a?s="你现在手上还没有大头菜"+(e.user.coin>=l&&d?"，要来买点吗？":"。"):a>o.length&&(s+=`隐藏了 ${a-o.length} 个条目。`),`你现在共有 ${c} 棵大头菜和 ${e.user.coin} 个硬币。\n今天卖给 ${e.username} 的大头菜价格是每棵 ${l} 硬币。您今天还可购入${d}个大头菜。\n${s}`})),e.command("kabu.buy [number]",`购买大头菜。若不指定数量则尽量多地购买。手续费 ${100*t.serviceFee}%。`,{noRedirect:!0}).shortcut("购买大头菜",{prefix:!1,fuzzy:!0}).userFields(["coin","id"]).action((async({session:e},s)=>{const[c,l]=await r(+e.user.id);e.user.coin||(e.user.coin=0);const u=Math.floor(e.user.coin/c/(1+t.serviceFee)),d=Math.min(t.maxBuyPerDay-l,+(null!=s?s:u));if(!Number.isInteger(d)||d<=0||d>u)return`购买数量需要是 1~${u} 之间的正整数。`;const p=i.default();p.add(t.expireDays,"days"),await n.insertOne({_id:new a.ObjectID,userId:+e.user.id,number:d,buyPrice:c,expire:p.toDate()});const m=Math.ceil((1+t.serviceFee)*c*d);return e.user.coin-=m,await o.updateOne({_id:+e.user.id},{$set:{bought:d+l}}),`你花了 ${m} 个硬币（含 ${m-c*d} 个硬币的手续费）以 ${c} 每棵的价格购买了 ${d} 棵大头菜。\n要是你没有在 ${t.expireDays} 天内把大头菜卖掉，它们就会全部烂掉，害你大亏本！一定要注意这一点喔。`})),e.command("kabu.sell [number]",`卖出最早购买（最先烂掉）的大头菜。若不指定数量则全部卖出。手续费 ${100*t.serviceFee}%。`,{noRedirect:!0}).shortcut("卖出大头菜",{prefix:!1,fuzzy:!0}).userFields(["coin","id"]).action((async({session:e},o)=>{const a=+(null!=o?o:1/0);if(a!==1/0&&(!Number.isInteger(a)||a<=0))return"卖出的数量需要是一个正整数";const i=await n.find({userId:+e.user.id}).sort("expire",1).toArray();let s=0,c=null;const l=[];for(const e of i)if(s+e.number<=a)s+=e.number,l.push(e._id);else if(s<a){c={_id:e._id,newNumber:e.number-(a-s)},s=a;break}if(0===s||a!==1/0&&s!==a)return"你没有足够多的大头菜来卖出！";const[u]=await r(+e.user.id);e.user.coin||(e.user.coin=0);const d=Math.floor((1-t.serviceFee)*s*u);return e.user.coin+=d,l.length&&await n.deleteMany({_id:{$in:l}}),c&&await n.updateOne({_id:c._id},{$set:{number:c.newNumber}}),`你已成功卖出 ${s} 棵大头菜，获得了 ${d} 个硬币（已扣除 ${s*u-d} 个硬币的手续费）！`}))})),e.command("kabu","大头菜")}},9001:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const a=n(o(4515)),i=new(o(8664).Logger)("luogu");t.apply=e=>{e.command("oi","OI related"),e.command("oi/luogu","Luogu"),e.command("oi/luogu.problem <pid>","获取Luogu题目").action((async(t,o)=>{const n=await e.app.browser.newPage();try{await n.goto(`https://www.luogu.com.cn/problem/${o}`,{waitUntil:"networkidle0"})}catch(e){return n.close(),"请求超时。"}return(await n.$(".problem-card")).screenshot({}).then((async e=>(n.close(),`[CQ:image,file=base64://${e.toString("base64")}]`)),(e=>(n.close(),i.debug(e),"截图失败。")))})),e.command("oi/luogu.user <uid>","查询用户").action((async(e,t)=>{const o=await a.default.get(`https://www.luogu.com.cn/user/${t}?_contentOnly=1`).set("User-Agent","Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko");if("404"===o.body.code)return"没这个人!";const n=o.body.currentData.user,i=0===n.ccfLevel?"无/藏了以方便假":n.ccfLevel;return`${n.name}\n关注: ${n.followingCount}\n粉丝: ${n.followerCount}${n.passedProblemCount?`\nACs/Submits: ${n.passedProblemCount}/${n.submittedProblemCount}`:""}\n颜色: ${n.color}\nCCF评级:${i}`}))}},9438:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const a=n(o(2376));t.apply=e=>{e.middleware((async(e,t)=>{if(e.content.includes("https://bot-api.lxns.net/bot-message/")){const t=await a.default.get(`https://${e.content.split("https://")[1]}`);e.content=t.data.replace(/<.*?>/g,"")}await t()}),!0)}},1196:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const a=o(8664),i=n(o(4515));t.apply=function(e){e.command("tools","实用工具"),e.command("tools/ocr [image]",{minInterval:3e3}).action((async({session:e},t)=>{if(t||(await e.sendQueued("请发送图片。"),t=await e.prompt(3e4)),!t)return"没有检测到图片。";const o=a.segment.from(t),n=await i.default.get(`https://ai.qq.com/cgi-bin/appdemo_imagetranslate?image_url=${o.data.url}`);return 0!==n.body.ret?n.body.msg:n.body.data.image_records.map((e=>e.source_text)).join("")}))}},5695:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const a=n(o(4515)),i=o(3804),s={"-1":"女",0:"未知",1:"男"};t.apply=function(e){e.command("oi","OI Related"),e.command("oi/oier <query>","查询oier",{minInterval:3e4}).action((async(e,t)=>{const o=await a.default.get(`https://bytew.net/OIer/search.php?method=normal&q=${encodeURIComponent(t)}`),{result:n}=JSON.parse(o.text);let r="";for(const e of i.take(n,3)){const t=JSON.parse(e.awards.replace(/'/gim,'"'));r+=`姓名：${e.name}  生理性别：${s[e.sex]}\n`;for(const e of i.take(t,5))r+=`于${e.grade}时在${e.province}${e.school}参加${e.identity}，`,e.score&&(r+=`以${e.score}的成绩`),r+=`取得${e.award_type}，排名${e.rank}。\n`;t.length>5&&(r+=t.length-5+"个奖项被隐藏。\n")}return n.length>3&&(r+=n.length-3+"个搜索结果被隐藏。"),r}))}},7269:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const n=o(8664);t.apply=e=>{e.command("proxy <command:text>","Proxy a command",{hidden:!0,authority:4}).option("user","-u <userId>").option("self","-s <selfId>").option("group","-g <groupId>").option("length","-l <length>",{fallback:1}).action((async({session:t,options:o},a)=>{const i=new n.Session(e.app,t);if(delete i.groupId,o.group?(i.groupId=o.group,i.subtype="group"):(i.groupId=void 0,i.subtype="private"),o.self&&(i.selfId=o.self),o.user){const e=o.user;if(!e)return"未指定目标。";i.userId=e}await i.send(a);let s="";for(let e=1;e<=o.length;e++)s+=await i.prompt(3e4);return s}))}},1281:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=t.defaultConfig=void 0;const n=o(280),a=o(1703),i=o(904);t.defaultConfig={loadTimeout:1e4,idleTimeout:3e4,maxLength:1e6};const s=["http","https"],r=new n.Logger("puppeteer");t.apply=function(e,o){o={...t.defaultConfig,...o},e.plugin(i.apply,o),e.command("shot").dispose(),e.command("page <url:text>","Get page",{authority:3,minInterval:3e3}).alias("screenshot","shot").option("full","-f Full page").option("element","-e, --element <selector:string> Element Selector").option("viewport","<viewport> 指定Viewport",{fallback:"1600x900"}).action((async({session:t,options:i},c="")=>{let l=c.trim();if(!l)return"请输入网址。";const u=i.viewport.split("x");if(2!==u.length)return"Invalid viewport";const d=/^(\w+):\/\//.exec(l);if(d){if(!s.includes(d[1]))return"请输入正确的网址。"}else l=`http://${l}`;const p=await e.browser.newPage();let m=!1;p.on("load",(()=>m=!0)),await p.setViewport({width:parseInt(u[0],10),height:parseInt(u[1],10),deviceScaleFactor:1});try{await new Promise(((e,n)=>{const a=setTimeout((()=>m?t.send("正在加载中，请稍等片刻~"):n(new Error("navigation timeout"))),o.loadTimeout),i=()=>{clearTimeout(a),e(void 0)};p.goto(l,{waitUntil:"networkidle0",timeout:o.idleTimeout}).then(i,(()=>m?i():n(new Error("navigation timeout"))))}))}catch(e){return p.close(),r.debug(e),"无法打开页面。"}return(i.element?await p.$(i.element):p).screenshot({fullPage:i.full}).then((async e=>(p.close(),e.byteLength>o.maxLength&&await new Promise(((t,o)=>{(new a.PNG).parse(e,((e,n)=>e?o(e):t(n)))})).then((t=>{const n=t.width,i=t.height*o.maxLength/e.byteLength,s=new a.PNG({width:n,height:i});t.bitblt(s,0,0,n,i,0,0),e=a.PNG.sync.write(s)})).catch(n.noop),`[CQ:image,file=base64://${e.toString("base64")}]`)),(e=>(p.close(),r.debug(e),"截图失败。")))}))}},6756:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const a=n(o(2376)),i=o(5289),s={c:{type:"compiler",compile:["/usr/bin/gcc","-O2","-Wall","-std=c99","-o","code","foo.c","-lm","-fdiagnostics-color=always"],code_file:"foo.c",execute:["/w/code"]},cc:{type:"compiler",compile:["/usr/bin/g++-7","-O2","-Wall","-std=c++11","-o","code","foo.cc","-lm","-fdiagnostics-color=always"],code_file:"foo.cc",execute:["/w/code"]},pas:{type:"compiler",compile:["/usr/bin/fpc","-O2","-o/w/code","foo.pas"],code_file:"foo.pas",execute:["/w/code"]},py:{type:"interpreter",code_file:"foo.py",execute:["/usr/bin/python","foo.py"]},py2:{type:"interpreter",code_file:"foo.py",execute:["/usr/bin/python","foo.py"]},py3:{type:"interpreter",code_file:"foo.py",execute:["/usr/bin/python3","foo.py"]},java:{type:"compiler",compile:["/usr/bin/javac","-d","/w","-encoding","utf8","./Main.java"],code_file:"Main.java",copyOut:"Main.class",execute:["/usr/bin/java","Main"]},php:{type:"interpreter",code_file:"foo.php",execute:["/usr/bin/php","foo.php"]},js:{type:"interpreter",code_file:"foo.js",execute:["/usr/bin/jsc","/w/foo.js"]},go:{type:"compiler",compile:["/usr/bin/go","build","-o","foo","foo.go"],code_file:"foo.go",execute:["/w/foo"]},sh:{type:"interpreter",code_file:"foo.sh",execute:["/bin/bash","foo.sh"]},cs:{type:"compiler",compile:["/usr/bin/mcs","-optimize+","-out:/w/foo","/w/foo.cs"],code_file:"foo.cs",execute:["/usr/bin/mono","foo"]}},r=["PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin","HOME=/w"],c=a.default.create({baseURL:"http://localhost:5050"});async function l(e,{time_limit_ms:t=5e3,memory_limit_mb:o=256,process_limit:n=32,stdin:a="",copyIn:i={},copyOut:s=[],copyOutCached:l=null}={}){let u,d;try{d={cmd:[{args:e,env:r,files:[a?{content:a}:{content:""},{name:"stdout",max:20480},{name:"stderr",max:20480}],cpuLimit:1e3*t*1e3,readCpuLimit:1200*t*1e3,memoryLimit:1024*o*1024,procLimit:n,copyIn:i,copyOut:s,copyOutCached:l}]};u=(await c.post("/run",d)).data[0]}catch(e){throw console.log(e),e}const p={status:u.status,time_usage_ms:u.time/1e6,memory_usage_kb:u.memory/1024,files:u.files};return u.files=u.files||{},p.stdout=u.files.stdout||"",p.stderr=u.files.stderr||"",u.error&&(p.error=u.error),p.files=u.files,u.fileIds&&(p.fileIds=u.fileIds),p}async function u(e,t,o){const{status:n,stdout:a,stderr:i}=await async function(e,t,o){const n={},a=s[t];if(!s[t])return{status:"SystemError",stdout:"不支持的语言",stderr:"目前支持sh,c,cc,pas,py2,py3,js,cs,go,php,java"};if(n[a.code_file]={content:e},"compiler"===a.type){const{status:e,stdout:t,stderr:o,fileIds:i}=await l(a.compile,{copyIn:n,copyOutCached:[a.copyOut||"code"]});if("Accepted"!==e)return{status:`Compile Error:${e}`,stdout:t,stderr:o};const s=await l(a.execute,{copyIn:{[a.copyOut||"code"]:{fileId:i[a.copyOut||"code"]}}});return await c.delete(`/file/${i[a.copyOut||"code"]}`),s}return"interpreter"===a.type?await l(a.execute,{copyIn:n,stdin:o}):void 0}(e,t,o).catch((e=>({status:"SystemError",stdout:e.toString(),stderr:""})));return"Accepted"===n?`Execute result: \n${a}\n${i}`:`Error: ${n}\n${a}\n${i}`}t.apply=e=>{e.command("tools","实用工具"),e.command("tools/run <language> <code:text>","运行程序",{minInterval:1e3}).alias("code").option("input","启用stdin").action((async({session:t,options:o},n,a)=>{o.input&&t.send("Please input:");const s=o.input?await t.prompt(1e4):"",r=await u(a.replace(/\r/gim,"").decode(),n,s.decode());if(r.length>256||r.split("\n").length>10){const t=await e.browser.newPage();return`[CQ:image,file=base64://${await i.text2png(t,r)}]`}return r}))}},7133:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const a=o(2087),i=o(9176),s=n(o(2470));t.apply=async function(e,t){e.plugin(i.apply,{...t,format:["{{ bots }}","==========","用户数量：{{ activeUsers }}","群数量：{{ activeGroups }}","CPU 使用率：{{ (cpu[1] * 100).toFixed() }}%","内存使用量：{{ usedmem }}M / {{ totalmem }}M","今日收发消息量 {{ totalReceiveCount }}/{{ totalSendCount }}"].join("\n")}),e.app.on("connect",(()=>{const t=e.app.database.mongo.collection("message");i.extend((async o=>{const n=(await Promise.all(o.bots.map((t=>e.app.database.getUser(t.platform,t.selfId.toString()))))).map((e=>e.id)),i={time:{$gt:s.default().add(-1,"day").toDate()}};o.activeUsers=await e.app.database.mongo.user.find({}).count(),o.totalSendCount=await t.find({...i,sender:{$in:n.map(parseInt)}}).count(),o.totalReceiveCount=await t.find({...i,sender:{$nin:n.map(parseInt)}}).count(),o.usedmem=Math.floor((a.totalmem()-a.freemem())/1024/1024),o.totalmem=Math.floor(a.totalmem()/1024/1024)}))}))}},9019:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0,t.apply=function(e){e.command("sudo <command:text>",{hidden:!0,noRedirect:!0}).userFields(["sudoer","authority"]).action((async({session:e},t)=>{if(!e.user.sudoer)throw new Error("You are not in the sudoers file.");const o=e.user.authority;e.user.authority=5,e._sudo=!0,await e.execute(t),e.user.authority=o}))}},1558:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const a=o(663),i=n(o(2376)),s=o(7548),r=/\[CQ:image,file=([^,]+),url=([^\]]+)\]/,c=/\[CQ:image,file=image:\/\/([^,]+)\]/;t.apply=(e,t)=>{const o=e.logger("teach");e.plugin(a.apply,t),e.command("teach",{checkArgCount:!1}),e.on("before-command",(async({session:t,command:o})=>{if(o.getConfig("noRedirect",t)&&t._redirected){const o=await e.app.database.getUser("id",t._dialogue.writer,["authority"]);if(o.authority<5&&!o.sudoer)return"不支持在插值中调用该命令。"}})),e.on("connect",(()=>{const t=e.app.database.mongo.collection("image"),n=async(e,o)=>{if(await t.findOne({_id:e}))return;const{data:n}=await i.default.get(o,{responseType:"arraybuffer"}),a=Buffer.alloc(n.byteLength),r=new Uint8Array(n);for(let e=0;e<a.length;++e)a[e]=r[e];await t.insertOne({_id:e,data:new s.Binary(a)})};e.on("dialogue/detail",(async(e,n)=>{try{for(const e in n){let o,a="";for(;o=c.exec(n[e]);){const[i,s]=o;a+=n[e].slice(0,o.index),n[e]=n[e].slice(o.index+i.length);a+=`[CQ:image,file=base64://${(await t.findOne({_id:s})).data.buffer.toString("base64")}]`}n[e]=a+n[e]}}catch(e){throw o.warn(e.message),new Error("下载图片时发生错误。")}})),e.on("dialogue/before-send",(async e=>{let{answer:n}=e;if(n)try{let o,a="";for(;o=c.exec(n);){const[e,i]=o;a+=n.slice(0,o.index),n=n.slice(o.index+e.length);a+=`[CQ:image,file=base64://${(await t.findOne({_id:i})).data.buffer.toString("base64")}]`}e.answer=a+n}catch(e){throw o.warn(e.message),new Error("下载图片时发生错误。")}})),e.on("dialogue/before-modify",(async({options:e})=>{let{answer:t}=e;if(t)try{let o,a="";for(;o=r.exec(t);){const[e,i,s]=o;a+=t.slice(0,o.index),t=t.slice(o.index+e.length),await n(i,s),a+=`[CQ:image,file=image://${i}]`}e.answer=a+t}catch(e){return o.warn(e.message),"上传图片时发生错误。"}}))}))}},3714:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const a=n(o(4515)),i=n(o(2376)),s=n(o(742)),r=o(3804),c=o(9636),l=o(9509),u=o(5747),d=o(5289),p=n(o(3837));t.apply=e=>{e.plugin(l.apply,{bilibili:!1,magi:!1,oeis:!1}),e.plugin(c.apply),e.command("search","",{maxUsage:5,minInterval:6e4}),e.command("tools/tex <code:text>","KaTeX 渲染",{minInterval:1e3}).alias("katex <code:text>").action((async({session:e},t)=>{let{data:o}=await i.default.get(`https://www.zhihu.com/equation?tex=${encodeURIComponent(t)}`);const n=o.match(/>([^<]+)<\/text>/);if(n)return e.send(n[1]);const a=o.match(/ viewBox="0 (-?\d*(.\d+)?) -?\d*(.\d+)? -?\d*(.\d+)?" /);a&&(o=o.replace("\n",`\n<rect x="0" y="${a[1]}" width="100%" height="100%" fill="white"></rect>\n`));const r=await s.default(Buffer.from(o)).png().toBuffer();return e.send(`[CQ:image,file=base64://${r.toString("base64")}]`)})),e.command("tools/ip <ip>","查询ip").action((async(e,t)=>{const o=`http://freeapi.ipip.net/${t}`;return(await a.default.get(o)).body.join(" ")})),e.command("tools/oeis <sequence>","使用 OEIS 进行数列查询",{maxUsage:10}).option("start","-s <start> 设置起始页码",{fallback:0}).usage("输入用逗号隔开的数作为要查询的数列的前几项，或者直接输入以 id:A 打头的数列编号。").example("oeis 1,2,3,6,11,23,47,106,235").example("oeis id:A000055").action((async({options:e,session:t},o)=>{const{body:n}=await a.default.get(`https://oeis.org/search?fmt=json&q=${o}&start=${e.start}`),i=r.filter(n.results,(e=>!e.name.startsWith("Duplicate")));for(const e of r.take(i,3))await t.sendQueued([`https://oeis.org/A${String(e.number).padStart(6,"0")}`,`${e.name}${e.id?` (${e.id})`:""}`,`${r.take(e.data.split(","),10).join(",")}`].join("\n"))})),u.existsSync("/usr/bin/wd")&&e.command("tools/dict <word>","使用无道词典查词").example("dict hello").alias("wd").action((async(t,o)=>{o=o.split("").filter((e=>/[-a-zA-Z0-9]/.test(e))).join("");const n=await p.default(`/usr/bin/wd ${o}`),a=await e.app.browser.newPage(),i=await d.text2png(a,n);return a.close(),`[CQ:image,file=base64://${i}]`}))}},4132:()=>{},5205:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apply=void 0;const n=e=>(e.pinyin.split(/\s+/).shift()||"").replace(/[āáǎà]/g,"a").replace(/[ōóǒò]/g,"o").replace(/[ēéěèê]/g,"e").replace(/[īíǐì]/g,"i").replace(/[ūúǔù]/g,"u").replace(/[ǖǘǚǜü]/g,"v"),a=e=>(e.pinyin.split(/\s+/).pop()||"").replace(/[āáǎà]/g,"a").replace(/[ōóǒò]/g,"o").replace(/[ēéěèê]/g,"e").replace(/[īíǐì]/g,"i").replace(/[ūúǔù]/g,"u").replace(/[ǖǘǚǜü]/g,"v"),i=e=>("味同嚼蜡"===e.word&&(e.pinyin=e.pinyin.replace("cù","là")),e.word.endsWith("俩")&&(e.pinyin=e.pinyin.replace("liǎng","liǎ")),e.pinyin=e.pinyin.replace(/yi([ēéěèêe])/g,"y$1"),e),s=(e=>{const t={firstPinyin:{},lastPinyin:{},word:{}};for(const o of e)if(i(o),4===o.word.length){const e=a(o),i=t.lastPinyin[e]||[];t.lastPinyin[e]=i,i.push(o);const s=n(o),r=t.firstPinyin[s]||[];t.firstPinyin[s]=r,r.push(o),t.word[o.word]=o}let o=new Set(["yi"]);for(let e=1;o.size>0;++e){const a=new Set;o.forEach((o=>{for(const i of t.lastPinyin[o]||[])i.level||(i.level=e,a.add(n(i)))})),o=a}return t})(o(4517));t.apply=e=>{e.command("成语接龙 <成语>","成语接龙",{minInterval:1e3,checkArgCount:!1}).action(((e,t)=>{if(!t)return"请输入成语。";const o=(e=>{const t=[];let o=s.word[e];for(;o&&o.level;){const{level:e}=o;if(t.push(o),!(e>1))return t.push({word:"一个顶俩",pinyin:"yī gè dǐng liǎ"}),t;{const t=s.firstPinyin[a(o)].filter((t=>t.level&&t.level<e));o=t[Math.floor(Math.random()*t.length)]}}return t})(t);if(o.length){const e=[];for(const t in o)e.push(o[t].word," ");return e.join("")}}))}},8085:(e,t,o)=>{var n={"./autokick":2615,"./autokick.d":9740,"./autokick.d.ts":9740,"./autokick.js":2615,"./autokick.js.map":4134,"./bilibili":364,"./bilibili.d":1200,"./bilibili.d.ts":1200,"./bilibili.js":364,"./bilibili.js.map":9147,"./bottle":1413,"./bottle.d":9794,"./bottle.d.ts":9794,"./bottle.js":1413,"./bottle.js.map":7028,"./busybox":7113,"./busybox.d":1050,"./busybox.d.ts":1050,"./busybox.js":7113,"./busybox.js.map":1927,"./calc":7229,"./calc.d":8825,"./calc.d.ts":8825,"./calc.js":7229,"./calc.js.map":8310,"./codeforces":7901,"./codeforces.d":4280,"./codeforces.d.ts":4280,"./codeforces.js":7901,"./codeforces.js.map":7704,"./dress":5671,"./dress.d":6145,"./dress.d.ts":6145,"./dress.js":5671,"./dress.js.map":4158,"./economy":244,"./economy.d":8372,"./economy.d.ts":8372,"./economy.js":244,"./economy.js.map":2983,"./eval":1465,"./eval.d":3019,"./eval.d.ts":3019,"./eval.js":1465,"./eval.js.map":8109,"./github":9028,"./github.d":4830,"./github.d.ts":4830,"./github.js":9028,"./github.js.map":5735,"./glados":6552,"./glados.d":2030,"./glados.d.ts":2030,"./glados.js":6552,"./glados.js.map":3565,"./hearthstone":2105,"./hearthstone.d":5486,"./hearthstone.d.ts":5486,"./hearthstone.js":2105,"./hearthstone.js.map":7711,"./httpcat":1021,"./httpcat.d":9375,"./httpcat.d.ts":9375,"./httpcat.js":1021,"./httpcat.js.map":9666,"./imagetag":1290,"./imagetag.d":4599,"./imagetag.d.ts":4599,"./imagetag.js":1290,"./imagetag.js.map":5891,"./jjwz":3196,"./jjwz.d":8734,"./jjwz.d.ts":8734,"./jjwz.js":3196,"./jjwz.js.map":7617,"./kabu":9982,"./kabu.d":9186,"./kabu.d.ts":9186,"./kabu.js":9982,"./kabu.js.map":3490,"./luogu":9001,"./luogu.d":3655,"./luogu.d.ts":3655,"./luogu.js":9001,"./luogu.js.map":9425,"./lxbot":9438,"./lxbot.d":438,"./lxbot.d.ts":438,"./lxbot.js":9438,"./lxbot.js.map":7867,"./ocr":1196,"./ocr.d":2315,"./ocr.d.ts":2315,"./ocr.js":1196,"./ocr.js.map":6374,"./oier":5695,"./oier.d":2989,"./oier.d.ts":2989,"./oier.js":5695,"./oier.js.map":9408,"./proxy":7269,"./proxy.d":3219,"./proxy.d.ts":3219,"./proxy.js":7269,"./proxy.js.map":5309,"./puppeteer":1281,"./puppeteer.d":9037,"./puppeteer.d.ts":9037,"./puppeteer.js":1281,"./puppeteer.js.map":3609,"./run":6756,"./run.d":420,"./run.d.ts":420,"./run.js":6756,"./run.js.map":1707,"./status":7133,"./status.d":1729,"./status.d.ts":1729,"./status.js":7133,"./status.js.map":8795,"./sudo":9019,"./sudo.d":2137,"./sudo.d.ts":2137,"./sudo.js":9019,"./sudo.js.map":211,"./teach":1558,"./teach.d":2563,"./teach.d.ts":2563,"./teach.js":1558,"./teach.js.map":5471,"./tools":3714,"./tools.d":8744,"./tools.d.ts":8744,"./tools.js":3714,"./tools.js.map":1665,"./wordcloud":4132,"./wordcloud.d":3332,"./wordcloud.d.ts":3332,"./wordcloud.js":4132,"./wordcloud.js.map":8669,"./ygdl":5205,"./ygdl.d":9308,"./ygdl.d.ts":9308,"./ygdl.js":5205,"./ygdl.js.map":3579};function a(e){var t=i(e);return o(t)}function i(e){if(!o.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}a.keys=function(){return Object.keys(n)},a.resolve=i,e.exports=a,a.id=8085},8845:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=8845,e.exports=t},2293:e=>{"use strict";e.exports=require("../../.cache/hs_card_enUS.json")},9802:e=>{"use strict";e.exports=require("../../.cache/hs_card_zhCN.json")},7233:e=>{"use strict";e.exports=require("../../database/class_names_6000.json")},4517:e=>{"use strict";e.exports=require("../../database/yiGeDingLia.json")},4768:e=>{"use strict";e.exports=require("ansi_up")},2376:e=>{"use strict";e.exports=require("axios")},3129:e=>{"use strict";e.exports=require("child_process")},6417:e=>{"use strict";e.exports=require("crypto")},5747:e=>{"use strict";e.exports=require("fs")},4298:e=>{"use strict";e.exports=require("fs-extra")},6675:e=>{"use strict";e.exports=require("js-yaml")},8573:e=>{"use strict";e.exports=require("koishi-adapter-onebot")},9711:e=>{"use strict";e.exports=require("koishi-adapter-telegram")},8664:e=>{"use strict";e.exports=require("koishi-core")},4393:e=>{"use strict";e.exports=require("koishi-plugin-common")},9160:e=>{"use strict";e.exports=require("koishi-plugin-eval")},9636:e=>{"use strict";e.exports=require("koishi-plugin-image-search")},9585:e=>{"use strict";e.exports=require("koishi-plugin-mongo")},904:e=>{"use strict";e.exports=require("koishi-plugin-puppeteer")},9176:e=>{"use strict";e.exports=require("koishi-plugin-status")},663:e=>{"use strict";e.exports=require("koishi-plugin-teach")},9509:e=>{"use strict";e.exports=require("koishi-plugin-tools")},280:e=>{"use strict";e.exports=require("koishi-utils")},3804:e=>{"use strict";e.exports=require("lodash")},2470:e=>{"use strict";e.exports=require("moment")},7548:e=>{"use strict";e.exports=require("mongodb")},2087:e=>{"use strict";e.exports=require("os")},5622:e=>{"use strict";e.exports=require("path")},1703:e=>{"use strict";e.exports=require("pngjs")},742:e=>{"use strict";e.exports=require("sharp")},4515:e=>{"use strict";e.exports=require("superagent")},3680:e=>{"use strict";e.exports=require("superagent-proxy")},1669:e=>{"use strict";e.exports=require("util")}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var o=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(o.exports,o,o.exports,__webpack_require__),o.exports}__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var __webpack_exports__=__webpack_require__(7326)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9kaXN0L2xpYi9leHBpcmUuanMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vZGlzdC9saWIvZ3JhcGguanMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vZGlzdC9saWIvaXRlbS5qcyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9kaXN0L2xpYi9zaGVsbC5qcyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9kaXN0L21haW4uanMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vZGlzdC9wbHVnaW5zL2F1dG9raWNrLmpzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL2Rpc3QvcGx1Z2lucy9iaWxpYmlsaS5qcyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9kaXN0L3BsdWdpbnMvYm90dGxlLmpzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL2Rpc3QvcGx1Z2lucy9idXN5Ym94LmpzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL2Rpc3QvcGx1Z2lucy9jYWxjLmpzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL2Rpc3QvcGx1Z2lucy9jb2RlZm9yY2VzLmpzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL2Rpc3QvcGx1Z2lucy9kcmVzcy5qcyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9kaXN0L3BsdWdpbnMvZWNvbm9teS5qcyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9kaXN0L3BsdWdpbnMvZXZhbC5qcyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9kaXN0L3BsdWdpbnMvZ2l0aHViLmpzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL2Rpc3QvcGx1Z2lucy9nbGFkb3MuanMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vZGlzdC9wbHVnaW5zL2hlYXJ0aHN0b25lLmpzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL2Rpc3QvcGx1Z2lucy9odHRwY2F0LmpzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL2Rpc3QvcGx1Z2lucy9pbWFnZXRhZy5qcyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9kaXN0L3BsdWdpbnMvamp3ei5qcyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9kaXN0L3BsdWdpbnMva2FidS5qcyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9kaXN0L3BsdWdpbnMvbHVvZ3UuanMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vZGlzdC9wbHVnaW5zL2x4Ym90LmpzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL2Rpc3QvcGx1Z2lucy9vY3IuanMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vZGlzdC9wbHVnaW5zL29pZXIuanMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vZGlzdC9wbHVnaW5zL3Byb3h5LmpzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL2Rpc3QvcGx1Z2lucy9wdXBwZXRlZXIuanMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vZGlzdC9wbHVnaW5zL3J1bi5qcyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9kaXN0L3BsdWdpbnMvc3RhdHVzLmpzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL2Rpc3QvcGx1Z2lucy9zdWRvLmpzIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL2Rpc3QvcGx1Z2lucy90ZWFjaC5qcyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLi9kaXN0L3BsdWdpbnMvdG9vbHMuanMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vZGlzdC9wbHVnaW5zL3lnZGwuanMiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly4vZGlzdC9wbHVnaW5zfHN5bmN8L14vLiokIiwid2VicGFjazovL2h5ZHJvLWJvdC8uL2Rpc3R8c3luYyIsIndlYnBhY2s6Ly9oeWRyby1ib3QvLmNhY2hlL2hzX2NhcmRfZW5VUy5qc29uXCIiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90Ly5jYWNoZS9oc19jYXJkX3poQ04uanNvblwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9kYXRhYmFzZS9jbGFzc19uYW1lc182MDAwLmpzb25cIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZGF0YWJhc2UveWlHZURpbmdMaWEuanNvblwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImFuc2lfdXBcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJheGlvc1wiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImNoaWxkX3Byb2Nlc3NcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJjcnlwdG9cIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJmc1wiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImZzLWV4dHJhXCIiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90L2V4dGVybmFsIFwianMteWFtbFwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImtvaXNoaS1hZGFwdGVyLW9uZWJvdFwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImtvaXNoaS1hZGFwdGVyLXRlbGVncmFtXCIiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90L2V4dGVybmFsIFwia29pc2hpLWNvcmVcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJrb2lzaGktcGx1Z2luLWNvbW1vblwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImtvaXNoaS1wbHVnaW4tZXZhbFwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImtvaXNoaS1wbHVnaW4taW1hZ2Utc2VhcmNoXCIiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90L2V4dGVybmFsIFwia29pc2hpLXBsdWdpbi1tb25nb1wiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImtvaXNoaS1wbHVnaW4tcHVwcGV0ZWVyXCIiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90L2V4dGVybmFsIFwia29pc2hpLXBsdWdpbi1zdGF0dXNcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJrb2lzaGktcGx1Z2luLXRlYWNoXCIiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90L2V4dGVybmFsIFwia29pc2hpLXBsdWdpbi10b29sc1wiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImtvaXNoaS11dGlsc1wiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcImxvZGFzaFwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcIm1vbWVudFwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcIm1vbmdvZGJcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJvc1wiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcInBhdGhcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJwbmdqc1wiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcInNoYXJwXCIiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90L2V4dGVybmFsIFwic3VwZXJhZ2VudFwiIiwid2VicGFjazovL2h5ZHJvLWJvdC9leHRlcm5hbCBcInN1cGVyYWdlbnQtcHJveHlcIiIsIndlYnBhY2s6Ly9oeWRyby1ib3QvZXh0ZXJuYWwgXCJ1dGlsXCIiLCJ3ZWJwYWNrOi8vaHlkcm8tYm90L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2h5ZHJvLWJvdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2h5ZHJvLWJvdC93ZWJwYWNrL3N0YXJ0dXAiXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwidGhpcyIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVuZE9mVG9kYXkiLCJtb21lbnRfMSIsImRlZmF1bHQiLCJ1dGMiLCJhZGQiLCJlbmRPZiIsInN1YnRyYWN0IiwidG9EYXRlIiwidGV4dDJwbmciLCJBVSIsImFzeW5jIiwicGFnZSIsImNvbnRlbnQiLCJzdHIiLCJhbnNpX3RvX2h0bWwiLCJzIiwiZSIsInNldFZpZXdwb3J0IiwiaGVpZ2h0Iiwid2lkdGgiLCJzZXRDb250ZW50IiwiZWxlbWVudCIsIiQiLCJzaXplIiwiZXZhbHVhdGUiLCJlbGUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJjbGlwIiwiYm91bmRpbmdCb3giLCJNYXRoIiwiY2VpbCIsInNjcmVlbnNob3QiLCJlcnIiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJyZWdpc3Rlckl0ZW0iLCJJdGVtcyIsImZhbGxiYWNrIiwiaWQiLCJ3ZWlnaHQiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJjaGlsZF9wcm9jZXNzXzEiLCJjb21tYW5kIiwicCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXhlYyIsInN0ZG91dCIsInN0ZGVyciIsInRyaW0iLCJsZW5ndGgiLCJwYXRoXzEiLCJrb2lzaGlfY29yZV8xIiwia29pc2hpX3V0aWxzXzEiLCJmc19leHRyYV8xIiwia29pc2hpX3BsdWdpbl9tb25nb18xIiwicHJvY2VzcyIsIm9uIiwiXyIsImNvbnNvbGUiLCJsb2ciLCJMb2dnZXIiLCJzaG93RGlmZiIsInNob3dUaW1lIiwiQ29tbWFuZCIsImRlZmF1bHRDb25maWciLCJjaGVja0FyZ0NvdW50IiwiU3RyaW5nIiwicHJvdG90eXBlIiwiZGVjb2RlIiwicmVwbGFjZSIsImVuY29kZSIsIlNlc3Npb24iLCJleGVjdXRlU2lsZW50IiwiYXJnMCIsImFyZzEiLCJfc2lsZW50Iiwic2VuZCIsIm5vb3AiLCJzZW5kUXVldWVkIiwiZXhlY3V0ZSIsIk1haW4iLCJpdGVtIiwibG9nZ2VyIiwiY29uZmlnIiwiYXBwIiwiQXBwIiwicG9ydCIsImJvdHMiLCJ0eXBlIiwib25lYm90IiwidGVsZWdyYW0iLCJwcmVmaXgiLCJwcm9tcHQiLCJhdXRvQXV0aG9yaXplIiwiYXV0b0Fzc2lnbiIsIm1pblNpbWlsYXJpdHkiLCJydW4iLCJlbnN1cmVEaXJTeW5jIiwiX19kaXJuYW1lIiwicGx1Z2luIiwiYXBwbHkiLCJkYiIsImxpbmUiLCJhZG1pbiIsInVzZXJzIiwic3BsaXQiLCJmb3VuZCIsInVzZXIiLCJkYXRhYmFzZSIsImdldFVzZXIiLCJtYXAiLCJhc3NpZ24iLCJpIiwic2V0VXNlciIsImF1dGhvcml0eSIsInN1ZG9lciIsImluZm8iLCJsb2FkIiwic3RhcnQiLCJlbmFibGVkcGx1Z2lucyIsInN0YXJ0c1dpdGgiLCJBcnJheSIsImVycm9yIiwiZ2xvYmFsIiwibW9kdWxlIiwibG9kYXNoXzEiLCJDaGFubmVsIiwiZXh0ZW5kIiwia2ljayIsImN0eCIsInNlbGVjdCIsImhpZGRlbiIsImNoYW5uZWxGaWVsZHMiLCJhY3Rpb24iLCJzZXNzaW9uIiwiY291bnQiLCJjaGFubmVsIiwiY29sbCIsIm1vbmdvIiwiY29sbGVjdGlvbiIsIm9wdGlvbiIsIm9wdGlvbnMiLCJncm91cCIsImJvdCIsImdldEdyb3VwIiwiZ3JvdXBJZCIsIiRnZXRHcm91cE1lbWJlckxpc3QiLCJraWNrZWQiLCJmaW5kIiwidG9BcnJheSIsInVzZXJJZCIsImZpbHRlciIsImluY2x1ZGVzIiwidGFyZ2V0Iiwic29ydEJ5Iiwic29ydCIsIm1heCIsImxhc3RTZW50VGltZSIsImpvaW5UaW1lIiwiZmluZE9uZSIsIm5pY2tuYW1lIiwiY2FyZCIsImZyb21Ob3ciLCJqb2luIiwiZHJ5IiwiYWxsIiwiJHNldEdyb3VwS2ljayIsImluc2VydE9uZSIsInN1cGVyYWdlbnRfMSIsInRyIiwiciIsInNvdXJjZSIsInRvVXBwZXJDYXNlIiwicmVzdWx0IiwiUkVfQlZJRCIsInBhcnNlSW50IiwidXJsIiwiZ2V0IiwiYnVmZmVyIiwiZW5kIiwicmVzIiwicmVkaXJlY3RzIiwicG9wIiwiYXYiLCJib2R5IiwiY29kZSIsImRhdGEiLCJ0aXRsZSIsInBpYyIsIm1pZGRsZXdhcmUiLCJuZXh0IiwiUkUiLCJub1JlZGlyZWN0IiwiYWxpYXMiLCJ1c2VyRmllbGRzIiwicGxhdGZvcm0iLCJwaWNrIiwiaW5zZXJ0ZWRJZCIsImNudCIsImZsb29yIiwicmFuZG9tIiwic2tpcCIsImxpbWl0IiwiZGVsZXRlT25lIiwiX2lkIiwidXBkYXRlT25lIiwiJGluYyIsIkRhdGUiLCJnZW5lcmF0aW9uVGltZSIsInRvTG9jYWxlU3RyaW5nIiwicXVlcnkiLCJkZWxldGVNYW55IiwiSlNPTiIsInBhcnNlIiwiZGVsZXRlZENvdW50IiwidXRpbF8xIiwia29pc2hpX3BsdWdpbl9jb21tb25fMSIsImdyYXBoXzEiLCJzaGVsbF8xIiwiZGlzYWxsb3dlZENvbW1hbmRzIiwiZ3JvdXBNYXAiLCJ1c2VyTWFwIiwiZ2V0R3JvdXBOYW1lIiwic3VidHlwZSIsInRpbWVzdGFtcCIsIm5vdyIsImNoYW5uZWxJZCIsIlRpbWUiLCJob3VyIiwicHJvbWlzZSIsInRoZW4iLCJkIiwiZ3JvdXBOYW1lIiwib3V0cHV0IiwiZm9ybWF0TWVzc2FnZSIsImNvZGVzIiwic2VnbWVudCIsInFxIiwiZ2V0R3JvdXBNZW1iZXIiLCJ1c2VybmFtZSIsImNoZWNrR3JvdXBBZG1pbiIsImF1dGhvciIsInJvbGVzIiwiX2EiLCJfYiIsImxldmVscyIsIm1lc3NhZ2UiLCJzZXRUaW1lem9uZU9mZnNldCIsInRpbWV6b25lT2Zmc2V0IiwicmVjb3JkTWVzc2FnZSIsImFzc2lnbmVlIiwic2VsZklkIiwibXNnIiwiVXNlciIsImZpZWxkcyIsImlucHV0IiwiZXhwciIsImV2YWwiLCJpbnNwZWN0IiwiYnJvd3NlciIsIm5ld1BhZ2UiLCJpbWciLCJjbG9zZSIsImNtZCIsInNldFRpbWVvdXQiLCJlbnYiLCJwbV9pZCIsImV4aXQiLCJjaGVjayIsIiRzZXRHcm91cExlYXZlIiwiZmxhZyIsIkZsYWciLCJpZ25vcmUiLCJncm91cHMiLCJnZXRBc3NpZ25lZENoYW5uZWxzIiwiZm9yY2VkIiwiZyIsInNpbGVudCIsImZvckVhY2giLCJzZW5kTWVzc2FnZSIsInNldCIsIlNldCIsImRlbGV0ZSIsInB1c2giLCJzZWNzIiwiJHNldEdyb3VwQmFuIiwic2VuZGVyTmFtZSIsImdldENoYW5uZWwiLCJzZXRDaGFubmVsIiwid2VsY29tZU1zZyIsInVkb2MiLCJzZXRGcmllbmRBZGRSZXF1ZXN0IiwicHVibGljIiwic2V0R3JvdXBBZGRSZXF1ZXN0IiwiYyIsImNyZWF0ZUluZGV4IiwidGltZSIsInNlbGYiLCJtc2dzIiwic2VuZGVyIiwiZGVsZXRlTWVzc2FnZSIsImR1cmF0aW9uIiwibiIsImEiLCJ0b3RhbCIsIiRndCIsInRvdGFsU2VuZENvdW50IiwiZ3JvdXBTZW5kQ291bnQiLCJ0b3RhbFJlY2VpdmVDb3VudCIsIiRuZSIsImdyb3VwUmVjZWl2ZUNvdW50IiwiJG1hdGNoIiwiYWdncmVnYXRlIiwiJGdyb3VwIiwiJHN1bSIsIiRzb3J0IiwiJGxpbWl0IiwidWRvY3MiLCJ1ZGljdCIsIm1lc3NhZ2VJZCIsImF4aW9zXzEiLCJtaW5JbnRlcnZhbCIsInNob3J0Y3V0IiwiYXJncyIsImV4YW1wbGUiLCJzdmciLCJwb3N0IiwicmF3IiwiZnVsbCIsImNhdGNoIiwic3RhdHVzIiwiaGFuZGxlIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJvcmdhbml6YXRpb24iLCJhdmF0YXIiLCJyYXRpbmciLCJyYW5rIiwibWF4UmF0aW5nIiwibWF4UmFuayIsImdldFRpbWUiLCJjb250ZXN0cyIsImNvbnRlc3QiLCJzdGFydFRpbWVTZWNvbmRzIiwicmVzcCIsIml0ZW1fMSIsInN1bSIsImFyZyIsImNvaW4iLCJiYWNrcGFjayIsInNsb3QiLCJtYXhVc2FnZSIsIk51bWJlciIsImlzU2FmZUludGVnZXIiLCJuZXdTZXNzaW9uIiwib2JzZXJ2ZVVzZXIiLCJfdXBkYXRlIiwia29pc2hpX3BsdWdpbl9ldmFsXzEiLCJfc3VkbyIsImFyZ3YiLCJfZHVyYXRpb24iLCJtaW4iLCJpc05hTiIsInNsZWVwIiwiX19jcmVhdGVCaW5kaW5nIiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJlbnVtZXJhYmxlIiwiX19zZXRNb2R1bGVEZWZhdWx0IiwidiIsIl9faW1wb3J0U3RhciIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImNyeXB0b18xIiwic3VwZXJhZ2VudCIsInN1cGVyYWdlbnRfcHJveHlfMSIsIkludmFsaWRUb2tlbkVycm9yIiwiRXJyb3IiLCJmb3JtYXRNYXJrZG93biIsInNlbGVjdG9yIiwib2Zmc2V0IiwiZ290byIsIndhaXRVbnRpbCIsImVsIiwieSIsIngiLCJiYXNlNjQiLCJlbmNvZGluZyIsIlBvc3QiLCJwcm94eSIsIlB1dCIsInB1dCIsImNvbGxEYXRhIiwiZXZlbnRzIiwicmVmIiwiaGVhZF9jb21taXQiLCJsb2dpbiIsImFkZGVkIiwicmVtb3ZlZCIsIm1vZGlmaWVkIiwicmVwb3NpdG9yeSIsImZ1bGxfbmFtZSIsInNvdXJjZWdyYXBoIiwiYmVmb3JlIiwiYWZ0ZXIiLCJjaGFuZ2VzIiwiY29tcGFyaXNvbiIsImZpbGVEaWZmcyIsIm5vZGVzIiwiY2hhbmdlIiwic3RhdCIsImRlbGV0ZWQiLCJjaGFuZ2VkIiwiY29tbWl0IiwiY29tbWl0cyIsImRldCIsInN1YnN0ciIsImxpbmsiLCJjb21wYXJlIiwiZXZlbnQiLCJpc3N1ZXMiLCJpc3N1ZSIsIm51bWJlciIsImh0bWxfdXJsIiwiaW1hZ2UiLCJ3YXJuIiwibGFibGUiLCJjb21tZW50IiwicmVwb25hbWUiLCJpc3N1ZUlkIiwiZ2V0VG9rZW4iLCJ0b2tlbiIsImlzc3VlX2NvbW1lbnQiLCJjb21taXRNc2ciLCJjb21taXRfdGl0bGUiLCJwdWxsX3JlcXVlc3QiLCJvd25lciIsImJhc2UiLCJoZWFkIiwibWVyZ2VkIiwiUmVnRXhwIiwiYmFzZUxhYmVsIiwibGFiZWwiLCJoZWFkTGFiZWwiLCJwdWxsX3JlcXVlc3RfcmV2aWV3IiwicmV2aWV3Iiwic3RhdGUiLCJwdWxsX3JlcXVlc3RfcmV2aWV3X2NvbW1lbnQiLCJzdGFyIiwicmVwbyIsInN0YXJnYXplcnNfY291bnQiLCJ3YXRjaCIsInByb2plY3RfY2FyZCIsInByb2plY3RfY29sdW1uIiwiY2hlY2tfcnVuIiwiY2hlY2tfc3VpdGUiLCJyZXBvc2l0b3J5X3Z1bG5lcmFiaWxpdHlfYWxlcnQiLCJyb3V0ZXIiLCJyZXF1ZXN0IiwiaGVhZGVycyIsInBheWxvYWQiLCJzdHJpbmdpZnkiLCJjcmVhdGVIYXNoIiwidXBkYXRlIiwiZGlnZXN0IiwiaG9vayIsImIiLCJpbmYiLCJyZWxhdGl2ZUlkcyIsInRvTG93ZXJDYXNlIiwiZ2lkIiwiZ2RvYyIsImNsaWVudF9pZCIsImNsaWVudF9zZWNyZXQiLCJyZWRpcmVjdF91cmkiLCJhY2Nlc3NfdG9rZW4iLCJHaXRodWJUb2tlbiIsInF1b3RlIiwicGFyc2VkTXNnIiwicGFyc2VkIiwicmVsYXRpdmVFdmVudCIsImludGVyYWN0IiwicmVmcmVzaF90b2tlbiIsImdyYW50X3R5cGUiLCIkc2V0IiwiJGFkZFRvU2V0IiwidXBzZXJ0IiwicHJvamVjdCIsImRvYyIsIiRwdWxsIiwib3NfMSIsInRleHQiLCJ3YXYiLCJ0bXBkaXIiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ1bmxpbmsiLCJfY2FyZCIsImtleXMiLCJ3cml0ZUZpbGUiLCJyZSIsIkFMTE9XIiwianNfeWFtbF8xIiwic2hhcnBfMSIsImltYWdlUkUiLCJ0cmFuc2ZpbGUiLCJyZWFkRmlsZSIsInRyYW5zIiwic2FmZUxvYWQiLCJuYW1lcyIsImNhcHR1cmUiLCJlbmFibGVBdXRvVGFnIiwibWQ1IiwidW5pcXVlIiwiZmlsZSIsInR4dCIsInJlc3BvbnNlVHlwZSIsImJ1ZiIsImFsbG9jIiwiYnl0ZUxlbmd0aCIsInZpZXciLCJVaW50OEFycmF5IiwiaGFzaCIsIk1ENSIsInBuZyIsInRvQnVmZmVyIiwicHJvYnMiLCJlcnJtc2ciLCJ0YWdzIiwidGFnIiwiamp3eiIsIm1vbmdvZGJfMSIsImV4cGlyZV8xIiwibG9jYWxlIiwiZXhwaXJlRGF5cyIsInNlcnZpY2VGZWUiLCJtYXhCdXlQZXJEYXkiLCJwcmljZUNvbGwiLCJleHBpcmVBZnRlclNlY29uZHMiLCJzdG9ja0NvbGwiLCJwcmljZVRvZGF5IiwicHJpY2UiLCJib3VnaHQiLCJzcXJ0IiwiZXhwaXJlIiwic3RvY2tMaXN0IiwiYnV5UHJpY2UiLCJjYW5CdXkiLCJmdXp6eSIsIm1heE51bWJlciIsImlzSW50ZWdlciIsIk9iamVjdElEIiwiY29zdCIsInNlbGxOdW1iZXIiLCJJbmZpbml0eSIsImRlbGV0ZUlkcyIsIm5ld051bWJlciIsImdhaW4iLCIkaW4iLCJkZWJ1ZyIsImN1cnJlbnREYXRhIiwibGV2ZWwiLCJjY2ZMZXZlbCIsImZvbGxvd2luZ0NvdW50IiwiZm9sbG93ZXJDb3VudCIsInBhc3NlZFByb2JsZW1Db3VudCIsInN1Ym1pdHRlZFByb2JsZW1Db3VudCIsImNvbG9yIiwicmV0IiwiaW1hZ2VfcmVjb3JkcyIsIm5vZGUiLCJzb3VyY2VfdGV4dCIsIkdFTkRFUiIsIjAiLCIxIiwicmVzdWx0cyIsInRha2UiLCJhd2FyZHMiLCJzZXgiLCJhd2FyZCIsImdyYWRlIiwicHJvdmluY2UiLCJzY2hvb2wiLCJpZGVudGl0eSIsInNjb3JlIiwiYXdhcmRfdHlwZSIsInBuZ2pzXzEiLCJrb2lzaGlfcGx1Z2luX3B1cHBldGVlcl8xIiwibG9hZFRpbWVvdXQiLCJpZGxlVGltZW91dCIsIm1heExlbmd0aCIsImFsbG93ZWRQcm90b2NvbHMiLCJkaXNwb3NlIiwidCIsInZpZXdwb3J0Iiwic2NoZW1lIiwibG9hZGVkIiwiZGV2aWNlU2NhbGVGYWN0b3IiLCJ0aW1lciIsIl9yZXNvbHZlIiwiY2xlYXJUaW1lb3V0IiwidGltZW91dCIsImZ1bGxQYWdlIiwiUE5HIiwiYml0Ymx0Iiwic3luYyIsIndyaXRlIiwiTEFOR1MiLCJjb21waWxlIiwiY29kZV9maWxlIiwiY2MiLCJwYXMiLCJweSIsInB5MiIsInB5MyIsImphdmEiLCJjb3B5T3V0IiwicGhwIiwianMiLCJnbyIsInNoIiwiY3MiLCJheGlvcyIsImJhc2VVUkwiLCJfcG9zdCIsInRpbWVfbGltaXRfbXMiLCJtZW1vcnlfbGltaXRfbWIiLCJwcm9jZXNzX2xpbWl0Iiwic3RkaW4iLCJjb3B5SW4iLCJjb3B5T3V0Q2FjaGVkIiwiZmlsZXMiLCJjcHVMaW1pdCIsInJlYWRDcHVMaW1pdCIsIm1lbW9yeUxpbWl0IiwicHJvY0xpbWl0IiwidGltZV91c2FnZV9tcyIsIm1lbW9yeV91c2FnZV9rYiIsIm1lbW9yeSIsImZpbGVJZHMiLCJsYW5nIiwiZmlsZUlkIiwiX3J1biIsInJlc3BvbnNlIiwia29pc2hpX3BsdWdpbl9zdGF0dXNfMSIsImZvcm1hdCIsImlkcyIsImFjdGl2ZVVzZXJzIiwiJG5pbiIsInVzZWRtZW0iLCJ0b3RhbG1lbSIsImZyZWVtZW0iLCJvbGQiLCJrb2lzaGlfcGx1Z2luX3RlYWNoXzEiLCJSRWltYWdlIiwiZ2V0Q29uZmlnIiwiX3JlZGlyZWN0ZWQiLCJjcmVhdG9yIiwiX2RpYWxvZ3VlIiwid3JpdGVyIiwiZG93bmxvYWRGaWxlIiwiQmluYXJ5IiwiZGlhbG9ndWUiLCJzbGljZSIsImluZGV4IiwiYW5zd2VyIiwia29pc2hpX3BsdWdpbl9pbWFnZV9zZWFyY2hfMSIsImtvaXNoaV9wbHVnaW5fdG9vbHNfMSIsImZzXzEiLCJiaWxpYmlsaSIsIm1hZ2kiLCJvZWlzIiwidGV4IiwibWF0Y2giLCJ2aWV3Qm94IiwidXNhZ2UiLCJzZXF1ZW5jZSIsInBhZFN0YXJ0IiwiZXhpc3RzU3luYyIsIndvcmQiLCJ3IiwidGVzdCIsImdldEZpcnN0UGlueWluIiwicGlueWluIiwic2hpZnQiLCJnZXRMYXN0UGlueWluIiwiZml4IiwiZW5kc1dpdGgiLCJqc29uIiwiZmlyc3RQaW55aW4iLCJsYXN0UGlueWluIiwia2V5MSIsInZhbHVlczEiLCJrZXkyIiwidmFsdWVzMiIsInBpbnlpbnMiLCJuZXdwaW55aW5zIiwiaW5kZXhlZCIsImZpbHRlcmVkIiwid2VicGFja0NvbnRleHQiLCJyZXEiLCJ3ZWJwYWNrQ29udGV4dFJlc29sdmUiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwid2VicGFja0VtcHR5Q29udGV4dCIsInJlcXVpcmUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVz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LFFBQVEsd0IscUJDQXpCdmtCLEVBQU9ySSxRQUFVNHNCLFFBQVEsaUIsc0JDQXpCdmtCLEVBQU9ySSxRQUFVNHNCLFFBQVEsVyxzQkNBekJ2a0IsRUFBT3JJLFFBQVU0c0IsUUFBUSxXLHNCQ0F6QnZrQixFQUFPckksUUFBVTRzQixRQUFRLFksc0JDQXpCdmtCLEVBQU9ySSxRQUFVNHNCLFFBQVEsTyxzQkNBekJ2a0IsRUFBT3JJLFFBQVU0c0IsUUFBUSxTLHNCQ0F6QnZrQixFQUFPckksUUFBVTRzQixRQUFRLFUscUJDQXpCdmtCLEVBQU9ySSxRQUFVNHNCLFFBQVEsVSxzQkNBekJ2a0IsRUFBT3JJLFFBQVU0c0IsUUFBUSxlLHNCQ0F6QnZrQixFQUFPckksUUFBVTRzQixRQUFRLHFCLHNCQ0F6QnZrQixFQUFPckksUUFBVTRzQixRQUFRLFVDQ3JCQyx5QkFBMkIsR0FHL0IsU0FBU0gsb0JBQW9CSSxHQUU1QixJQUFJQyxFQUFlRix5QkFBeUJDLEdBQzVDLFFBQXFCblYsSUFBakJvVixFQUNILE9BQU9BLEVBQWEvc0IsUUFHckIsSUFBSXFJLEVBQVN3a0IseUJBQXlCQyxHQUFZLENBR2pEOXNCLFFBQVMsSUFPVixPQUhBZ3RCLG9CQUFvQkYsR0FBVTdVLEtBQUs1UCxFQUFPckksUUFBU3FJLEVBQVFBLEVBQU9ySSxRQUFTMHNCLHFCQUdwRXJrQixFQUFPckksUUNyQmYwc0Isb0JBQW9CblYsRUFBSSxDQUFDMFYsRUFBS0MsSUFBVXB0QixPQUFPOEUsVUFBVW9ULGVBQWVDLEtBQUtnVixFQUFLQyxHQ0dsRixJQUFJQyxvQkFBc0JULG9CQUFvQixPIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmVuZE9mVG9kYXkgPSB2b2lkIDA7XHJcbmNvbnN0IG1vbWVudF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJtb21lbnRcIikpO1xyXG5mdW5jdGlvbiBlbmRPZlRvZGF5KCkge1xyXG4gICAgcmV0dXJuIG1vbWVudF8xLmRlZmF1bHQoKS51dGMoKVxyXG4gICAgICAgIC5hZGQoOCwgJ2hvdXJzJylcclxuICAgICAgICAuZW5kT2YoJ2RheScpXHJcbiAgICAgICAgLnN1YnRyYWN0KDgsICdob3VycycpXHJcbiAgICAgICAgLnRvRGF0ZSgpO1xyXG59XHJcbmV4cG9ydHMuZW5kT2ZUb2RheSA9IGVuZE9mVG9kYXk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4cGlyZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnRleHQycG5nID0gdm9pZCAwO1xyXG5jb25zdCBhbnNpX3VwXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImFuc2lfdXBcIikpO1xyXG5jb25zdCBBVSA9IG5ldyBhbnNpX3VwXzEuZGVmYXVsdCgpO1xyXG5hc3luYyBmdW5jdGlvbiB0ZXh0MnBuZyhwYWdlLCBjb250ZW50KSB7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxyXG4gICAgY29uc3Qgc3RyID0gYDxwcmUgc3R5bGU9XCJmb250LWZhbWlseTonU291cmNlIENvZGUgUHJvJywgQ29uc29sYXMsICdNaWNyb3NvZnQgWWFoZWknLCBIWVNodWFpWGlhblRpVztmb250LXNpemU6MTRweDttYXgtd2lkdGg6NjMwcHhcIj4ke0FVLmFuc2lfdG9faHRtbChjb250ZW50KX08L3ByZT5gO1xyXG4gICAgbGV0IHM7XHJcbiAgICBsZXQgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgYXdhaXQgcGFnZS5zZXRWaWV3cG9ydCh7XHJcbiAgICAgICAgICAgIGhlaWdodDogMTAwLCB3aWR0aDogMzAsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYXdhaXQgcGFnZS5zZXRDb250ZW50KHN0cik7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGF3YWl0IHBhZ2UuJCgncHJlJyk7XHJcbiAgICAgICAgY29uc3Qgc2l6ZSA9IGF3YWl0IHBhZ2UuZXZhbHVhdGUoKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcclxuICAgICAgICAgICAgY29uc3QgZWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3ByZScpWzBdO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IGVsZS5zY3JvbGxXaWR0aCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogZWxlLnNjcm9sbEhlaWdodCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBjbGlwID0gYXdhaXQgZWxlbWVudC5ib3VuZGluZ0JveCgpO1xyXG4gICAgICAgIGF3YWl0IHBhZ2Uuc2V0Vmlld3BvcnQoe1xyXG4gICAgICAgICAgICB3aWR0aDogTWF0aC5jZWlsKHNpemUud2lkdGggKyAxNCksXHJcbiAgICAgICAgICAgIGhlaWdodDogTWF0aC5jZWlsKGNsaXAuaGVpZ2h0ICsgMTQpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHMgPSBhd2FpdCBwYWdlLnNjcmVlbnNob3Qoe30pO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGUgPSBlcnI7XHJcbiAgICB9XHJcbiAgICBpZiAoZSlcclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgcmV0dXJuIChzIHx8IEJ1ZmZlci5mcm9tKCcnKSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xyXG59XHJcbmV4cG9ydHMudGV4dDJwbmcgPSB0ZXh0MnBuZztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3JhcGguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5yZWdpc3Rlckl0ZW0gPSBleHBvcnRzLkl0ZW1zID0gdm9pZCAwO1xyXG5leHBvcnRzLkl0ZW1zID0ge1xyXG4gICAgZmFsbGJhY2s6IHtcclxuICAgICAgICBpZDogJ2ZhbGxiYWNrJyxcclxuICAgICAgICB3ZWlnaHQ6IDAsXHJcbiAgICAgICAgbmFtZTogJ+acquefpeeJqeWTgScsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICfmnKrnn6Xnianlk4EnLFxyXG4gICAgfSxcclxufTtcclxuZnVuY3Rpb24gcmVnaXN0ZXJJdGVtKGlkLCB3ZWlnaHQsIG5hbWUsIGRlc2NyaXB0aW9uKSB7XHJcbiAgICBleHBvcnRzLkl0ZW1zW2lkXSA9IHtcclxuICAgICAgICBpZCwgd2VpZ2h0LCBuYW1lLCBkZXNjcmlwdGlvbixcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy5yZWdpc3Rlckl0ZW0gPSByZWdpc3Rlckl0ZW07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWl0ZW0uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgY2hpbGRfcHJvY2Vzc18xID0gcmVxdWlyZShcImNoaWxkX3Byb2Nlc3NcIik7XHJcbmFzeW5jIGZ1bmN0aW9uIHNoZWxsRXhlY3V0ZShjb21tYW5kKSB7XHJcbiAgICBsZXQgcDtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcCA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY2hpbGRfcHJvY2Vzc18xLmV4ZWMoY29tbWFuZCwgKGVyciwgc3Rkb3V0LCBzdGRlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlcnIpXHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHN0ZG91dCArIHN0ZGVycik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICByZXR1cm4gZS50b1N0cmluZygpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFwLnRyaW0oKS5sZW5ndGgpXHJcbiAgICAgICAgcmV0dXJuICcoZXhlY3V0ZSBzdWNjZXNzKSc7XHJcbiAgICByZXR1cm4gcDtcclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBzaGVsbEV4ZWN1dGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoZWxsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvZmlyc3QgKi9cclxuLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L25vLWR1cGxpY2F0ZXMgKi9cclxuLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L25vLWR5bmFtaWMtcmVxdWlyZSAqL1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBnbG9iYWwtcmVxdWlyZSAqL1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1hd2FpdC1pbi1sb29wICovXHJcbmNvbnN0IHBhdGhfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicGF0aFwiKSk7XHJcbmNvbnN0IGtvaXNoaV9jb3JlXzEgPSByZXF1aXJlKFwia29pc2hpLWNvcmVcIik7XHJcbmNvbnN0IGtvaXNoaV91dGlsc18xID0gcmVxdWlyZShcImtvaXNoaS11dGlsc1wiKTtcclxuY29uc3QgZnNfZXh0cmFfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZnMtZXh0cmFcIikpO1xyXG5jb25zdCBrb2lzaGlfcGx1Z2luX21vbmdvXzEgPSByZXF1aXJlKFwia29pc2hpLXBsdWdpbi1tb25nb1wiKTtcclxucmVxdWlyZShcImtvaXNoaS1hZGFwdGVyLW9uZWJvdFwiKTtcclxucmVxdWlyZShcImtvaXNoaS1hZGFwdGVyLXRlbGVncmFtXCIpO1xyXG5wcm9jZXNzLm9uKCd1bmhhbmRsZWRSZWplY3Rpb24nLCAoXywgcCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ1VuaGFuZGxlZCBSZWplY3Rpb246JywgcCk7XHJcbn0pO1xyXG5rb2lzaGlfdXRpbHNfMS5Mb2dnZXIuc2hvd0RpZmYgPSBmYWxzZTtcclxua29pc2hpX3V0aWxzXzEuTG9nZ2VyLnNob3dUaW1lID0gJ01NLUREIGhoOm1tOnNzJztcclxua29pc2hpX2NvcmVfMS5Db21tYW5kLmRlZmF1bHRDb25maWcuY2hlY2tBcmdDb3VudCA9IHRydWU7XHJcblN0cmluZy5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucmVwbGFjZSgvJiM5MTsvZ20sICdbJykucmVwbGFjZSgvJiM5MzsvZ20sICddJykucmVwbGFjZSgvJmFtcDsvZ20sICcmJyk7XHJcbn07XHJcblN0cmluZy5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucmVwbGFjZSgvJi9nbSwgJyZhbXA7JykucmVwbGFjZSgvXFxbL2dtLCAnJiM5MTsnKS5yZXBsYWNlKC9cXF0vZ20sICcmIzkzOycpO1xyXG59O1xyXG5rb2lzaGlfY29yZV8xLlNlc3Npb24ucHJvdG90eXBlLmV4ZWN1dGVTaWxlbnQgPSBmdW5jdGlvbiBleGVjdXRlU2lsZW50KGFyZzAsIGFyZzEpIHtcclxuICAgIHRoaXMuX3NpbGVudCA9IHRydWU7XHJcbiAgICB0aGlzLnNlbmQgPSBrb2lzaGlfdXRpbHNfMS5ub29wO1xyXG4gICAgdGhpcy5zZW5kUXVldWVkID0ga29pc2hpX3V0aWxzXzEubm9vcDtcclxuICAgIHJldHVybiB0aGlzLmV4ZWN1dGUoYXJnMCwgYXJnMSk7XHJcbn07XHJcbmNsYXNzIE1haW4ge1xyXG4gICAgY29uc3RydWN0b3IoaXRlbSkge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyID0gbmV3IGtvaXNoaV91dGlsc18xLkxvZ2dlcignbWFpbicpO1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0gaXRlbS5jb25maWc7XHJcbiAgICAgICAgdGhpcy5hcHAgPSBuZXcga29pc2hpX2NvcmVfMS5BcHAoe1xyXG4gICAgICAgICAgICBwb3J0OiB0aGlzLmNvbmZpZy5wb3J0LFxyXG4gICAgICAgICAgICBib3RzOiB0aGlzLmNvbmZpZy5ib3RzLFxyXG4gICAgICAgICAgICB0eXBlOiB0aGlzLmNvbmZpZy50eXBlLFxyXG4gICAgICAgICAgICBvbmVib3Q6IHRoaXMuY29uZmlnLm9uZWJvdCxcclxuICAgICAgICAgICAgdGVsZWdyYW06IHRoaXMuY29uZmlnLnRlbGVncmFtLFxyXG4gICAgICAgICAgICBwcmVmaXg6IHRoaXMuY29uZmlnLnByb21wdCxcclxuICAgICAgICAgICAgYXV0b0F1dGhvcml6ZTogMSxcclxuICAgICAgICAgICAgYXV0b0Fzc2lnbjogdHJ1ZSxcclxuICAgICAgICAgICAgbWluU2ltaWxhcml0eTogMC43LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMucnVuKCk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBydW4oKSB7XHJcbiAgICAgICAgZnNfZXh0cmFfMS5kZWZhdWx0LmVuc3VyZURpclN5bmMocGF0aF8xLmRlZmF1bHQucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICcuY2FjaGUnKSk7XHJcbiAgICAgICAgdGhpcy5hcHAucGx1Z2luKGtvaXNoaV9wbHVnaW5fbW9uZ29fMS5hcHBseSwgdGhpcy5jb25maWcuZGIpO1xyXG4gICAgICAgIHRoaXMuYXBwLm9uKCdjb25uZWN0JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgdGhpcy5jb25maWcuYWRtaW4pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJzID0gbGluZS5zcGxpdCgnJicpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGZvdW5kO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB1c2VyIG9mIHVzZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW3R5cGUsIGlkXSA9IHVzZXIuc3BsaXQoJzonKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB1ZG9jID0gYXdhaXQgdGhpcy5hcHAuZGF0YWJhc2UuZ2V0VXNlcih0eXBlLCBpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVkb2MpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kID0gW3R5cGUsIGlkXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG1hcCA9IE9iamVjdC5hc3NpZ24oe30sIC4uLnVzZXJzLm1hcCgoaSkgPT4gaS5zcGxpdCgnOicpKS5tYXAoKGkpID0+ICh7IFtpWzBdXTogaVsxXSB9KSkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAuZGF0YWJhc2Uuc2V0VXNlcihmb3VuZFswXSwgZm91bmRbMV0sIHsgLi4ubWFwLCBhdXRob3JpdHk6IDUsIHN1ZG9lcjogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm8oYE9wcGVkICR7bGluZX1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZCgpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuYXBwLnN0YXJ0KCk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBsb2FkKCkge1xyXG4gICAgICAgIGZvciAoY29uc3QgcGx1Z2luIG9mIHRoaXMuY29uZmlnLmVuYWJsZWRwbHVnaW5zKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBsdWdpbiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGx1Z2luLnN0YXJ0c1dpdGgoJyMnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcC5wbHVnaW4ocmVxdWlyZShgLi9wbHVnaW5zLyR7cGx1Z2luLnNwbGl0KCcjJylbMV19YCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLnBsdWdpbihyZXF1aXJlKHBsdWdpbikuYXBwbHkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocGx1Z2luIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGx1Z2luWzBdLnN0YXJ0c1dpdGgoJyMnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcC5wbHVnaW4ocmVxdWlyZShgLi9wbHVnaW5zLyR7cGx1Z2luWzBdLnNwbGl0KCcjJylbMV19YCksIHBsdWdpblsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLnBsdWdpbihyZXF1aXJlKHBsdWdpblswXSkuYXBwbHksIHBsdWdpblsxXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gbG9hZCAnLCBwbHVnaW4sIGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8vIEB0cy1pZ25vcmVcclxuZ2xvYmFsLk1haW4gPSBNYWluO1xyXG5tb2R1bGUuZXhwb3J0cyA9IE1haW47XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1haW4uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5hcHBseSA9IHZvaWQgMDtcclxuY29uc3Qga29pc2hpX2NvcmVfMSA9IHJlcXVpcmUoXCJrb2lzaGktY29yZVwiKTtcclxuY29uc3QgbG9kYXNoXzEgPSByZXF1aXJlKFwibG9kYXNoXCIpO1xyXG5jb25zdCBtb21lbnRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibW9tZW50XCIpKTtcclxua29pc2hpX2NvcmVfMS5DaGFubmVsLmV4dGVuZCgoKSA9PiAoe1xyXG4gICAga2ljazogMCxcclxufSkpO1xyXG5hc3luYyBmdW5jdGlvbiBhcHBseShjdHgpIHtcclxuICAgIGN0eC5zZWxlY3QoJ3BsYXRmb3JtJywgJ29uZWJvdCcpLmNvbW1hbmQoJ2F1dG9raWNrIDxjb3VudD4nLCAnJywgeyBoaWRkZW46IHRydWUsIGF1dGhvcml0eTogNCB9KVxyXG4gICAgICAgIC5jaGFubmVsRmllbGRzKFsna2ljayddKVxyXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9LCBjb3VudCkgPT4ge1xyXG4gICAgICAgIHNlc3Npb24uY2hhbm5lbC5raWNrID0gK2NvdW50O1xyXG4gICAgICAgIHJldHVybiBgc2V0IHRvICR7Y291bnR9YDtcclxuICAgIH0pO1xyXG4gICAgY3R4LmFwcC5vbignY29ubmVjdCcsICgpID0+IHtcclxuICAgICAgICBjb25zdCBjb2xsID0gY3R4LmFwcC5kYXRhYmFzZS5tb25nby5jb2xsZWN0aW9uKCdhdXRva2ljaycpO1xyXG4gICAgICAgIGN0eC5zZWxlY3QoJ3BsYXRmb3JtJywgJ29uZWJvdCcpLmNvbW1hbmQoJ2F1dG9raWNrLnJ1bicsICcnLCB7IGhpZGRlbjogdHJ1ZSwgYXV0aG9yaXR5OiA0IH0pXHJcbiAgICAgICAgICAgIC5jaGFubmVsRmllbGRzKFsna2ljayddKVxyXG4gICAgICAgICAgICAub3B0aW9uKCdkcnknLCAnZHJ5IHJ1bicsIHsgYXV0aG9yaXR5OiAyIH0pXHJcbiAgICAgICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiwgb3B0aW9ucyB9KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gYXdhaXQgc2Vzc2lvbi5ib3QuZ2V0R3JvdXAoc2Vzc2lvbi5ncm91cElkKTtcclxuICAgICAgICAgICAgbGV0IHVzZXJzID0gYXdhaXQgc2Vzc2lvbi5ib3QuJGdldEdyb3VwTWVtYmVyTGlzdChncm91cC5ncm91cElkKTtcclxuICAgICAgICAgICAgY29uc3Qga2lja2VkID0gKGF3YWl0IGNvbGwuZmluZCh7IGdyb3VwSWQ6IHNlc3Npb24uZ3JvdXBJZCB9KS50b0FycmF5KCkpLm1hcCgoaSkgPT4gaS51c2VySWQpO1xyXG4gICAgICAgICAgICB1c2VycyA9IGxvZGFzaF8xLmZpbHRlcih1c2VycywgKHVzZXIpID0+ICFraWNrZWQuaW5jbHVkZXModXNlci51c2VySWQpKTtcclxuICAgICAgICAgICAgaWYgKHNlc3Npb24uY2hhbm5lbC5raWNrICYmIHNlc3Npb24uY2hhbm5lbC5raWNrIDwgdXNlcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgdXNlcnMgPSBsb2Rhc2hfMS5zb3J0QnkodXNlcnMubWFwKCh1c2VyKSA9PiAoeyAuLi51c2VyLCBzb3J0OiBNYXRoLm1heCh1c2VyLmxhc3RTZW50VGltZSwgdXNlci5qb2luVGltZSkgfSkpLCAnc29ydCcpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB1c2VyIG9mIHVzZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdWRvYyA9IGF3YWl0IGNvbGwuZmluZE9uZSh7IGdyb3VwSWQ6IHNlc3Npb24uZ3JvdXBJZCwgdXNlcklkOiB1c2VyLnVzZXJJZCB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXVkb2MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gdXNlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYXdhaXQgc2Vzc2lvbi5zZW5kKFtcclxuICAgICAgICAgICAgICAgICAgICBg5bCGICR7dGFyZ2V0Lm5pY2tuYW1lIHx8IHRhcmdldC5jYXJkfSAoJHt0YXJnZXQudXNlcklkfSkg56e75Ye6576kYCxcclxuICAgICAgICAgICAgICAgICAgICBg77yIJHttb21lbnRfMS5kZWZhdWx0KHRhcmdldC5qb2luVGltZSAqIDEwMDAgfHwgMCkuZnJvbU5vdygpfeWKoOWFpe+8jOS4iuasoeWPkeiogCAke21vbWVudF8xLmRlZmF1bHQodGFyZ2V0Lmxhc3RTZW50VGltZSAqIDEwMDAgfHwgMCkuZnJvbU5vdygpfe+8iWAsXHJcbiAgICAgICAgICAgICAgICBdLmpvaW4oJ1xcbicpKTtcclxuICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5kcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb24uYm90LiRzZXRHcm91cEtpY2soZ3JvdXAuZ3JvdXBJZCwgdGFyZ2V0LnVzZXJJZCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGwuaW5zZXJ0T25lKHsgZ3JvdXBJZDogc2Vzc2lvbi5ncm91cElkLCB1c2VySWQ6IHRhcmdldC51c2VySWQgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuYXBwbHkgPSBhcHBseTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0b2tpY2suanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5hcHBseSA9IHZvaWQgMDtcclxuY29uc3Qgc3VwZXJhZ2VudF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJzdXBlcmFnZW50XCIpKTtcclxuY29uc3QgdGFibGUgPSAnZlpvZFI5WFFEU1VtMjF5Q2tyNnpCcWl2ZVlhaDhidDR4c1dwSG5KRTdqTDVWRzNndU1US05QQXdjRic7XHJcbmNvbnN0IHRyID0ge307XHJcbmZvciAobGV0IGkgPSAwOyBpIDwgNTg7IGkrKylcclxuICAgIHRyW3RhYmxlW2ldXSA9IGk7XHJcbmNvbnN0IHMgPSBbMTEsIDEwLCAzLCA4LCA0LCA2XTtcclxuY29uc3QgciA9IFsnQicsICdWJywgJzEnLCAnJywgJycsICc0JywgJycsICcxJywgJycsICc3JywgJycsICcnXTtcclxuY29uc3QgeG9yID0gMTc3NDUxODEyO1xyXG5jb25zdCBhZGQgPSA4NzI4MzQ4NjA4O1xyXG5mdW5jdGlvbiBkZWNvZGUoc291cmNlKSB7XHJcbiAgICBpZiAoc291cmNlLmxlbmd0aCAhPT0gMTIgfHwgKHNvdXJjZVswXSArIHNvdXJjZVsxXSArIHNvdXJjZVsyXSArIHNvdXJjZVs1XSArIHNvdXJjZVs3XSArIHNvdXJjZVs5XSkudG9VcHBlckNhc2UoKSAhPT0gci5qb2luKCcnKSkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgbGV0IHJlc3VsdCA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDY7IGkrKykge1xyXG4gICAgICAgIHJlc3VsdCArPSB0cltzb3VyY2Vbc1tpXV1dICogKDU4ICoqIGkpO1xyXG4gICAgfVxyXG4gICAgcmVzdWx0ID0gKChyZXN1bHQgLSBhZGQpIF4geG9yKTtcclxuICAgIHJldHVybiByZXN1bHQgPiAwICYmIHJlc3VsdCA8IDFlOSA/IHJlc3VsdCA6IG51bGw7XHJcbn1cclxuY29uc3QgUkVfQlZJRCA9IFtcclxuICAgIFsvKEJWWzAtOWEtekEtWl17MTB9KS9nbWksIChyZXN1bHQpID0+IGRlY29kZShyZXN1bHRbMV0pXSxcclxuICAgIFsvYXYoWzAtOV0rKS9nbWksIChyZXN1bHQpID0+IHBhcnNlSW50KHJlc3VsdFsxXSwgMTApXSxcclxuICAgIFsvYjIzXFwudHZcXC8oW2EtekEtWjAtOV0rKS9nbWksIGFzeW5jIChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdXJsID0gYGh0dHBzOi8vYjIzLnR2LyR7cmVzdWx0WzFdfWA7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlZGlyZWN0ID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgICAgIHN1cGVyYWdlbnRfMS5kZWZhdWx0LmdldCh1cmwpXHJcbiAgICAgICAgICAgICAgICAgICAgLmJ1ZmZlcihmYWxzZSlcclxuICAgICAgICAgICAgICAgICAgICAuZW5kKChlcnIsIHJlcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzLnJlZGlyZWN0cy5sZW5ndGggPyByZXMucmVkaXJlY3RzLnBvcCgpIDogdXJsKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGRlY29kZShyZWRpcmVjdC5zcGxpdCgndmlkZW8vJylbMV0uc3BsaXQoJz8nKVswXSk7XHJcbiAgICAgICAgfV0sXHJcbl07XHJcbmNvbnN0IGFwcGx5ID0gKGFwcCkgPT4ge1xyXG4gICAgYXBwLmNvbW1hbmQoJ2JpbGliaWxpIDxhdmlkPicsIHsgaGlkZGVuOiB0cnVlIH0pXHJcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0sIGF2KSA9PiB7XHJcbiAgICAgICAgY29uc3QgaW5mbyA9IGF3YWl0IHN1cGVyYWdlbnRfMS5kZWZhdWx0LmdldChgaHR0cDovL2FwaS5iaWxpYmlsaS5jb20veC93ZWItaW50ZXJmYWNlL3ZpZXc/YWlkPSR7YXZ9YCk7XHJcbiAgICAgICAgaWYgKGluZm8uYm9keS5jb2RlICE9PSAwKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgYXdhaXQgc2Vzc2lvbi5zZW5kKGBiaWxpYmlsaS5jb20vdmlkZW8vYXYke2F2fVxcbiR7aW5mby5ib2R5LmRhdGEudGl0bGV9XFxuW0NROmltYWdlLGZpbGU9JHtpbmZvLmJvZHkuZGF0YS5waWN9XWApO1xyXG4gICAgfSk7XHJcbiAgICBhcHAubWlkZGxld2FyZShhc3luYyAoc2Vzc2lvbiwgbmV4dCkgPT4ge1xyXG4gICAgICAgIGF3YWl0IG5leHQoKTtcclxuICAgICAgICBsZXQgYXY7XHJcbiAgICAgICAgZm9yIChjb25zdCBSRSBvZiBSRV9CVklEKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IFJFWzBdLmV4ZWMoc2Vzc2lvbi5jb250ZW50KTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gUkVbMV0ocmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hd2FpdC1pbi1sb29wXHJcbiAgICAgICAgICAgICAgICBpZiAocmVzIGluc3RhbmNlb2YgUHJvbWlzZSlcclxuICAgICAgICAgICAgICAgICAgICBhdiA9IGF3YWl0IHJlcztcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBhdiA9IHJlcztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhdilcclxuICAgICAgICAgICAgYXdhaXQgc2Vzc2lvbi5leGVjdXRlKGBiaWxpYmlsaSAke2F2fWApO1xyXG4gICAgfSk7XHJcbn07XHJcbmV4cG9ydHMuYXBwbHkgPSBhcHBseTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmlsaWJpbGkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5hcHBseSA9IHZvaWQgMDtcclxuY29uc3QgYXBwbHkgPSAoY3R4KSA9PiB7XHJcbiAgICBjdHgub24oJ2Nvbm5lY3QnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY29sbCA9IGN0eC5kYXRhYmFzZS5tb25nby5jb2xsZWN0aW9uKCdib3R0bGUnKTtcclxuICAgICAgICBjdHguY29tbWFuZCgnYm90dGxlLnRocm93IDxjb250ZW50OnRleHQ+JywgJ+S4oua8gua1geeTticsIHsgbm9SZWRpcmVjdDogdHJ1ZSB9KVxyXG4gICAgICAgICAgICAuYWxpYXMoJ+S4oua8gua1geeTticpXHJcbiAgICAgICAgICAgIC51c2VyRmllbGRzKFsnaWQnXSlcclxuICAgICAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0sIGNvbnRlbnQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgY29sbC5pbnNlcnRPbmUoe1xyXG4gICAgICAgICAgICAgICAgZ3JvdXBJZDogYCR7c2Vzc2lvbi5wbGF0Zm9ybX06JHtzZXNzaW9uLmdyb3VwSWR9YCxcclxuICAgICAgICAgICAgICAgIHVzZXJJZDogK3Nlc3Npb24udXNlci5pZCxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQudHJpbSgpLFxyXG4gICAgICAgICAgICAgICAgcGljazogMCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBg5bey5Lii5Ye644CCKCR7cmVzLmluc2VydGVkSWR9KWA7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY3R4LmNvbW1hbmQoJ2JvdHRsZS5waWNrJywgJ+aNoea8gua1geeTticpXHJcbiAgICAgICAgICAgIC5hbGlhcygn5o2h5ryC5rWB55O2JylcclxuICAgICAgICAgICAgLmFjdGlvbihhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNudCA9IGF3YWl0IGNvbGwuZmluZCh7fSkuY291bnQoKTtcclxuICAgICAgICAgICAgaWYgKCFjbnQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+ayoeacieaNoeWIsCc7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNudCk7XHJcbiAgICAgICAgICAgIGNvbnN0IFtyZXNdID0gYXdhaXQgY29sbC5maW5kKHt9KS5za2lwKHRhcmdldCkubGltaXQoMSkudG9BcnJheSgpO1xyXG4gICAgICAgICAgICBjb25zdCBzaG91bGREZXN0b3J5ID0gTWF0aC5yYW5kb20oKSA+IDAuNTtcclxuICAgICAgICAgICAgaWYgKHNob3VsZERlc3RvcnkpXHJcbiAgICAgICAgICAgICAgICBhd2FpdCBjb2xsLmRlbGV0ZU9uZSh7IF9pZDogcmVzLl9pZCB9KTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgYXdhaXQgY29sbC51cGRhdGVPbmUoeyBfaWQ6IHJlcy5faWQgfSwgeyAkaW5jOiB7IHBpY2s6IDEgfSB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGDooqvmjaHotbcgJHtyZXMucGljayArIDF9IOasoVxu5pe26Ze077yaJHtuZXcgRGF0ZShyZXMuX2lkLmdlbmVyYXRpb25UaW1lICogMTAwMCkudG9Mb2NhbGVTdHJpbmcoKX1cbuWGheWuue+8miR7cmVzLmNvbnRlbnR9YDtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjdHguY29tbWFuZCgnYm90dGxlLmRlbCA8cXVlcnk6dGV4dD4nLCB7IGF1dGhvcml0eTogNSwgaGlkZGVuOiB0cnVlIH0pXHJcbiAgICAgICAgICAgIC5hY3Rpb24oYXN5bmMgKF8sIHF1ZXJ5KSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1ldmFsXHJcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNvbGwuZGVsZXRlTWFueShKU09OLnBhcnNlKHF1ZXJ5LmRlY29kZSgpKSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXMuZGVsZXRlZENvdW50LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGN0eC5jb21tYW5kKCdib3R0bGUnLCAn5ryC5rWB55O2Jyk7XHJcbn07XHJcbmV4cG9ydHMuYXBwbHkgPSBhcHBseTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ym90dGxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuYXBwbHkgPSB2b2lkIDA7XHJcbi8qIGVzbGludC1kaXNhYmxlIG5vLWF3YWl0LWluLWxvb3AgKi9cclxuY29uc3QgY2hpbGRfcHJvY2Vzc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJjaGlsZF9wcm9jZXNzXCIpKTtcclxuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcInV0aWxcIik7XHJcbmNvbnN0IGtvaXNoaV9jb3JlXzEgPSByZXF1aXJlKFwia29pc2hpLWNvcmVcIik7XHJcbmNvbnN0IGtvaXNoaV9wbHVnaW5fY29tbW9uXzEgPSByZXF1aXJlKFwia29pc2hpLXBsdWdpbi1jb21tb25cIik7XHJcbmNvbnN0IG1vbWVudF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJtb21lbnRcIikpO1xyXG5jb25zdCBncmFwaF8xID0gcmVxdWlyZShcIi4uL2xpYi9ncmFwaFwiKTtcclxuY29uc3Qgc2hlbGxfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vbGliL3NoZWxsXCIpKTtcclxua29pc2hpX2NvcmVfMS5DaGFubmVsLmV4dGVuZCgoKSA9PiAoe1xyXG4gICAgZGlzYWxsb3dlZENvbW1hbmRzOiBbXSxcclxufSkpO1xyXG5jb25zdCBncm91cE1hcCA9IHt9O1xyXG5jb25zdCB1c2VyTWFwID0ge307XHJcbmFzeW5jIGZ1bmN0aW9uIGdldEdyb3VwTmFtZShzZXNzaW9uKSB7XHJcbiAgICBpZiAoc2Vzc2lvbi5zdWJ0eXBlID09PSAncHJpdmF0ZScpXHJcbiAgICAgICAgcmV0dXJuICfnp4HogYonO1xyXG4gICAgY29uc3QgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcclxuICAgIGNvbnN0IGlkID0gc2Vzc2lvbi5jaGFubmVsSWQ7XHJcbiAgICBpZiAoIWdyb3VwTWFwW2lkXSB8fCB0aW1lc3RhbXAgLSBncm91cE1hcFtpZF1bMV0gPj0ga29pc2hpX2NvcmVfMS5UaW1lLmhvdXIpIHtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gc2Vzc2lvbi5ib3QuZ2V0R3JvdXAoaWQpLnRoZW4oKGQpID0+IGQuZ3JvdXBOYW1lLCAoKSA9PiBpZCk7XHJcbiAgICAgICAgZ3JvdXBNYXBbaWRdID0gW3Byb21pc2UsIHRpbWVzdGFtcF07XHJcbiAgICB9XHJcbiAgICBsZXQgb3V0cHV0ID0gYXdhaXQgZ3JvdXBNYXBbaWRdWzBdO1xyXG4gICAgaWYgKG91dHB1dCAhPT0gYCR7aWR9YClcclxuICAgICAgICBvdXRwdXQgKz0gYCAoJHtpZH0pYDtcclxuICAgIHJldHVybiBvdXRwdXQ7XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShzZXNzaW9uKSB7XHJcbiAgICBjb25zdCBjb2RlcyA9IGtvaXNoaV9jb3JlXzEuc2VnbWVudC5wYXJzZShzZXNzaW9uLmNvbnRlbnQpO1xyXG4gICAgbGV0IG91dHB1dCA9ICcnO1xyXG4gICAgZm9yIChjb25zdCBjb2RlIG9mIGNvZGVzKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb2RlID09PSAnc3RyaW5nJylcclxuICAgICAgICAgICAgb3V0cHV0ICs9IGNvZGU7XHJcbiAgICAgICAgZWxzZSBpZiAoY29kZS50eXBlID09PSAndGV4dCcpXHJcbiAgICAgICAgICAgIG91dHB1dCArPSBjb2RlLmRhdGEuY29udGVudDtcclxuICAgICAgICBlbHNlIGlmIChjb2RlLnR5cGUgPT09ICdhdCcpIHtcclxuICAgICAgICAgICAgaWYgKGNvZGUuZGF0YS5xcSA9PT0gJ2FsbCcpXHJcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gJ0DlhajkvZPmiJDlkZgnO1xyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gY29kZS5kYXRhLnFxO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgICAgIGlmICghdXNlck1hcFtpZF0gfHwgdGltZXN0YW1wIC0gdXNlck1hcFtpZF1bMV0gPj0ga29pc2hpX2NvcmVfMS5UaW1lLmhvdXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9taXNlID0gc2Vzc2lvbi5ib3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldEdyb3VwTWVtYmVyKHNlc3Npb24uZ3JvdXBJZCwgaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKChkKSA9PiBkLm5pY2tuYW1lIHx8IGQudXNlcm5hbWUsICgpID0+IGlkKTtcclxuICAgICAgICAgICAgICAgICAgICB1c2VyTWFwW2lkXSA9IFtwcm9taXNlLCB0aW1lc3RhbXBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9IGBAJHthd2FpdCB1c2VyTWFwW2lkXVswXX1gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNvZGUudHlwZSA9PT0gJ2ZhY2UnKVxyXG4gICAgICAgICAgICBvdXRwdXQgKz0gYFtmYWNlICR7Y29kZS5kYXRhLmlkfV1gO1xyXG4gICAgICAgIGVsc2UgaWYgKGNvZGUudHlwZSA9PT0gJ2ltYWdlJykge1xyXG4gICAgICAgICAgICBvdXRwdXQgKz0gYFtpbWFnZSAkeyhjb2RlLmRhdGEudXJsIHx8ICcnKS5zcGxpdCgnPycpWzBdfV1gO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjb2RlLnR5cGUgPT09ICdyZXBseScpXHJcbiAgICAgICAgICAgIG91dHB1dCArPSBgW3JlcGx5ICR7Y29kZS5kYXRhLmlkfV1gO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgb3V0cHV0ICs9IGBbJHtjb2RlLnR5cGV9XWA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3V0cHV0O1xyXG59XHJcbmNvbnN0IGNoZWNrR3JvdXBBZG1pbiA9ICh7IHNlc3Npb24gfSkgPT4gKChzZXNzaW9uLnVzZXIuYXV0aG9yaXR5ID49IDQgfHwgc2Vzc2lvbi5hdXRob3Iucm9sZXMuaW5jbHVkZXMoJ2FkbWluJykgfHwgc2Vzc2lvbi5hdXRob3Iucm9sZXMuaW5jbHVkZXMoJ293bmVyJykpXHJcbiAgICA/IG51bGxcclxuICAgIDogJ+S7heeuoeeQhuWRmOWPr+aJp+ihjOivpeaTjeS9nOOAgicpO1xyXG5jb25zdCBhcHBseSA9IChjdHgsIGNvbmZpZyA9IHt9KSA9PiB7XHJcbiAgICB2YXIgX2EsIF9iO1xyXG4gICAgY29uc3QgbG9nZ2VyID0gbmV3IGtvaXNoaV9jb3JlXzEuTG9nZ2VyKCdidXN5Ym94Jyk7XHJcbiAgICBrb2lzaGlfY29yZV8xLkxvZ2dlci5sZXZlbHMubWVzc2FnZSA9IDM7XHJcbiAgICBrb2lzaGlfY29yZV8xLlRpbWUuc2V0VGltZXpvbmVPZmZzZXQoKF9hID0gY29uZmlnLnRpbWV6b25lT2Zmc2V0KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAtNDgwKTsgLy8gVVRDICs4XHJcbiAgICBjb25maWcucmVjb3JkTWVzc2FnZSA9IChfYiA9IGNvbmZpZy5yZWNvcmRNZXNzYWdlKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiB0cnVlO1xyXG4gICAgY3R4LnBsdWdpbihrb2lzaGlfcGx1Z2luX2NvbW1vbl8xLmFwcGx5LCB7fSk7XHJcbiAgICBjdHguY29tbWFuZCgnaGVscCcsIHsgYXV0aG9yaXR5OiAxLCBoaWRkZW46IHRydWUgfSk7XHJcbiAgICBjdHguY29tbWFuZCgndGV4JywgeyBhdXRob3JpdHk6IDEgfSk7XHJcbiAgICBjdHguY29tbWFuZCgnXycsICfnrqHnkIblt6XlhbcnKTtcclxuICAgIGN0eC5zZWxlY3QoJ2dyb3VwSWQnKS5jb21tYW5kKCdfLmFzc2lnbicsICdhc3NpZ24nLCB7IGF1dGhvcml0eTogNCB9KVxyXG4gICAgICAgIC5jaGFubmVsRmllbGRzKFsnYXNzaWduZWUnXSlcclxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSkgPT4ge1xyXG4gICAgICAgIHNlc3Npb24uY2hhbm5lbC5hc3NpZ25lZSA9IHNlc3Npb24uc2VsZklkLnRvU3RyaW5nKCk7XHJcbiAgICB9KTtcclxuICAgIGN0eC5jb21tYW5kKCdfLmVjaG8gPG1zZzp0ZXh0PicsICdlY2hvJywgeyBub1JlZGlyZWN0OiB0cnVlLCBhdXRob3JpdHk6IDMgfSlcclxuICAgICAgICAuYWN0aW9uKChfLCBtc2cpID0+IG1zZy5kZWNvZGUoKSk7XHJcbiAgICBjdHguY29tbWFuZCgnXy5ldmFsIDxleHByOnRleHQ+JywgeyBhdXRob3JpdHk6IDUsIG5vUmVkaXJlY3Q6IHRydWUsIGhpZGRlbjogdHJ1ZSB9KVxyXG4gICAgICAgIC5vcHRpb24oJ2knLCAnT3V0cHV0IGFzIGltYWdlJylcclxuICAgICAgICAudXNlckZpZWxkcyhrb2lzaGlfY29yZV8xLlVzZXIuZmllbGRzKVxyXG4gICAgICAgIC5jaGFubmVsRmllbGRzKGtvaXNoaV9jb3JlXzEuQ2hhbm5lbC5maWVsZHMpXHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiwgb3B0aW9ucyB9LCBpbnB1dCkgPT4ge1xyXG4gICAgICAgIGxldCByZXM7XHJcbiAgICAgICAgY29uc3QgZXhwciA9IGBcXFxuICAgICAgICAoYXN5bmMgZnVuY3Rpb24gZigpIHtcbiAgICAgICAgICAgIHJldHVybiAke2lucHV0LmRlY29kZSgpfVxuICAgICAgICB9KSgpYDtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXZhbFxyXG4gICAgICAgICAgICByZXMgPSBhd2FpdCBldmFsKGV4cHIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICByZXMgPSBlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBvdXRwdXQgPSB1dGlsXzEuaW5zcGVjdChyZXMsIGZhbHNlLCAzKTtcclxuICAgICAgICBpZiAoIW9wdGlvbnMuaSlcclxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgICAgICBjb25zdCBwYWdlID0gYXdhaXQgY3R4LmFwcC5icm93c2VyLm5ld1BhZ2UoKTtcclxuICAgICAgICBjb25zdCBpbWcgPSBhd2FpdCBncmFwaF8xLnRleHQycG5nKHBhZ2UsIG91dHB1dCk7XHJcbiAgICAgICAgcGFnZS5jbG9zZSgpO1xyXG4gICAgICAgIHJldHVybiBgW0NROiBpbWFnZSwgZmlsZSA9IGJhc2U2NDovLyR7aW1nfV1gO1xyXG4gICAgfSk7XHJcbiAgICBjdHguY29tbWFuZCgnXy5zaCA8Y29tbWFuZDp0ZXh0PicsICfmiafooYxzaGVsbOWRveS7pCcsIHsgYXV0aG9yaXR5OiA1LCBub1JlZGlyZWN0OiB0cnVlIH0pXHJcbiAgICAgICAgLm9wdGlvbignaScsICdPdXRwdXQgYXMgaW1hZ2UnKVxyXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgb3B0aW9ucyB9LCBjbWQpID0+IHtcclxuICAgICAgICBjb25zdCBwID0gYXdhaXQgc2hlbGxfMS5kZWZhdWx0KGNtZC5kZWNvZGUoKSk7XHJcbiAgICAgICAgaWYgKCFvcHRpb25zLmkpXHJcbiAgICAgICAgICAgIHJldHVybiBwO1xyXG4gICAgICAgIGNvbnN0IHBhZ2UgPSBhd2FpdCBjdHguYXBwLmJyb3dzZXIubmV3UGFnZSgpO1xyXG4gICAgICAgIGNvbnN0IGltZyA9IGF3YWl0IGdyYXBoXzEudGV4dDJwbmcocGFnZSwgcCk7XHJcbiAgICAgICAgcGFnZS5jbG9zZSgpO1xyXG4gICAgICAgIHJldHVybiBgW0NROmltYWdlLGZpbGU9YmFzZTY0Oi8vJHtpbWd9XWA7XHJcbiAgICB9KTtcclxuICAgIGN0eC5jb21tYW5kKCdfLnNodXRkb3duJywgJ+WFs+mXreacuuWZqOS6uicsIHsgYXV0aG9yaXR5OiA1LCBub1JlZGlyZWN0OiB0cnVlIH0pXHJcbiAgICAgICAgLmFjdGlvbigoKSA9PiB7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5wbV9pZClcclxuICAgICAgICAgICAgICAgIGNoaWxkX3Byb2Nlc3NfMS5kZWZhdWx0LmV4ZWMoYHBtMiBzdG9wICR7cHJvY2Vzcy5lbnYucG1faWR9YCk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgwKTtcclxuICAgICAgICB9LCAzMDAwKTtcclxuICAgICAgICByZXR1cm4gJ0V4aXRpbmcgaW4gMyBzZWNzLi4uJztcclxuICAgIH0pO1xyXG4gICAgY3R4LmNvbW1hbmQoJ18ucmVzdGFydCcsICfph43lkK/mnLrlmajkuronLCB7IGF1dGhvcml0eTogNSwgbm9SZWRpcmVjdDogdHJ1ZSB9KVxyXG4gICAgICAgIC5hY3Rpb24oKCkgPT4ge1xyXG4gICAgICAgIGlmICghcHJvY2Vzcy5lbnYucG1faWQpXHJcbiAgICAgICAgICAgIHJldHVybiAnQ2Fubm90IHJlc3RhcnQ6IG5vdCBwbTIgZW52aXJvbm1lbnQnO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBjaGlsZF9wcm9jZXNzXzEuZGVmYXVsdC5leGVjKGBwbTIgcmVzdGFydCAke3Byb2Nlc3MuZW52LnBtX2lkfWApO1xyXG4gICAgICAgIH0sIDMwMDApO1xyXG4gICAgICAgIHJldHVybiAnUmVzdGFydGluZyBpbiAzIHNlY3MuLi4nO1xyXG4gICAgfSk7XHJcbiAgICBjdHguc2VsZWN0KCdwbGF0Zm9ybScpLmNvbW1hbmQoJ18ubGVhdmUnLCAn6YCA5Ye66K+l576kJywgeyBub1JlZGlyZWN0OiB0cnVlIH0pXHJcbiAgICAgICAgLnVzZXJGaWVsZHMoWydhdXRob3JpdHknXSlcclxuICAgICAgICAuY2hlY2soY2hlY2tHcm91cEFkbWluKVxyXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9KSA9PiB7XHJcbiAgICAgICAgYXdhaXQgc2Vzc2lvbi5ib3QuJHNldEdyb3VwTGVhdmUoc2Vzc2lvbi5ncm91cElkKTtcclxuICAgIH0pO1xyXG4gICAgY3R4LmNvbW1hbmQoJ18uc2V0UHJpdiA8dXNlcklkPiA8YXV0aG9yaXR5PicsICforr7nva7nlKjmiLfmnYPpmZAnLCB7IGF1dGhvcml0eTogNSwgbm9SZWRpcmVjdDogdHJ1ZSB9KVxyXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9LCB1c2VySWQsIGF1dGhvcml0eSkgPT4ge1xyXG4gICAgICAgIGlmIChhdXRob3JpdHkgPT09ICdudWxsJykge1xyXG4gICAgICAgICAgICBhd2FpdCBjdHguZGF0YWJhc2Uuc2V0VXNlcihzZXNzaW9uLnBsYXRmb3JtLCB1c2VySWQsIHsgZmxhZzoga29pc2hpX2NvcmVfMS5Vc2VyLkZsYWcuaWdub3JlIH0pO1xyXG4gICAgICAgICAgICBhdXRob3JpdHkgPSAnMCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBhd2FpdCBjdHguZGF0YWJhc2Uuc2V0VXNlcihzZXNzaW9uLnBsYXRmb3JtLCB1c2VySWQsIHsgZmxhZzogMCB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXdhaXQgc2Vzc2lvbi5hcHAuZGF0YWJhc2Uuc2V0VXNlcihzZXNzaW9uLnBsYXRmb3JtLCB1c2VySWQsIHsgYXV0aG9yaXR5OiArYXV0aG9yaXR5IH0pO1xyXG4gICAgICAgIHJldHVybiBgU2V0ICR7c2Vzc2lvbi5wbGF0Zm9ybX06JHt1c2VySWR9IHRvICR7YXV0aG9yaXR5fWA7XHJcbiAgICB9KTtcclxuICAgIGN0eC5jb21tYW5kKCdfLmJvYXJkY2FzdCA8bWVzc2FnZTp0ZXh0PicsICflhajmnI3lub/mkq0nLCB7IGF1dGhvcml0eTogNSwgbm9SZWRpcmVjdDogdHJ1ZSB9KVxyXG4gICAgICAgIC5vcHRpb24oJ2ZvcmNlZCcsICctZiDml6Dop4Ygc2lsZW50IOagh+etvui/m+ihjOW5v+aSrScpXHJcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBvcHRpb25zLCBzZXNzaW9uIH0sIG1lc3NhZ2UpID0+IHtcclxuICAgICAgICBpZiAoIW1lc3NhZ2UpXHJcbiAgICAgICAgICAgIHJldHVybiAn6K+36L6T5YWl6KaB5Y+R6YCB55qE5paH5pys44CCJztcclxuICAgICAgICBsZXQgZ3JvdXBzID0gYXdhaXQgY3R4LmRhdGFiYXNlLmdldEFzc2lnbmVkQ2hhbm5lbHMoWydpZCcsICdmbGFnJ10pO1xyXG4gICAgICAgIGlmICghb3B0aW9ucy5mb3JjZWQpIHtcclxuICAgICAgICAgICAgZ3JvdXBzID0gZ3JvdXBzLmZpbHRlcigoZykgPT4gIShnLmZsYWcgJiBrb2lzaGlfY29yZV8xLkNoYW5uZWwuRmxhZy5zaWxlbnQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZ3JvdXBzLmZvckVhY2goKGdyb3VwKSA9PiB7XHJcbiAgICAgICAgICAgIHNlc3Npb24uYm90LnNlbmRNZXNzYWdlKGdyb3VwLmlkLCBtZXNzYWdlKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgY3R4LmNvbW1hbmQoJ2NvbnRleHRpZnkgPGNvbW1hbmQ6dGV4dD4nLCAn5Zyo54m55a6a5LiK5LiL5paH5Lit6Kem5Y+R5oyH5LukJywgeyBhdXRob3JpdHk6IDQsIG5vUmVkaXJlY3Q6IHRydWUgfSk7XHJcbiAgICBjdHguY29tbWFuZCgnXy5kZWFjdGl2YXRlJywgJ+WcqOe+pOWGheemgeeUqCcsIHsgbm9SZWRpcmVjdDogdHJ1ZSB9KVxyXG4gICAgICAgIC51c2VyRmllbGRzKFsnYXV0aG9yaXR5J10pXHJcbiAgICAgICAgLmNoZWNrKGNoZWNrR3JvdXBBZG1pbilcclxuICAgICAgICAuY2hhbm5lbEZpZWxkcyhbJ2ZsYWcnXSlcclxuICAgICAgICAuYWN0aW9uKCh7IHNlc3Npb24gfSkgPT4ge1xyXG4gICAgICAgIHNlc3Npb24uY2hhbm5lbC5mbGFnIHw9IGtvaXNoaV9jb3JlXzEuQ2hhbm5lbC5GbGFnLmlnbm9yZTtcclxuICAgICAgICByZXR1cm4gJ0RlYWN0aXZhdGVkJztcclxuICAgIH0pO1xyXG4gICAgY3R4LmNvbW1hbmQoJ18uYWN0aXZhdGUnLCAn5Zyo576k5YaF5ZCv55SoJywgeyBub1JlZGlyZWN0OiB0cnVlIH0pXHJcbiAgICAgICAgLnVzZXJGaWVsZHMoWydhdXRob3JpdHknXSlcclxuICAgICAgICAuY2hlY2soY2hlY2tHcm91cEFkbWluKVxyXG4gICAgICAgIC5jaGFubmVsRmllbGRzKFsnZmxhZyddKVxyXG4gICAgICAgIC5hY3Rpb24oKHsgc2Vzc2lvbiB9KSA9PiB7XHJcbiAgICAgICAgc2Vzc2lvbi5jaGFubmVsLmZsYWcgJj0gfmtvaXNoaV9jb3JlXzEuQ2hhbm5lbC5GbGFnLmlnbm9yZTtcclxuICAgICAgICByZXR1cm4gJ0FjdGl2YXRlZCc7XHJcbiAgICB9KTtcclxuICAgIGN0eC5jb21tYW5kKCdfLnN3aXRjaCA8Y29tbWFuZD4nLCAn5ZCv55SoL+WBnOeUqOWRveS7pCcsIHsgbm9SZWRpcmVjdDogdHJ1ZSB9KVxyXG4gICAgICAgIC51c2VyRmllbGRzKFsnYXV0aG9yaXR5J10pXHJcbiAgICAgICAgLmNoYW5uZWxGaWVsZHMoWydkaXNhbGxvd2VkQ29tbWFuZHMnXSlcclxuICAgICAgICAuY2hlY2soY2hlY2tHcm91cEFkbWluKVxyXG4gICAgICAgIC5hY3Rpb24oKHsgc2Vzc2lvbiB9LCBjb21tYW5kKSA9PiB7XHJcbiAgICAgICAgc2Vzc2lvbi5jaGFubmVsLmRpc2FsbG93ZWRDb21tYW5kcyA9IHNlc3Npb24uY2hhbm5lbC5kaXNhbGxvd2VkQ29tbWFuZHMgfHwgW107XHJcbiAgICAgICAgaWYgKHNlc3Npb24uY2hhbm5lbC5kaXNhbGxvd2VkQ29tbWFuZHMuaW5jbHVkZXMoY29tbWFuZCkpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2V0ID0gbmV3IFNldChzZXNzaW9uLmNoYW5uZWwuZGlzYWxsb3dlZENvbW1hbmRzKTtcclxuICAgICAgICAgICAgc2V0LmRlbGV0ZShjb21tYW5kKTtcclxuICAgICAgICAgICAgc2Vzc2lvbi5jaGFubmVsLmRpc2FsbG93ZWRDb21tYW5kcyA9IEFycmF5LmZyb20oc2V0KTtcclxuICAgICAgICAgICAgcmV0dXJuIGAke2NvbW1hbmR9IOWRveS7pOS4uuWQr+eUqOeKtuaAgeOAgmA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNlc3Npb24uY2hhbm5lbC5kaXNhbGxvd2VkQ29tbWFuZHMucHVzaChjb21tYW5kKTtcclxuICAgICAgICByZXR1cm4gYCR7Y29tbWFuZH0g5ZG95Luk5Li656aB55So54q25oCB44CCYDtcclxuICAgIH0pO1xyXG4gICAgY3R4LmNvbW1hbmQoJ18ubXV0ZSA8dXNlcj4gPHBlcmlvZFNlY3M+JywgJ+emgeiogOeUqOaItycsIHsgbm9SZWRpcmVjdDogdHJ1ZSB9KVxyXG4gICAgICAgIC51c2VyRmllbGRzKFsnYXV0aG9yaXR5J10pXHJcbiAgICAgICAgLmNoZWNrKGNoZWNrR3JvdXBBZG1pbilcclxuICAgICAgICAuYWN0aW9uKCh7IHNlc3Npb24gfSwgdXNlciwgc2VjcyA9ICc2MDAwMDAnKSA9PiBzZXNzaW9uLmJvdC4kc2V0R3JvdXBCYW4oc2Vzc2lvbi5ncm91cElkLCB1c2VyLCBwYXJzZUludChzZWNzLCAxMCkpKTtcclxuICAgIGN0eC5vbignbWVzc2FnZScsIGFzeW5jIChzZXNzaW9uKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZ3JvdXBOYW1lID0gYXdhaXQgZ2V0R3JvdXBOYW1lKHNlc3Npb24pO1xyXG4gICAgICAgIGNvbnN0IHNlbmRlck5hbWUgPSBgJHtzZXNzaW9uLnVzZXJuYW1lfSgke3Nlc3Npb24udXNlcklkfSlgO1xyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBhd2FpdCBmb3JtYXRNZXNzYWdlKHNlc3Npb24pO1xyXG4gICAgICAgIGxvZ2dlci5pbmZvKGBbJHtncm91cE5hbWV9XSAke3NlbmRlck5hbWV9OiAke21lc3NhZ2V9YCk7XHJcbiAgICAgICAgaWYgKCFzZXNzaW9uLmdyb3VwSWQpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBpZiAoc2Vzc2lvbi5jb250ZW50ID09PSAnPl8uYWN0aXZhdGUnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBjdHguZGF0YWJhc2UuZ2V0VXNlcihzZXNzaW9uLnBsYXRmb3JtLCBzZXNzaW9uLnVzZXJJZCk7XHJcbiAgICAgICAgICAgIGlmICh1c2VyLmF1dGhvcml0eSA+PSA0IHx8IHNlc3Npb24uYXV0aG9yLnJvbGVzLmluY2x1ZGVzKCdhZG1pbicpIHx8IHNlc3Npb24uYXV0aG9yLnJvbGVzLmluY2x1ZGVzKCdvd25lcicpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBncm91cCA9IGF3YWl0IGN0eC5kYXRhYmFzZS5nZXRDaGFubmVsKHNlc3Npb24ucGxhdGZvcm0sIHNlc3Npb24uZ3JvdXBJZCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmbGFnID0gZ3JvdXAuZmxhZyAmICh+a29pc2hpX2NvcmVfMS5DaGFubmVsLkZsYWcuaWdub3JlKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IGN0eC5kYXRhYmFzZS5zZXRDaGFubmVsKHNlc3Npb24ucGxhdGZvcm0sIHNlc3Npb24uZ3JvdXBJZCwgeyBmbGFnIH0pO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgc2Vzc2lvbi5zZW5kKCdBY3RpdmF0ZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBhd2FpdCBzZXNzaW9uLnNlbmQoJ+aCqOayoeacieadg+mZkOaJp+ihjOivpeaTjeS9nCcpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgY3R4Lm9uKCdiZWZvcmUtc2VuZCcsIChzZXNzaW9uKSA9PiB7XHJcbiAgICAgICAgUHJvbWlzZS5hbGwoW1xyXG4gICAgICAgICAgICBnZXRHcm91cE5hbWUoc2Vzc2lvbiksXHJcbiAgICAgICAgICAgIGZvcm1hdE1lc3NhZ2Uoc2Vzc2lvbiksXHJcbiAgICAgICAgXSkudGhlbigoW2dyb3VwTmFtZSwgbWVzc2FnZV0pID0+IGxvZ2dlci5pbmZvKGBzZW5kIFske2dyb3VwTmFtZX1dICR7c2Vzc2lvbi5zZWxmSWR9OiAke21lc3NhZ2V9YCkpO1xyXG4gICAgfSk7XHJcbiAgICBjdHgub24oJ2dyb3VwLW1lbWJlci9iYW4nLCAoc2Vzc2lvbikgPT4ge1xyXG4gICAgICAgIC8vIFRPRE8gaGFuZGxlIGF1dG8tbGVhdmU/XHJcbiAgICAgICAgaWYgKHNlc3Npb24udXNlcklkLnRvU3RyaW5nKCkgPT09IHNlc3Npb24uc2VsZklkLnRvU3RyaW5nKCkpXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHNlc3Npb24pO1xyXG4gICAgfSk7XHJcbiAgICBjdHgub24oJ2dyb3VwLW1lbWJlci1hZGRlZCcsIGFzeW5jIChzZXNzaW9uKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHNlc3Npb24uYXBwLmRhdGFiYXNlLmdldENoYW5uZWwoc2Vzc2lvbi5wbGF0Zm9ybSwgc2Vzc2lvbi5ncm91cElkKTtcclxuICAgICAgICBsb2dnZXIuaW5mbygnRXZlbnQuR3JvdXBfSW5jcmVhc2UnLCBzZXNzaW9uLCBkYXRhKTtcclxuICAgICAgICBpZiAoZGF0YS53ZWxjb21lTXNnKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHNlc3Npb24uc2VuZChkYXRhLndlbGNvbWVNc2cucmVwbGFjZSgvJUAvZ21pLCBgW0NROmF0LHFxPSR7c2Vzc2lvbi51c2VySWR9YCkpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgY3R4Lm9uKCdncm91cC1tZW1iZXItZGVsZXRlZCcsIGFzeW5jIChzZXNzaW9uKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdWRvYyA9IGF3YWl0IGN0eC5kYXRhYmFzZS5nZXRVc2VyKHNlc3Npb24ucGxhdGZvcm0sIHNlc3Npb24udXNlcklkKTtcclxuICAgICAgICBsb2dnZXIuaW5mbygnRXZlbnQuR3JvdXBfRGVjcmVhc2UnLCBzZXNzaW9uLCB1ZG9jKTtcclxuICAgICAgICBzZXNzaW9uLnNlbmQoYCR7c2Vzc2lvbi51c2VybmFtZX0g6YCA5Ye65LqG576k6IGK44CCYCk7XHJcbiAgICB9KTtcclxuICAgIGN0eC5vbignYmVmb3JlLWNvbW1hbmQnLCAoeyBzZXNzaW9uLCBjb21tYW5kIH0pID0+IHtcclxuICAgICAgICBpZiAoIXNlc3Npb24uY2hhbm5lbClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpZiAoKHNlc3Npb24uY2hhbm5lbC5kaXNhbGxvd2VkQ29tbWFuZHMgfHwgW10pLmluY2x1ZGVzKGNvbW1hbmQubmFtZSkpXHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgIH0pO1xyXG4gICAgY3R4Lm9uKCdiZWZvcmUtYXR0YWNoLXVzZXInLCAoc2Vzc2lvbiwgZmllbGRzKSA9PiB7XHJcbiAgICAgICAgZmllbGRzLmFkZCgnaWQnKTtcclxuICAgIH0pO1xyXG4gICAgY3R4Lm9uKCdiZWZvcmUtYXR0YWNoLWNoYW5uZWwnLCAoc2Vzc2lvbiwgZmllbGRzKSA9PiB7XHJcbiAgICAgICAgZmllbGRzLmFkZCgnZGlzYWxsb3dlZENvbW1hbmRzJyk7XHJcbiAgICB9KTtcclxuICAgIGN0eC5hcHAub24oJ2ZyaWVuZC1yZXF1ZXN0JywgKHNlc3Npb24pID0+IHNlc3Npb24uYm90LnNldEZyaWVuZEFkZFJlcXVlc3Qoc2Vzc2lvbi5mbGFnLCB0cnVlKSk7XHJcbiAgICBjdHguYXBwLm9uKCdncm91cC1yZXF1ZXN0JywgYXN5bmMgKHNlc3Npb24pID0+IHtcclxuICAgICAgICBjb25zdCB1ZG9jID0gYXdhaXQgY3R4LmRhdGFiYXNlLmdldFVzZXIoc2Vzc2lvbi5wbGF0Zm9ybSwgc2Vzc2lvbi51c2VySWQpO1xyXG4gICAgICAgIGlmICgoY29uZmlnLnB1YmxpYyB8fCBbXSkuaW5jbHVkZXMoYCR7c2Vzc2lvbi5wbGF0Zm9ybX06JHtzZXNzaW9uLnNlbGZJZH1gKSB8fCAodWRvYyA9PT0gbnVsbCB8fCB1ZG9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiB1ZG9jLmF1dGhvcml0eSkgPT09IDUpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ0FwcHJvdmUgSW52aXRlIFJlcXVlc3QnLCBzZXNzaW9uLCB1ZG9jKTtcclxuICAgICAgICAgICAgc2Vzc2lvbi5ib3Quc2V0R3JvdXBBZGRSZXF1ZXN0KHNlc3Npb24uZmxhZywgc2Vzc2lvbi5zdWJ0eXBlLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCdEZW5pZWQgSW52aXRlIFJlcXVlc3QnLCBzZXNzaW9uLCB1ZG9jKTtcclxuICAgICAgICAgICAgc2Vzc2lvbi5ib3Quc2V0R3JvdXBBZGRSZXF1ZXN0KHNlc3Npb24uZmxhZywgc2Vzc2lvbi5zdWJ0eXBlLCAn5q2k6LSm5Y+35LiN5a+55aSW5byA5pS+77yM6K+35L2/55So5YW25LuW6LSm5Y+344CCJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBjdHgub24oJ2Nvbm5lY3QnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYyA9IGN0eC5kYXRhYmFzZS5tb25nby5jb2xsZWN0aW9uKCdtZXNzYWdlJyk7XHJcbiAgICAgICAgbG9nZ2VyLmluZm8oJ0Vuc3VyaW5nIGluZGV4Li4uJyk7XHJcbiAgICAgICAgYXdhaXQgYy5jcmVhdGVJbmRleCh7IHRpbWU6IC0xLCBncm91cDogMSwgdXNlcjogMSB9KTtcclxuICAgICAgICBsb2dnZXIuaW5mbygnRG9uZS4nKTtcclxuICAgICAgICBjdHguY29tbWFuZCgnXy5yZWNhbGwnLCAn5pKk5Zue5raI5oGvJylcclxuICAgICAgICAgICAgLnVzZXJGaWVsZHMoWydhdXRob3JpdHknXSlcclxuICAgICAgICAgICAgLmNoZWNrKGNoZWNrR3JvdXBBZG1pbilcclxuICAgICAgICAgICAgLm9wdGlvbignY291bnQnLCAnLWMgPGNvdW50PiDmlbDph48nLCB7IGZhbGxiYWNrOiAxIH0pXHJcbiAgICAgICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiwgb3B0aW9ucyB9KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSBhd2FpdCBzZXNzaW9uLmFwcC5kYXRhYmFzZS5nZXRVc2VyKHNlc3Npb24ucGxhdGZvcm0sIHNlc3Npb24uc2VsZklkLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICBjb25zdCBtc2dzID0gYXdhaXQgYy5maW5kKHsgZ3JvdXA6IHNlc3Npb24uZ3JvdXBJZCwgc2VuZGVyOiArc2VsZi5pZCB9KS5zb3J0KHsgdGltZTogLTEgfSkubGltaXQob3B0aW9ucy5jb3VudCkudG9BcnJheSgpO1xyXG4gICAgICAgICAgICBsb2dnZXIuaW5mbygnZGVsZXRpbmcgbWVzc2FnZTogJW8nLCBtc2dzKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBtc2cgb2YgbXNncylcclxuICAgICAgICAgICAgICAgIGF3YWl0IHNlc3Npb24uYm90LmRlbGV0ZU1lc3NhZ2Uoc2Vzc2lvbi5ncm91cElkLCBtc2cuaWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGN0eC5jb21tYW5kKCdfLnN0YXQgW2R1cmF0aW9uXScsICdzdGF0JylcclxuICAgICAgICAgICAgLm9wdGlvbigndG90YWwnLCAnLXQgVG90YWwnKVxyXG4gICAgICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24sIG9wdGlvbnMgfSwgZHVyYXRpb24gPSAnMWRheScpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgWywgbiA9ICcxJywgYV0gPSAvKFxcZCspPyhcXHcrKS8uZXhlYyhkdXJhdGlvbik7XHJcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gYCR7c2Vzc2lvbi5wbGF0Zm9ybX06JHtzZXNzaW9uLmdyb3VwSWR9YDtcclxuICAgICAgICAgICAgY29uc3Qgc2VsZiA9IGF3YWl0IHNlc3Npb24uYXBwLmRhdGFiYXNlLmdldFVzZXIoc2Vzc2lvbi5wbGF0Zm9ybSwgc2Vzc2lvbi5zZWxmSWQudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRpbWUgPSBvcHRpb25zLnRvdGFsID8ge30gOiB7IHRpbWU6IHsgJGd0OiBtb21lbnRfMS5kZWZhdWx0KCkuYWRkKC1uLCBhKS50b0RhdGUoKSB9IH07XHJcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsU2VuZENvdW50ID0gYXdhaXQgYy5maW5kKHsgLi4udGltZSwgc2VuZGVyOiArc2VsZi5pZCB9KS5jb3VudCgpO1xyXG4gICAgICAgICAgICBjb25zdCBncm91cFNlbmRDb3VudCA9IGF3YWl0IGMuZmluZCh7IC4uLnRpbWUsIGdyb3VwLCBzZW5kZXI6ICtzZWxmLmlkIH0pLmNvdW50KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsUmVjZWl2ZUNvdW50ID0gYXdhaXQgYy5maW5kKHsgLi4udGltZSwgc2VuZGVyOiB7ICRuZTogK3NlbGYuaWQgfSB9KS5jb3VudCgpO1xyXG4gICAgICAgICAgICBjb25zdCBncm91cFJlY2VpdmVDb3VudCA9IGF3YWl0IGMuZmluZCh7IC4uLnRpbWUsIGdyb3VwLCBzZW5kZXI6IHsgJG5lOiArc2VsZi5pZCB9IH0pLmNvdW50KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBg57uf6K6h5L+h5oGvJHtvcHRpb25zLnRvdGFsID8gJ++8iOaAu+iuoe+8iScgOiBg77yIJHtkdXJhdGlvbn3vvIlgfVxu5Y+R6YCB5raI5oGvJHt0b3RhbFNlbmRDb3VudH3mnaHvvIzmnKznvqQke2dyb3VwU2VuZENvdW50feadoeOAglxu5pS25Yiw5raI5oGvJHt0b3RhbFJlY2VpdmVDb3VudH3mnaHvvIzmnKznvqQke2dyb3VwUmVjZWl2ZUNvdW50feadoeOAgmA7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY3R4LmNvbW1hbmQoJ18ucmFuayBbZHVyYXRpb25dJywgJ3JhbmsnKVxyXG4gICAgICAgICAgICAub3B0aW9uKCd0b3RhbCcsICdUb3RhbCcpXHJcbiAgICAgICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiwgb3B0aW9ucyB9LCBkdXJhdGlvbiA9ICcxZGF5JykgPT4ge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIGNvbnN0IFssIG4gPSAnMScsIGFdID0gLyhcXGQrKT8oXFx3KykvLmV4ZWMoZHVyYXRpb24pO1xyXG4gICAgICAgICAgICBjb25zdCBncm91cCA9IGAke3Nlc3Npb24ucGxhdGZvcm19OiR7c2Vzc2lvbi5ncm91cElkfWA7XHJcbiAgICAgICAgICAgIGNvbnN0ICRtYXRjaCA9IG9wdGlvbnMudG90YWxcclxuICAgICAgICAgICAgICAgID8geyBncm91cCB9XHJcbiAgICAgICAgICAgICAgICA6IHsgdGltZTogeyAkZ3Q6IG1vbWVudF8xLmRlZmF1bHQoKS5hZGQoLW4sIGEpLnRvRGF0ZSgpIH0sIGdyb3VwIH07XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGMuYWdncmVnYXRlKFtcclxuICAgICAgICAgICAgICAgIHsgJG1hdGNoIH0sXHJcbiAgICAgICAgICAgICAgICB7ICRncm91cDogeyBfaWQ6ICckc2VuZGVyJywgY291bnQ6IHsgJHN1bTogMSB9IH0gfSxcclxuICAgICAgICAgICAgICAgIHsgJHNvcnQ6IHsgY291bnQ6IC0xIH0gfSxcclxuICAgICAgICAgICAgICAgIHsgJGxpbWl0OiAxMCB9LFxyXG4gICAgICAgICAgICBdKS50b0FycmF5KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHVkb2NzID0gYXdhaXQgc2Vzc2lvbi5hcHAuZGF0YWJhc2UuZ2V0VXNlcignaWQnLCByZXN1bHQubWFwKChyKSA9PiByLl9pZCksIFtzZXNzaW9uLnBsYXRmb3JtLCAnbmFtZSddKTtcclxuICAgICAgICAgICAgY29uc3QgdWRpY3QgPSB7fTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSByZXN1bHRbaV07XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIHVkaWN0W3IuX2lkXSA9IGF3YWl0IHNlc3Npb24uYm90LmdldEdyb3VwTWVtYmVyKHNlc3Npb24uZ3JvdXBJZCwgdWRvY3NbaV1bc2Vzc2lvbi5wbGF0Zm9ybV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB1ZGljdFtyLl9pZF0gPSB7IHVzZXJuYW1lOiAoKF9hID0gdWRvY3NbaV0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uYW1lKSB8fCByLl9pZCwgbmlja25hbWU6ICcnIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGBcXFxu576k5oiQ5ZGY5Y+R6KiA5o6S6KGMJHtvcHRpb25zLnRvdGFsID8gJ++8iOWFseiuoe+8iScgOiBg77yIJHtkdXJhdGlvbn3vvIlgfVxuJHtyZXN1bHQubWFwKChyKSA9PiBgJHt1ZGljdFtyLl9pZF0ubmlja25hbWUgfHwgdWRpY3Rbci5faWRdLnVzZXJuYW1lfSAke3IuY291bnR95p2hYCkuam9pbignXFxuJyl9YDtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoY29uZmlnLnJlY29yZE1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgY3R4Lm1pZGRsZXdhcmUoKHNlc3Npb24sIG5leHQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghc2Vzc2lvbi5ncm91cElkKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0KCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBncm91cCA9IGAke3Nlc3Npb24ucGxhdGZvcm19OiR7c2Vzc2lvbi5ncm91cElkfWA7XHJcbiAgICAgICAgICAgICAgICBjLmluc2VydE9uZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogc2Vzc2lvbi5jb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICBzZW5kZXI6IHNlc3Npb24udXNlci5pZCxcclxuICAgICAgICAgICAgICAgICAgICB0aW1lOiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBzZXNzaW9uLm1lc3NhZ2VJZCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY3R4Lm9uKCdzZW5kJywgYXN5bmMgKHNlc3Npb24pID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghc2Vzc2lvbi5ncm91cElkKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gYCR7c2Vzc2lvbi5wbGF0Zm9ybX06JHtzZXNzaW9uLmdyb3VwSWR9YDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHVkb2MgPSBhd2FpdCBzZXNzaW9uLmFwcC5kYXRhYmFzZS5nZXRVc2VyKHNlc3Npb24ucGxhdGZvcm0sIHNlc3Npb24uc2VsZklkLnRvU3RyaW5nKCksIFsnaWQnXSk7XHJcbiAgICAgICAgICAgICAgICBjLmluc2VydE9uZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGltZTogbmV3IERhdGUoKSxcclxuICAgICAgICAgICAgICAgICAgICBzZW5kZXI6ICt1ZG9jLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHNlc3Npb24uY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICBpZDogc2Vzc2lvbi5tZXNzYWdlSWQsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn07XHJcbmV4cG9ydHMuYXBwbHkgPSBhcHBseTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVzeWJveC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmFwcGx5ID0gdm9pZCAwO1xyXG5jb25zdCBheGlvc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJheGlvc1wiKSk7XHJcbmZ1bmN0aW9uIGFwcGx5KGN0eCkge1xyXG4gICAgY3R4LmNvbW1hbmQoJ3Rvb2xzL2NhbGMgPGV4cHI6dGV4dD4nLCAnY2FsYycsIHsgbWluSW50ZXJ2YWw6IDIwMDAgfSlcclxuICAgICAgICAuc2hvcnRjdXQoL15cXD8oW1xcc1xcU10rKSQvLCB7IGFyZ3M6IFsnJDEnXSB9KVxyXG4gICAgICAgIC5vcHRpb24oJ2Z1bGwnLCAnLWYsIC0tZnVsbCBmdWxsIG91dHB1dCcpXHJcbiAgICAgICAgLm9wdGlvbigncmF3JywgJy1yLCAtLXJhdyByYXcgaW5wdXQnLCB7IGF1dGhvcml0eTogNSB9KVxyXG4gICAgICAgIC5leGFtcGxlKCdjYWxjIDErMScpXHJcbiAgICAgICAgLmV4YW1wbGUoJ2NhbGMgU29sdmVbeF4yKzE9PTAse3h9XScpXHJcbiAgICAgICAgLmV4YW1wbGUoJ2NhbGMgRmFjdG9ySW50ZWdlclsyMzMzMzNdJylcclxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24sIG9wdGlvbnMgfSwgZXhwcikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgZGF0YTogc3ZnIH0gPSBhd2FpdCBheGlvc18xLmRlZmF1bHQucG9zdCgnaHR0cDovLzEyNy4wLjAuMToxMDM3OC8nLCB7XHJcbiAgICAgICAgICAgIHJhdzogb3B0aW9ucy5yYXcgPyAnMScgOiBudWxsLCBpbnB1dDogZXhwci5kZWNvZGUoKSwgdHlwZTogb3B0aW9ucy5mdWxsID8gJ0ltYWdlJyA6ICdSZXN1bHQnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICghc3ZnLnN0YXJ0c1dpdGgoJzw/eG1sJykpXHJcbiAgICAgICAgICAgIHJldHVybiBzdmc7XHJcbiAgICAgICAgY29uc3QgcGFnZSA9IGF3YWl0IHNlc3Npb24uYXBwLmJyb3dzZXIubmV3UGFnZSgpO1xyXG4gICAgICAgIGF3YWl0IHBhZ2Uuc2V0Q29udGVudChzdmcpO1xyXG4gICAgICAgIGNvbnN0IGVsZSA9IGF3YWl0IHBhZ2UuJCgnc3ZnJyk7XHJcbiAgICAgICAgY29uc3QgYnVmZmVyID0gYXdhaXQgcGFnZS5zY3JlZW5zaG90KHtcclxuICAgICAgICAgICAgY2xpcDogYXdhaXQgZWxlLmJvdW5kaW5nQm94KCksXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcGFnZS5jbG9zZSgpO1xyXG4gICAgICAgIHJldHVybiBgW0NROmltYWdlLGZpbGU9YmFzZTY0Oi8vJHtidWZmZXIudG9TdHJpbmcoJ2Jhc2U2NCcpfV1gO1xyXG4gICAgfSk7XHJcbiAgICBjdHguY29tbWFuZCgndG9vbHMvY2FsYy56ZWJyYSA8aW1hZ2U6aW1hZ2U+JywgJ0hvcnNlIHRvIFplYnJhJywgeyBtaW5JbnRlcnZhbDogMjAwMCB9KTtcclxufVxyXG5leHBvcnRzLmFwcGx5ID0gYXBwbHk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhbGMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5hcHBseSA9IHZvaWQgMDtcclxuY29uc3Qgc3VwZXJhZ2VudF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJzdXBlcmFnZW50XCIpKTtcclxuY29uc3QgbG9kYXNoXzEgPSByZXF1aXJlKFwibG9kYXNoXCIpO1xyXG5mdW5jdGlvbiBhcHBseShhcHApIHtcclxuICAgIGFwcC5jb21tYW5kKCdvaScsICdPSSByZWxhdGVkJyk7XHJcbiAgICBhcHAuY29tbWFuZCgnb2kvY2YnLCAnQ29kZWZvcmNlcycpO1xyXG4gICAgYXBwLmNvbW1hbmQoJ29pL2NmLnVzZXIgPG5hbWU+JywgJ0NvZGVmb3JjZXMgVXNlcicsIHsgbWluSW50ZXJ2YWw6IDMwMDAgfSlcclxuICAgICAgICAuYWN0aW9uKGFzeW5jIChfLCBuYW1lKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgc3VwZXJhZ2VudF8xLmRlZmF1bHQuZ2V0KGBodHRwczovL2NvZGVmb3JjZXMuY29tL2FwaS91c2VyLmluZm8/aGFuZGxlcz0ke25hbWV9YCkuY2F0Y2goKCkgPT4geyB9KTtcclxuICAgICAgICBpZiAoIXJlcylcclxuICAgICAgICAgICAgcmV0dXJuICdDRiDmjILkuobvvIEnO1xyXG4gICAgICAgIGlmIChyZXMuYm9keS5zdGF0dXMgPT09ICdGQUlMRUQnKVxyXG4gICAgICAgICAgICByZXR1cm4gJ+ayoei/meS4quS6uiEnO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlcy5ib2R5LnJlc3VsdFswXTtcclxuICAgICAgICByZXR1cm4gYCR7cmVzdWx0LmhhbmRsZX0gJHtyZXN1bHQuZmlyc3ROYW1lIHx8ICcnfSAke3Jlc3VsdC5sYXN0TmFtZSB8fCAnJ30gJHtyZXN1bHQub3JnYW5pemF0aW9uIHx8ICcnfVxuW0NROmltYWdlLGZpbGU9aHR0cHM6JHtyZXN1bHQuYXZhdGFyfV1cblJhdGluZzogJHtyZXN1bHQucmF0aW5nfVxuUmFuazogJHtyZXN1bHQucmFua31cbk1heFJhdGluZzogJHtyZXN1bHQubWF4UmF0aW5nfVxuTWF4UmFuazogJHtyZXN1bHQubWF4UmFua31gO1xyXG4gICAgfSk7XHJcbiAgICBhcHAuY29tbWFuZCgnb2kvY2YuY29udGVzdCcsICdDb2RlZm9yY2VzIENvbnRlc3QnLCB7IG1pbkludGVydmFsOiAzMDAwIH0pXHJcbiAgICAgICAgLmFjdGlvbihhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgc3VwZXJhZ2VudF8xLmRlZmF1bHQuZ2V0KCdodHRwczovL2NvZGVmb3JjZXMuY29tL2FwaS9jb250ZXN0Lmxpc3QnKS5jYXRjaCgoKSA9PiB7IH0pO1xyXG4gICAgICAgIGlmICghcmVzIHx8IHJlcy5ib2R5LnN0YXR1cyAhPT0gJ09LJylcclxuICAgICAgICAgICAgcmV0dXJuICdDRiDmjILkuobvvIEnO1xyXG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRlc3RzID0gbG9kYXNoXzEuZmlsdGVyKHJlcy5ib2R5LnJlc3VsdCwgKGNvbnRlc3QpID0+IGNvbnRlc3Quc3RhcnRUaW1lU2Vjb25kcyAqIDEwMDAgPiBub3cpO1xyXG4gICAgICAgIGxldCBtZXNzYWdlID0gJ+acgOi/keeahOavlOi1m++8mlxcbic7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IGNvbnRlc3RzLmxlbmd0aCAtIDE7IGkgPj0gTWF0aC5tYXgoY29udGVzdHMubGVuZ3RoIC0gNSwgMCk7IGktLSkge1xyXG4gICAgICAgICAgICBjb25zdCBjID0gY29udGVzdHNbaV07XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gYCR7Yy5uYW1lfSAke25ldyBEYXRlKGMuc3RhcnRUaW1lU2Vjb25kcyAqIDEwMDApLnRvTG9jYWxlU3RyaW5nKCl9XFxuYDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmFwcGx5ID0gYXBwbHk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvZGVmb3JjZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5hcHBseSA9IHZvaWQgMDtcclxuY29uc3Qgc3VwZXJhZ2VudF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJzdXBlcmFnZW50XCIpKTtcclxuZnVuY3Rpb24gYXBwbHkoYXBwKSB7XHJcbiAgICBhcHAuY29tbWFuZCgnZ2l0aHViL2RyZXNzIDxwYXRoPicsICdrb21laWppLXNhdG9yaS9EcmVzcycpXHJcbiAgICAgICAgLmV4YW1wbGUoJ2RyZXNzIHd1eGlhbnVjdy8wMDEuanBnJylcclxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSwgaWQpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwID0gYXdhaXQgc3VwZXJhZ2VudF8xLmRlZmF1bHQuZ2V0KGBodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvZ2gva29tZWlqaS1zYXRvcmkvRHJlc3MvJHtpZH1gKS5idWZmZXIoKTtcclxuICAgICAgICAgICAgYXdhaXQgc2Vzc2lvbi5zZW5kKGBbQ1E6aW1hZ2UsZmlsZT1iYXNlNjQ6Ly8ke3Jlc3AuYm9keS50b1N0cmluZygnYmFzZTY0Jyl9XWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZS50b1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuYXBwbHkgPSBhcHBseTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHJlc3MuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5hcHBseSA9IHZvaWQgMDtcclxuY29uc3Qga29pc2hpX2NvcmVfMSA9IHJlcXVpcmUoXCJrb2lzaGktY29yZVwiKTtcclxuY29uc3QgaXRlbV8xID0gcmVxdWlyZShcIi4uL2xpYi9pdGVtXCIpO1xyXG5rb2lzaGlfY29yZV8xLlVzZXIuZXh0ZW5kKCgpID0+ICh7XHJcbiAgICBjb2luOiAwLFxyXG4gICAgYmFja3BhY2s6IFtdLFxyXG59KSk7XHJcbmZ1bmN0aW9uIHN1bSguLi5hcmdzKSB7XHJcbiAgICBsZXQgcmVzdWx0ID0gMDtcclxuICAgIGZvciAoY29uc3QgYXJnIG9mIGFyZ3MpXHJcbiAgICAgICAgcmVzdWx0ICs9IGFyZztcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuZnVuY3Rpb24gYXBwbHkoYXBwKSB7XHJcbiAgICBhcHAuY29tbWFuZCgncHJvcGVydHknLCAn6LSi5Lqn57O757ufJyk7XHJcbiAgICBhcHAuY29tbWFuZCgncHJvcGVydHkvYmFja3BhY2snLCAn6IOM5YyFJylcclxuICAgICAgICAudXNlckZpZWxkcyhbJ2JhY2twYWNrJ10pXHJcbiAgICAgICAgLmFjdGlvbigoeyBzZXNzaW9uIH0pID0+IHtcclxuICAgICAgICBpZiAoIXNlc3Npb24udXNlci5iYWNrcGFjay5sZW5ndGgpXHJcbiAgICAgICAgICAgIHJldHVybiAn5L2g55qE6IOM5YyF5piv56m655qE77yBJztcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBg5L2g55qE6IOM5YyF5YWxJHtzdW0oLi4uc2Vzc2lvbi51c2VyLmJhY2twYWNrLm1hcCgoc2xvdCkgPT4gc2xvdC5jb3VudCkpfeS4queJqeWTgeOAgmAsXHJcbiAgICAgICAgICAgIC4uLnNlc3Npb24udXNlci5iYWNrcGFjay5tYXAoKHNsb3QpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtXzEuSXRlbXNbc2xvdC5pZF0gfHwgaXRlbV8xLkl0ZW1zLmZhbGxiYWNrO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke2l0ZW0ubmFtZX0gKiAke3Nsb3QuY291bnR9YDtcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgXS5qb2luKCdcXG4nKTtcclxuICAgIH0pO1xyXG4gICAgYXBwLmNvbW1hbmQoJ3Byb3BlcnR5L2NoZWNraW4nLCAn562+5YiwJywgeyBtYXhVc2FnZTogMSB9KVxyXG4gICAgICAgIC5zaG9ydGN1dCgn562+5YiwJywgeyBwcmVmaXg6IGZhbHNlIH0pXHJcbiAgICAgICAgLnVzZXJGaWVsZHMoWydjb2luJ10pXHJcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0pID0+IHtcclxuICAgICAgICBjb25zdCBhZGQgPSAyMCArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcclxuICAgICAgICBzZXNzaW9uLnVzZXIuY29pbiArPSBhZGQ7XHJcbiAgICAgICAgcmV0dXJuIGDnrb7liLDmiJDlip/vvIzojrflvpcke2FkZH3kuKrnoazluIHvvIjlhbHmnIkke3Nlc3Npb24udXNlci5jb2lufeS4qu+8iWA7XHJcbiAgICB9KTtcclxuICAgIGFwcC5jb21tYW5kKCdwcm9wZXJ0eS9wYXkgPHRhcmdldFVzZXJJZD4gPGNvdW50PicsICfovazotKYnLCB7IG5vUmVkaXJlY3Q6IHRydWUgfSlcclxuICAgICAgICAudXNlckZpZWxkcyhbJ2NvaW4nXSlcclxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSwgdGFyZ2V0LCBjb3VudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG4gPSBwYXJzZUludChjb3VudCwgMTApO1xyXG4gICAgICAgIGlmICghKE51bWJlci5pc1NhZmVJbnRlZ2VyKG4pICYmIG4gPiAwKSlcclxuICAgICAgICAgICAgcmV0dXJuICfkuI3lkIjms5XnmoTmlbDlgLzjgIInO1xyXG4gICAgICAgIGlmIChzZXNzaW9uLnVzZXIuY29pbiA8IG4pXHJcbiAgICAgICAgICAgIHJldHVybiAn5L2g5rKh5pyJ6Laz5aSf55qE56Gs5biB44CCJztcclxuICAgICAgICBpZiAoIXRhcmdldClcclxuICAgICAgICAgICAgcmV0dXJuICfmnKrmjIflrprnm67moIfjgIInO1xyXG4gICAgICAgIGNvbnN0IG5ld1Nlc3Npb24gPSBuZXcga29pc2hpX2NvcmVfMS5TZXNzaW9uKGFwcCwgc2Vzc2lvbik7XHJcbiAgICAgICAgbmV3U2Vzc2lvbi51c2VySWQgPSB0YXJnZXQ7XHJcbiAgICAgICAgbmV3U2Vzc2lvbi5hdXRob3IudXNlcklkID0gdGFyZ2V0O1xyXG4gICAgICAgIGRlbGV0ZSBuZXdTZXNzaW9uLnVzZXI7XHJcbiAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IG5ld1Nlc3Npb24ub2JzZXJ2ZVVzZXIoWydjb2luJ10pO1xyXG4gICAgICAgIHNlc3Npb24udXNlci5jb2luIC09IG47XHJcbiAgICAgICAgdXNlci5jb2luICs9IG47XHJcbiAgICAgICAgYXdhaXQgbmV3U2Vzc2lvbi51c2VyLl91cGRhdGUoKTtcclxuICAgICAgICByZXR1cm4gYOW3sui9rOi0piR7bn3kuKrnoazluIHjgIJgO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5hcHBseSA9IGFwcGx5O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1lY29ub215LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuYXBwbHkgPSB2b2lkIDA7XHJcbmNvbnN0IGtvaXNoaV9jb3JlXzEgPSByZXF1aXJlKFwia29pc2hpLWNvcmVcIik7XHJcbmNvbnN0IGtvaXNoaV9wbHVnaW5fZXZhbF8xID0gcmVxdWlyZShcImtvaXNoaS1wbHVnaW4tZXZhbFwiKTtcclxuY29uc3Qga29pc2hpX3V0aWxzXzEgPSByZXF1aXJlKFwia29pc2hpLXV0aWxzXCIpO1xyXG5mdW5jdGlvbiBhcHBseShjdHgsIGNvbmZpZykge1xyXG4gICAgY3R4LnBsdWdpbihrb2lzaGlfcGx1Z2luX2V2YWxfMS5hcHBseSwgY29uZmlnKTtcclxuICAgIGN0eC5jb21tYW5kKCdldmFsdWF0ZScpXHJcbiAgICAgICAgLm9wdGlvbignaScsICdPdXRwdXQgYXMgaW1hZ2UnLCB7IGhpZGRlbjogdHJ1ZSB9KVxyXG4gICAgICAgIC51c2VyRmllbGRzKGtvaXNoaV9jb3JlXzEuVXNlci5maWVsZHMpXHJcbiAgICAgICAgLmNoYW5uZWxGaWVsZHMoa29pc2hpX2NvcmVfMS5DaGFubmVsLmZpZWxkcylcclxuICAgICAgICAuY2hlY2soKHsgc2Vzc2lvbiB9KSA9PiB7XHJcbiAgICAgICAgaWYgKCFzZXNzaW9uLl9zdWRvKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgY29uc3QgY21kID0gc2Vzc2lvbi5hcmd2LmFyZ3NbMF0ucmVwbGFjZSgnZXZhbCAnLCAnJyk7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGlmIChzZXNzaW9uLmFyZ3Yub3B0aW9ucy5pKVxyXG4gICAgICAgICAgICBzZXNzaW9uLmV4ZWN1dGUoYF8uZXZhbCAtaSAke2NtZH1gKTtcclxuICAgICAgICBzZXNzaW9uLmV4ZWN1dGUoYF8uZXZhbCAke2NtZH1gKTtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9KTtcclxuICAgIGN0eC5jb21tYW5kKCdAJywgJ3V0aWxzJywgeyBoaWRkZW46IHRydWUgfSk7XHJcbiAgICBjdHguY29tbWFuZCgnQC5zaWxlbnQgPGNvbW1hbmQ6dGV4dD4nLCB7IGhpZGRlbjogdHJ1ZSB9KVxyXG4gICAgICAgIC5hY3Rpb24oKHsgc2Vzc2lvbiB9LCBjb21tYW5kKSA9PiBzZXNzaW9uLmV4ZWN1dGVTaWxlbnQoY29tbWFuZCkpO1xyXG4gICAgY3R4LmNvbW1hbmQoJ0Auc2xlZXAgPGR1cmF0aW9uPiA8Y29tbWFuZDp0ZXh0PicsIHsgaGlkZGVuOiB0cnVlIH0pXHJcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0sIF9kdXJhdGlvbiwgY29tbWFuZCkgPT4ge1xyXG4gICAgICAgIGxldCBkdXJhdGlvbiA9IE1hdGgubWluKDEwMDAwLCArX2R1cmF0aW9uKTtcclxuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKGR1cmF0aW9uKSB8fCAhZHVyYXRpb24pXHJcbiAgICAgICAgICAgIGR1cmF0aW9uID0gMDtcclxuICAgICAgICBhd2FpdCBrb2lzaGlfdXRpbHNfMS5zbGVlcChkdXJhdGlvbik7XHJcbiAgICAgICAgYXdhaXQgc2Vzc2lvbi5leGVjdXRlKGNvbW1hbmQpO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5hcHBseSA9IGFwcGx5O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmFsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSkpO1xyXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn0pO1xyXG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XHJcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmFwcGx5ID0gdm9pZCAwO1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1lbXB0eS1mdW5jdGlvbiAqL1xyXG4vLyBAdHMtbm9jaGVja1xyXG5jb25zdCBjcnlwdG9fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiY3J5cHRvXCIpKTtcclxuY29uc3Qgc3VwZXJhZ2VudCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwic3VwZXJhZ2VudFwiKSk7XHJcbmNvbnN0IHN1cGVyYWdlbnRfcHJveHlfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwic3VwZXJhZ2VudC1wcm94eVwiKSk7XHJcbmNvbnN0IGtvaXNoaV91dGlsc18xID0gcmVxdWlyZShcImtvaXNoaS11dGlsc1wiKTtcclxuc3VwZXJhZ2VudF9wcm94eV8xLmRlZmF1bHQoc3VwZXJhZ2VudCk7XHJcbmNvbnN0IGxvZ2dlciA9IG5ldyBrb2lzaGlfdXRpbHNfMS5Mb2dnZXIoJ2dpdGh1YicpO1xyXG5jbGFzcyBJbnZhbGlkVG9rZW5FcnJvciBleHRlbmRzIEVycm9yIHtcclxufVxyXG5mdW5jdGlvbiBmb3JtYXRNYXJrZG93bihzb3VyY2UpIHtcclxuICAgIHJldHVybiBzb3VyY2VcclxuICAgICAgICAucmVwbGFjZSgvXmBgYCguKikkL2dtLCAnJylcclxuICAgICAgICAucmVwbGFjZSgvXjwhLS0oLiopLS0+JC9nbSwgJycpXHJcbiAgICAgICAgLnJlcGxhY2UoL1xcblxccypcXG4vZywgJ1xcbicpXHJcbiAgICAgICAgLnJlcGxhY2UoLyhcXHI/XFxuICopKy9nbWksICdcXG4nKTtcclxufVxyXG5mdW5jdGlvbiBzaGEyNTYoc3RyKSB7XHJcbiAgICByZXR1cm4gY3J5cHRvXzEuZGVmYXVsdC5jcmVhdGVIYXNoKCdzaGEyNTYnKVxyXG4gICAgICAgIC51cGRhdGUoc3RyKVxyXG4gICAgICAgIC5kaWdlc3QoJ2hleCcpO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIHNjcmVlbnNob3QoYnJvd3NlciwgdXJsLCBzZWxlY3Rvciwgb2Zmc2V0KSB7XHJcbiAgICBjb25zdCBwYWdlID0gYXdhaXQgYnJvd3Nlci5uZXdQYWdlKCk7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGF3YWl0IHBhZ2UuZ290byh1cmwsIHsgd2FpdFVudGlsOiAnbmV0d29ya2lkbGUwJyB9KTtcclxuICAgICAgICBjb25zdCBlbCA9IGF3YWl0IHBhZ2UuJChzZWxlY3Rvcik7XHJcbiAgICAgICAgbGV0IGNsaXAgPSBhd2FpdCBlbC5ib3VuZGluZ0JveCgpO1xyXG4gICAgICAgIGF3YWl0IHBhZ2Uuc2V0Vmlld3BvcnQoe1xyXG4gICAgICAgICAgICBoZWlnaHQ6IE1hdGguY2VpbChjbGlwLnkgKyBjbGlwLmhlaWdodCArIDUwKSxcclxuICAgICAgICAgICAgd2lkdGg6IDEwODAsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY2xpcCA9IGF3YWl0IGVsLmJvdW5kaW5nQm94KCk7XHJcbiAgICAgICAgY2xpcCA9IHtcclxuICAgICAgICAgICAgeDogY2xpcC54IC0gb2Zmc2V0WzBdLFxyXG4gICAgICAgICAgICB5OiBjbGlwLnkgLSBvZmZzZXRbMV0sXHJcbiAgICAgICAgICAgIHdpZHRoOiBjbGlwLndpZHRoICsgb2Zmc2V0WzJdLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGNsaXAuaGVpZ2h0ICsgb2Zmc2V0WzNdLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgYmFzZTY0ID0gYXdhaXQgcGFnZS5zY3JlZW5zaG90KHtcclxuICAgICAgICAgICAgZW5jb2Rpbmc6ICdiYXNlNjQnLFxyXG4gICAgICAgICAgICBjbGlwLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGF3YWl0IHBhZ2UuY2xvc2UoKTtcclxuICAgICAgICByZXR1cm4gYmFzZTY0O1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgYXdhaXQgcGFnZS5jbG9zZSgpO1xyXG4gICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGFwcGx5ID0gKGFwcCwgY29uZmlnKSA9PiB7XHJcbiAgICBmdW5jdGlvbiBHZXQodXJsKSB7XHJcbiAgICAgICAgcmV0dXJuIHN1cGVyYWdlbnRcclxuICAgICAgICAgICAgLmdldCh1cmwpXHJcbiAgICAgICAgICAgIC5wcm94eShjb25maWcucHJveHkpXHJcbiAgICAgICAgICAgIC5zZXQoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi92bmQuZ2l0aHViLnYzK2pzb24nKVxyXG4gICAgICAgICAgICAuc2V0KCdVc2VyLUFnZW50JywgJ0h5ZHJvQm90Jyk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBQb3N0KHVybCkge1xyXG4gICAgICAgIHJldHVybiBzdXBlcmFnZW50XHJcbiAgICAgICAgICAgIC5wb3N0KHVybClcclxuICAgICAgICAgICAgLnByb3h5KGNvbmZpZy5wcm94eSlcclxuICAgICAgICAgICAgLnNldCgnQWNjZXB0JywgJ2FwcGxpY2F0aW9uL3ZuZC5naXRodWIudjMranNvbicpXHJcbiAgICAgICAgICAgIC5zZXQoJ1VzZXItQWdlbnQnLCAnSHlkcm9Cb3QnKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIFB1dCh1cmwpIHtcclxuICAgICAgICByZXR1cm4gc3VwZXJhZ2VudFxyXG4gICAgICAgICAgICAucHV0KHVybClcclxuICAgICAgICAgICAgLnByb3h5KGNvbmZpZy5wcm94eSlcclxuICAgICAgICAgICAgLnNldCgnQWNjZXB0JywgJ2FwcGxpY2F0aW9uL3ZuZC5naXRodWIudjMranNvbicpXHJcbiAgICAgICAgICAgIC5zZXQoJ1VzZXItQWdlbnQnLCAnSHlkcm9Cb3QnKTtcclxuICAgIH1cclxuICAgIGFwcC5vbignY29ubmVjdCcsICgpID0+IHtcclxuICAgICAgICBjb25zdCBjb2xsID0gYXBwLmRhdGFiYXNlLm1vbmdvLmNvbGxlY3Rpb24oJ2dpdGh1Yl93YXRjaCcpO1xyXG4gICAgICAgIGNvbnN0IGNvbGxEYXRhID0gYXBwLmRhdGFiYXNlLm1vbmdvLmNvbGxlY3Rpb24oJ2dpdGh1Yl9kYXRhJyk7XHJcbiAgICAgICAgY29uc3QgZXZlbnRzID0ge1xyXG4gICAgICAgICAgICBwdXNoOiB7XHJcbiAgICAgICAgICAgICAgICBhc3luYyBob29rKGJvZHkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWYgPSBib2R5LnJlZi5zcGxpdCgnLycpWzJdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbmRlciA9IGJvZHkuaGVhZF9jb21taXQgPyBib2R5LmhlYWRfY29tbWl0LmF1dGhvci51c2VybmFtZSA6IGJvZHkuc2VuZGVyLmxvZ2luO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhZGRlZCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbW92ZWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBtb2RpZmllZCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3AgPSBgUmVjZW50IGNvbW1pdCB0byAke2JvZHkucmVwb3NpdG9yeS5mdWxsX25hbWV9JHtyZWYgPT09ICdtYXN0ZXInID8gJycgOiBgOiR7cmVmfWB9IGJ5ICR7c2VuZGVyfWA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5zb3VyY2VncmFwaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3VwZXJhZ2VudC5wb3N0KCdodHRwczovL3NvdXJjZWdyYXBoLmNvbS8uYXBpL2dyYXBocWwnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgdG9rZW4gJHtjb25maWcuc291cmNlZ3JhcGh9YClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2VuZCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnk6IGBxdWVyeXtcbnJlcG9zaXRvcnkobmFtZTpcImdpdGh1Yi5jb20vJHtib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lfVwiKXtcbiAgY29tcGFyaXNvbihiYXNlOlwiJHtib2R5LmJlZm9yZX1cIixoZWFkOlwiJHtib2R5LmFmdGVyfVwiKXtcbiAgICBmaWxlRGlmZnN7bm9kZXN7c3RhdHthZGRlZCBjaGFuZ2VkIGRlbGV0ZWR9fX1cbiAgfVxufVxufWAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzdWx0LmJvZHkuZGF0YSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhyZXN1bHQuYm9keSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICghcmVzdWx0LmJvZHkuZGF0YS5yZXBvc2l0b3J5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCdSZXBvIG5vdCBmb3VuZDogJXMnLCBib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5nZXMgPSByZXN1bHQuYm9keS5kYXRhLnJlcG9zaXRvcnkuY29tcGFyaXNvbi5maWxlRGlmZnMubm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjaGFuZ2Ugb2YgY2hhbmdlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRlZCArPSBjaGFuZ2Uuc3RhdC5hZGRlZCB8fCAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkICs9IGNoYW5nZS5zdGF0LmRlbGV0ZWQgfHwgMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWQgKz0gY2hhbmdlLnN0YXQuY2hhbmdlZCB8fCAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhZGRlZCB8fCByZW1vdmVkIHx8IG1vZGlmaWVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwICs9IGBcXG4ke2FkZGVkfSsgJHtyZW1vdmVkfS0gJHttb2RpZmllZH1NYDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNvbW1pdCBvZiBib2R5LmNvbW1pdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGV0ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21taXQuYWRkZWQubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0LnB1c2goYCR7Y29tbWl0LmFkZGVkLmxlbmd0aH0rYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21taXQucmVtb3ZlZC5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXQucHVzaChgJHtjb21taXQucmVtb3ZlZC5sZW5ndGh9LWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWl0Lm1vZGlmaWVkLmxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldC5wdXNoKGAke2NvbW1pdC5tb2RpZmllZC5sZW5ndGh9TWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwICs9IGBcXG4ke2NvbW1pdC5pZC5zdWJzdHIoMCwgNil9ICR7Zm9ybWF0TWFya2Rvd24oY29tbWl0Lm1lc3NhZ2UpLnJlcGxhY2UoL1xcbi9nLCAnXFxyXFxuJyl9ICgke2RldC5qb2luKCcgJyl9KWA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbcmVzcCwgeyBsaW5rOiBib2R5LmNvbXBhcmUgfV07XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYXN5bmMgaW50ZXJhY3QobWVzc2FnZSwgc2Vzc2lvbiwgZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5pbmNsdWRlcygnISFsaW5rJykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbZXZlbnQubGlua107XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJyEhZGlmZicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBzY3JlZW5zaG90KGFwcC5icm93c2VyLCBldmVudC5saW5rLCAnLmZpbGVzLWJ1Y2tldCcsIFswLCAwLCAwLCAwXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbYFtDUTppbWFnZSxmaWxlPWJhc2U2NDovLyR7ZGF0YX1dYF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGlzc3Vlczoge1xyXG4gICAgICAgICAgICAgICAgYXN5bmMgaG9vayhib2R5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXNwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChib2R5LmFjdGlvbiA9PT0gJ29wZW5lZCcgfHwgYm9keS5hY3Rpb24gPT09ICdlZGl0ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgPSBgJHtib2R5LnNlbmRlci5sb2dpbn0gJHtib2R5LmFjdGlvbn0gaXNzdWUgJHtib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lfSMke2JvZHkuaXNzdWUubnVtYmVyfWA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiYXNlNjQgPSBhd2FpdCBzY3JlZW5zaG90KGFwcC5icm93c2VyLCBib2R5Lmlzc3VlLmh0bWxfdXJsLCAnLmpzLWRpc2N1c3Npb24nLCBbNjgsIDEzMCwgOTIsIDEzMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCArPSBgXFxuJHtrb2lzaGlfdXRpbHNfMS5zZWdtZW50LmltYWdlKGBiYXNlNjQ6Ly8ke2Jhc2U2NH1gKX1gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IGtvaXNoaV91dGlsc18xLkxvZ2dlcigncHVwcGV0ZWVyJykud2FybihlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwICs9IGBcXG4ke2Zvcm1hdE1hcmtkb3duKGJvZHkuaXNzdWUudGl0bGUpfVxcbiR7Zm9ybWF0TWFya2Rvd24oYm9keS5pc3N1ZS5ib2R5IHx8ICcnKX1gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJvZHkuYWN0aW9uID09PSAnYXNzaWduZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgPSBgJHtib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lfSMke2JvZHkuaXNzdWUubnVtYmVyfTogQXNzaWduZWQgJHtib2R5LmFzc2lnbmVlLmxvZ2lufWA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJvZHkuYWN0aW9uID09PSAndW5hc3NpZ25lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCA9IGAke2JvZHkucmVwb3NpdG9yeS5mdWxsX25hbWV9IyR7Ym9keS5pc3N1ZS5udW1iZXJ9OiBVbmFzc2lnbmVkICR7Ym9keS5hc3NpZ25lZS5sb2dpbn1gO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChib2R5LmFjdGlvbiA9PT0gJ2Nsb3NlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCA9IGAke2JvZHkuc2VuZGVyLmxvZ2lufSBjbG9zZWQgJHtib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lfSMke2JvZHkuaXNzdWUubnVtYmVyfS5gO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChbJ3Jlb3BlbmVkJywgJ2xvY2tlZCcsICd1bmxvY2tlZCddLmluY2x1ZGVzKGJvZHkuYWN0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwID0gYCR7Ym9keS5zZW5kZXIubG9naW59ICR7Ym9keS5hY3Rpb259IElzc3VlOiR7Ym9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZX0jJHtib2R5Lmlzc3VlLm51bWJlcn1gO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChib2R5LmFjdGlvbiA9PT0gJ2xhYmxlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCA9IGAke2JvZHkuc2VuZGVyLmxvZ2lufSBsYWJsZWQgJHtib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lfSMke2JvZHkuaXNzdWUubnVtYmVyfSAke2JvZHkubGFibGUubmFtZX1gO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgPSBgVW5rbm93biBpc3N1ZSBhY3Rpb246ICR7Ym9keS5hY3Rpb259YDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rOiAoKF9hID0gYm9keS5jb21tZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaHRtbF91cmwpIHx8IGJvZHkuaXNzdWUuaHRtbF91cmwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBvbmFtZTogYm9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzc3VlSWQ6IGJvZHkuaXNzdWUubnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYXN5bmMgaW50ZXJhY3QobWVzc2FnZSwgc2Vzc2lvbiwgZXZlbnQsIGdldFRva2VuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJyEhbGluaycpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2V2ZW50LmxpbmtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgZ2V0VG9rZW4oKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBHZXQoYGh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvJHtldmVudC5yZXBvbmFtZX0vaXNzdWVzLyR7ZXZlbnQuaXNzdWVJZH0vY29tbWVudHNgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYHRva2VuICR7dG9rZW59YClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNlbmQoeyBib2R5OiBtZXNzYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGlzc3VlX2NvbW1lbnQ6IHtcclxuICAgICAgICAgICAgICAgIGFzeW5jIGhvb2soYm9keSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXNwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChib2R5LmFjdGlvbiA9PT0gJ2NyZWF0ZWQnIHx8IGJvZHkuYWN0aW9uID09PSAnZWRpdGVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwID0gYCR7Ym9keS5jb21tZW50LnVzZXIubG9naW59ICR7Ym9keS5hY3Rpb24gPT09ICdjcmVhdGVkJyA/ICdjb21tZW50ZWQnIDogJ2VkaXRlZCBhIGNvbW1lbnQnfSBvbiAke2JvZHkucmVwb3NpdG9yeS5mdWxsX25hbWV9IyR7Ym9keS5pc3N1ZS5udW1iZXJ9YDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJhc2U2NCA9IGF3YWl0IHNjcmVlbnNob3QoYXBwLmJyb3dzZXIsIGJvZHkuaXNzdWUuaHRtbF91cmwsIGAjJHtib2R5LmNvbW1lbnQuaHRtbF91cmwuc3BsaXQoJyMnKVsxXX1gLCBbODYsIDE0LCA5MiwgMjBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgKz0gYFxcbiR7a29pc2hpX3V0aWxzXzEuc2VnbWVudC5pbWFnZShgYmFzZTY0Oi8vJHtiYXNlNjR9YCl9YDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBrb2lzaGlfdXRpbHNfMS5Mb2dnZXIoJ3B1cHBldGVlcicpLndhcm4oZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCArPSBgXFxuJHtmb3JtYXRNYXJrZG93bihib2R5LmNvbW1lbnQuYm9keSl9YDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rOiBib2R5Lmlzc3VlLmh0bWxfdXJsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwb25hbWU6IGJvZHkucmVwb3NpdG9yeS5mdWxsX25hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc3N1ZUlkOiBib2R5Lmlzc3VlLm51bWJlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGFzeW5jIGludGVyYWN0KG1lc3NhZ2UsIHNlc3Npb24sIGV2ZW50LCBnZXRUb2tlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmluY2x1ZGVzKCchIWxpbmsnKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtldmVudC5saW5rXTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IGdldFRva2VuKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJyEhbWVyZ2UnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21taXRNc2cgPSBtZXNzYWdlLnNwbGl0KCchIW1lcmdlJylbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IFB1dChgaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy8ke2V2ZW50LnJlcG9uYW1lfS9wdWxscy8ke2V2ZW50Lmlzc3VlSWR9L21lcmdlYClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgdG9rZW4gJHt0b2tlbn1gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNlbmQoeyBjb21taXRfdGl0bGU6IGNvbW1pdE1zZyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5pbmNsdWRlcygnISFhcHByb3ZlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgUG9zdChgaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy8ke2V2ZW50LnJlcG9uYW1lfS9wdWxscy8ke2V2ZW50Lmlzc3VlSWR9L3Jldmlld3NgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGB0b2tlbiAke3Rva2VufWApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2VuZCh7IGV2ZW50OiAnQVBQUk9WRScgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgUG9zdChgaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy8ke2V2ZW50LnJlcG9uYW1lfS9pc3N1ZXMvJHtldmVudC5pc3N1ZUlkfS9jb21tZW50c2ApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgdG9rZW4gJHt0b2tlbn1gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2VuZCh7IGJvZHk6IG1lc3NhZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcHVsbF9yZXF1ZXN0OiB7XHJcbiAgICAgICAgICAgICAgICBhc3luYyBob29rKGJvZHkpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzcDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGZ1bGxfbmFtZSwgb3duZXIgfSA9IGJvZHkucmVwb3NpdG9yeTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHVzZXIsIGh0bWxfdXJsLCB0aXRsZSwgYmFzZSwgaGVhZCwgbnVtYmVyLCBtZXJnZWQsIH0gPSBib2R5LnB1bGxfcmVxdWVzdDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmVmaXggPSBuZXcgUmVnRXhwKGBeJHtvd25lci5sb2dpbn06YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZUxhYmVsID0gYmFzZS5sYWJlbC5yZXBsYWNlKHByZWZpeCwgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRMYWJlbCA9IGhlYWQubGFiZWwucmVwbGFjZShwcmVmaXgsICcnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXNlci50eXBlID09PSAnQm90JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChib2R5LmFjdGlvbiA9PT0gJ29wZW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCA9IGAke3VzZXIubG9naW59IG9wZW5lZCBhbiBwdWxsIHJlcXVlc3QgZm9yICR7ZnVsbF9uYW1lfSMke251bWJlcn0oJHtiYXNlTGFiZWx9PCR7aGVhZExhYmVsfSlgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwICs9IGBcXG4ke3RpdGxlfWA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChib2R5LnB1bGxfcmVxdWVzdC5ib2R5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCArPSBgXFxuJHtib2R5LnB1bGxfcmVxdWVzdC5ib2R5fWA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJvZHkuYWN0aW9uID09PSAnY3JlYXRlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCA9IGAke3VzZXIubG9naW59IGNvbW1lbnRlZCBvbiAke2Z1bGxfbmFtZX0jJHtudW1iZXJ9KCR7YmFzZUxhYmVsfTwke2hlYWRMYWJlbH0pYDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCArPSBgXFxuJHtib2R5LmNvbW1lbnQuYm9keX1gO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChib2R5LmFjdGlvbiA9PT0gJ2Fzc2lnbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwID0gYCR7ZnVsbF9uYW1lfSMke251bWJlcn06IEFzc2lnbmVkICR7Ym9keS5hc3NpZ25lZS5sb2dpbn1gO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChib2R5LmFjdGlvbiA9PT0gJ3VuYXNzaWduZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgPSBgJHtmdWxsX25hbWV9IyR7bnVtYmVyfTogVW5hc3NpZ25lZCAke2JvZHkuYXNzaWduZWUubG9naW59YDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYm9keS5hY3Rpb24gPT09ICdyZXZpZXdfcmVxdWVzdGVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwID0gYCR7ZnVsbF9uYW1lfSMke251bWJlcn06IFJlcXVlc3QgYSByZXZpZXcuYDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYm9keS5hY3Rpb24gPT09ICdjbG9zZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBtZXJnZWQgPyAnbWVyZ2VkJyA6ICdjbG9zZWQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwID0gYCR7Ym9keS5zZW5kZXIubG9naW59ICR7dHlwZX0gJHtmdWxsX25hbWV9IyR7bnVtYmVyfSgke2Jhc2VMYWJlbH08JHtoZWFkTGFiZWx9KWA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKFsncmVvcGVuZWQnLCAnbG9ja2VkJywgJ3VubG9ja2VkJ10uaW5jbHVkZXMoYm9keS5hY3Rpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgPSBgJHtib2R5LnNlbmRlci5sb2dpbn0gJHtib2R5LmFjdGlvbn0gUFI6JHtmdWxsX25hbWV9IyR7bnVtYmVyfWA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKFsnc3luY2hyb25pemUnXS5pbmNsdWRlcyhib2R5LmFjdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChib2R5LmFjdGlvbiA9PT0gJ3JlYWR5X2Zvcl9yZXZpZXcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgPSBgJHtmdWxsX25hbWV9IyR7bnVtYmVyfSBpcyByZWFkeSBmb3IgcmV2aWV3LmA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCA9IGBVbmtub3duIHB1bGwgcmVxdWVzdCBhY3Rpb246ICR7Ym9keS5hY3Rpb259YDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rOiBodG1sX3VybCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcG9uYW1lOiBmdWxsX25hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc3N1ZUlkOiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBhc3luYyBpbnRlcmFjdChtZXNzYWdlLCBzZXNzaW9uLCBldmVudCwgZ2V0VG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5pbmNsdWRlcygnISFsaW5rJykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbZXZlbnQubGlua107XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCBnZXRUb2tlbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmluY2x1ZGVzKCchIW1lcmdlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tbWl0TXNnID0gbWVzc2FnZS5zcGxpdCgnISFtZXJnZScpWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBQdXQoYGh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvJHtldmVudC5yZXBvbmFtZX0vcHVsbHMvJHtldmVudC5pc3N1ZUlkfS9tZXJnZWApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYHRva2VuICR7dG9rZW59YClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZW5kKHsgY29tbWl0X3RpdGxlOiBjb21taXRNc2cgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJyEhYXBwcm92ZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IFBvc3QoYGh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvJHtldmVudC5yZXBvbmFtZX0vcHVsbHMvJHtldmVudC5pc3N1ZUlkfS9yZXZpZXdzYClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgdG9rZW4gJHt0b2tlbn1gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNlbmQoeyBldmVudDogJ0FQUFJPVkUnIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgUG9zdChgaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy8ke2V2ZW50LnJlcG9uYW1lfS9pc3N1ZXMvJHtldmVudC5pc3N1ZUlkfS9jb21tZW50c2ApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYHRva2VuICR7dG9rZW59YClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZW5kKHsgYm9keTogbWVzc2FnZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcHVsbF9yZXF1ZXN0X3Jldmlldzoge1xyXG4gICAgICAgICAgICAgICAgYXN5bmMgaG9vayhib2R5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHkucmV2aWV3LnN0YXRlID09PSAnY29tbWVudGVkJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChib2R5LnJldmlldy5zdGF0ZSA9PT0gJ2FwcHJvdmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2Ake2JvZHkuc2VuZGVyLmxvZ2lufSBhcHByb3ZlZCAke2JvZHkucmVwb3NpdG9yeS5mdWxsX25hbWV9IyR7Ym9keS5wdWxsX3JlcXVlc3QubnVtYmVyfWBdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwdWxsX3JlcXVlc3RfcmV2aWV3X2NvbW1lbnQ6IHtcclxuICAgICAgICAgICAgICAgIGFzeW5jIGhvb2soYm9keSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXNwID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHkuYWN0aW9uID09PSAnY3JlYXRlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCA9IGAke2JvZHkuY29tbWVudC51c2VyLmxvZ2lufSBjb21tZW50ZWQgb24gJHtib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lfSMke2JvZHkucHVsbF9yZXF1ZXN0Lm51bWJlcn1cXG5gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwICs9IGZvcm1hdE1hcmtkb3duKGJvZHkuY29tbWVudC5ib2R5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluazogYm9keS5wdWxsX3JlcXVlc3QuaHRtbF91cmwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBvbmFtZTogYm9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzc3VlSWQ6IGJvZHkucHVsbF9yZXF1ZXN0Lm51bWJlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGFzeW5jIGludGVyYWN0KG1lc3NhZ2UsIHNlc3Npb24sIGV2ZW50LCBnZXRUb2tlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmluY2x1ZGVzKCchIWxpbmsnKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtldmVudC5saW5rXTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IGdldFRva2VuKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgUG9zdChgaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy8ke2V2ZW50LnJlcG9uYW1lfS9pc3N1ZXMvJHtldmVudC5pc3N1ZUlkfS9jb21tZW50c2ApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgdG9rZW4gJHt0b2tlbn1gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2VuZCh7IGJvZHk6IG1lc3NhZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3Rhcjoge1xyXG4gICAgICAgICAgICAgICAgYXN5bmMgaG9vayhib2R5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHkuYWN0aW9uID09PSAnY3JlYXRlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF3YWl0IGNvbGxEYXRhLmZpbmRPbmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcjogYm9keS5zZW5kZXIubG9naW4sIHJlcG86IGJvZHkucmVwb3NpdG9yeS5mdWxsX25hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7Ym9keS5zZW5kZXIubG9naW59IHN0YXJyZWQgJHtib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lfSAodG90YWwgJHtib2R5LnJlcG9zaXRvcnkuc3RhcmdhemVyc19jb3VudH0gc3RhcmdhemVycylgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyB1c2VyOiBib2R5LnNlbmRlci5sb2dpbiwgcmVwbzogYm9keS5yZXBvc2l0b3J5LmZ1bGxfbmFtZSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB3YXRjaDoge30sXHJcbiAgICAgICAgICAgIHByb2plY3RfY2FyZDoge30sXHJcbiAgICAgICAgICAgIHByb2plY3RfY29sdW1uOiB7fSxcclxuICAgICAgICAgICAgY2hlY2tfcnVuOiB7fSxcclxuICAgICAgICAgICAgY2hlY2tfc3VpdGU6IHt9LFxyXG4gICAgICAgICAgICByZXBvc2l0b3J5X3Z1bG5lcmFiaWxpdHlfYWxlcnQ6IHt9LFxyXG4gICAgICAgICAgICBzdGF0dXM6IHt9LFxyXG4gICAgICAgICAgICBsYWJlbDoge30sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBhcHAucm91dGVyLnBvc3QoJy9naXRodWInLCBhc3luYyAoY3R4KSA9PiB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBldmVudCA9IGN0eC5yZXF1ZXN0LmhlYWRlcnNbJ3gtZ2l0aHViLWV2ZW50J107XHJcbiAgICAgICAgICAgICAgICBsZXQgYm9keTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3R4LnJlcXVlc3QuYm9keS5wYXlsb2FkID09PSAnc3RyaW5nJylcclxuICAgICAgICAgICAgICAgICAgICBib2R5ID0gSlNPTi5wYXJzZShjdHgucmVxdWVzdC5ib2R5LnBheWxvYWQpO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGJvZHkgPSBjdHgucmVxdWVzdC5ib2R5O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgX2lkID0gc2hhMjU2KEpTT04uc3RyaW5naWZ5KGJvZHkpKTtcclxuICAgICAgICAgICAgICAgIGlmICghZXZlbnRzW2V2ZW50XSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50c1tldmVudF0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvb2s6IChiKSA9PiBQcm9taXNlLnJlc29sdmUoW2Ake2IucmVwb3NpdG9yeS5mdWxsX25hbWV9IHRyaWdnZXJlZCBhbiB1bmtub3duIGV2ZW50OiAke2V2ZW50fWBdKSxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50c1tldmVudF0uaG9vaykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gb3JnYW5pemF0aW9uIHdlYmhvb2s/XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVwb25hbWUgPSBib2R5LnJlcG9zaXRvcnkuZnVsbF9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFttZXNzYWdlLCBpbmZdID0gYXdhaXQgZXZlbnRzW2V2ZW50XS5ob29rKGJvZHkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNvbGxEYXRhLmZpbmRPbmUoeyBfaWQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlbGF0aXZlSWRzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgY29sbC5maW5kT25lKHsgX2lkOiByZXBvbmFtZS50b0xvd2VyQ2FzZSgpIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGlkIG9mIGRhdGEudGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFtwbGF0Zm9ybSwgZ2lkXSA9IGlkLnNwbGl0KCc6Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hd2FpdC1pbi1sb29wXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGdkb2MgPSBhd2FpdCBhcHAuZGF0YWJhc2UuZ2V0Q2hhbm5lbChwbGF0Zm9ybSwgZ2lkLCBbJ2Fzc2lnbmVlJ10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2RvYy5hc3NpZ25lZSAmJiBhcHAuYm90c1tgJHtwbGF0Zm9ybX06JHtnZG9jLmFzc2lnbmVlfWBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZUlkcy5wdXNoKGFwcC5ib3RzW2Ake3BsYXRmb3JtfToke2dkb2MuYXNzaWduZWV9YF0uc2VuZE1lc3NhZ2UoZ2lkLCBtZXNzYWdlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ0Nhbm5vdCBzZW5kIG1lc3NhZ2UgdG8gJXM6JWQgd2l0aCBhc3NpZ25lZSAlZCcsIHBsYXRmb3JtLCBpZCwgZ2RvYy5hc3NpZ25lZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVJZHMgPSBhd2FpdCBQcm9taXNlLmFsbChyZWxhdGl2ZUlkcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBjb2xsRGF0YS5pbnNlcnRPbmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pZCwgdHlwZTogZXZlbnQsIHJlbGF0aXZlSWRzLCAuLi5pbmYsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguYm9keSA9IGBQdXNoZWQgdG8gJHtyZWxhdGl2ZUlkcy5sZW5ndGh9IGdyb3VwKHMpYDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguYm9keSA9ICdEdXBsaWNhdGUgZXZlbnQnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGN0eC5ib2R5ID0gJ0V2ZW50IGlnbm9yZWQuJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgICAgICBjdHguYm9keSA9IGUudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGFwcC5yb3V0ZXIuZ2V0KCcvZ2l0aHViL2F1dGhvcml6ZScsIGFzeW5jIChjdHgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgW3BsYXRmb3JtLCBpZF0gPSBjdHgucXVlcnkuc3RhdGUuc3BsaXQoJzonKTtcclxuICAgICAgICAgICAgY29uc3QgY29kZSA9IGN0eC5xdWVyeS5jb2RlO1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdXBlcmFnZW50LnBvc3QoJ2h0dHBzOi8vZ2l0aHViLmNvbS9sb2dpbi9vYXV0aC9hY2Nlc3NfdG9rZW4nKVxyXG4gICAgICAgICAgICAgICAgLnByb3h5KGNvbmZpZy5wcm94eSlcclxuICAgICAgICAgICAgICAgIC5zZW5kKHtcclxuICAgICAgICAgICAgICAgIGNsaWVudF9pZDogY29uZmlnLmNsaWVudF9pZCxcclxuICAgICAgICAgICAgICAgIGNsaWVudF9zZWNyZXQ6IGNvbmZpZy5jbGllbnRfc2VjcmV0LFxyXG4gICAgICAgICAgICAgICAgY29kZSxcclxuICAgICAgICAgICAgICAgIHJlZGlyZWN0X3VyaTogY29uZmlnLnJlZGlyZWN0X3VyaSxcclxuICAgICAgICAgICAgICAgIHN0YXRlOiBjdHgucXVlcnkuc3RhdGUsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0LmJvZHkuYWNjZXNzX3Rva2VuKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBhcHAuZGF0YWJhc2Uuc2V0VXNlcihwbGF0Zm9ybSwgaWQsIHsgR2l0aHViVG9rZW46IHJlc3VsdC5ib2R5IH0pO1xyXG4gICAgICAgICAgICAgICAgY3R4LmJvZHkgPSAnRG9uZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjdHguYm9keSA9ICdFcnJvcic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBhcHAubWlkZGxld2FyZShhc3luYyAoc2Vzc2lvbiwgbmV4dCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXNlc3Npb24ucXVvdGUpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dCgpO1xyXG4gICAgICAgICAgICBjb25zdCBwYXJzZWRNc2cgPSBzZXNzaW9uLnBhcnNlZC5jb250ZW50XHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxbQ1E6YXQsLipcXF0vZywgJycpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxbQ1E6aW1hZ2UsZmlsZT0oLiopXFxdL2csIChzdHIpID0+IGAgIVtdKCR7L1xcW0NROmltYWdlLGZpbGU9KC4qKVxcXS9nLmV4ZWMoc3RyKVsxXX0pIGApXHJcbiAgICAgICAgICAgICAgICAuZGVjb2RlKCkudHJpbSgpO1xyXG4gICAgICAgICAgICBpZiAoIXBhcnNlZE1zZylcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IFtyZWxhdGl2ZUV2ZW50LCB1c2VyXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcclxuICAgICAgICAgICAgICAgIGNvbGxEYXRhLmZpbmRPbmUoeyByZWxhdGl2ZUlkczogc2Vzc2lvbi5xdW90ZS5tZXNzYWdlSWQgfSksXHJcbiAgICAgICAgICAgICAgICBhcHAuZGF0YWJhc2UuZ2V0VXNlcihzZXNzaW9uLnBsYXRmb3JtLCBzZXNzaW9uLnVzZXJJZCwgWydHaXRodWJUb2tlbiddKSxcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgIGlmICghcmVsYXRpdmVFdmVudCB8fCAhZXZlbnRzW3JlbGF0aXZlRXZlbnQudHlwZV0uaW50ZXJhY3QpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKHBhcnNlZE1zZyk7XHJcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCdSZXBseTogJXMnLCByZWxhdGl2ZUV2ZW50KTtcclxuICAgICAgICAgICAgaWYgKHBhcnNlZE1zZy5zdGFydHNXaXRoKCcvLycpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHQoKTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGFzeW5jIGZ1bmN0aW9uIGdldFRva2VuKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISgoX2EgPSB1c2VyLkdpdGh1YlRva2VuKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWNjZXNzX3Rva2VuKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRUb2tlbkVycm9yKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3VwZXJhZ2VudC5nZXQoJ2h0dHBzOi8vYXBpLmdpdGh1Yi5jb20vJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnByb3h5KGNvbmZpZy5wcm94eSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGB0b2tlbiAke3VzZXIuR2l0aHViVG9rZW4uYWNjZXNzX3Rva2VufWApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXQoJ1VzZXItQWdlbnQnLCAnSHlkcm9Cb3QnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyAhPT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdXNlci5HaXRodWJUb2tlbi5yZWZyZXNoX3Rva2VuKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRUb2tlbkVycm9yKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBhd2FpdCBzdXBlcmFnZW50LnBvc3QoJ2h0dHBzOi8vZ2l0aHViLmNvbS9sb2dpbi9vYXV0aC9hY2Nlc3NfdG9rZW4nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnByb3h5KGNvbmZpZy5wcm94eSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZXQoJ1VzZXItQWdlbnQnLCAnSHlkcm9Cb3QnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNlbmQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JhbnRfdHlwZTogJ3JlZnJlc2hfdG9rZW4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50X2lkOiBjb25maWcuY2xpZW50X2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50X3NlY3JldDogY29uZmlnLmNsaWVudF9zZWNyZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoX3Rva2VuOiB1c2VyLkdpdGh1YlRva2VuLnJlZnJlc2hfdG9rZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXIuYm9keS5hY2Nlc3NfdG9rZW4pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFRva2VuRXJyb3IoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgYXBwLmRhdGFiYXNlLnNldFVzZXIoc2Vzc2lvbi5wbGF0Zm9ybSwgc2Vzc2lvbi51c2VySWQsIHsgR2l0aHViVG9rZW46IHIuYm9keSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIuYm9keS5hY2Nlc3NfdG9rZW47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1c2VyLkdpdGh1YlRva2VuLmFjY2Vzc190b2tlbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGF3YWl0IGV2ZW50c1tyZWxhdGl2ZUV2ZW50LnR5cGVdLmludGVyYWN0KHBhcnNlZE1zZy50cmltKCksIHNlc3Npb24sIHJlbGF0aXZlRXZlbnQsIGdldFRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY2F0Y2gnLCBlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEludmFsaWRUb2tlbkVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb24uc2VuZCgn6K+36L6T5YWlR2l0aHVi55So5oi35ZCNJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvZ2luID0gYXdhaXQgc2Vzc2lvbi5wcm9tcHQoNjAwMDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxvZ2luKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlc3Npb24uc2VuZCgn6L6T5YWl6LaF5pe2Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXNzaW9uLnNlbmQoYOivt+eCueWHu+S4i+mdoueahOmTvuaOpee7p+e7reaTjeS9nO+8mlxuaHR0cHM6Ly9naXRodWIuY29tL2xvZ2luL29hdXRoL2F1dGhvcml6ZT9jbGllbnRfaWQ9JHtjb25maWcuY2xpZW50X2lkfSZzdGF0ZT0ke3Nlc3Npb24ucGxhdGZvcm19OiR7c2Vzc2lvbi51c2VySWR9JnJlZGlyZWN0X3VybD0ke2NvbmZpZy5yZWRpcmVjdF91cml9JnNjb3BlPWFkbWluJTNBcmVwb19ob29rJTJDcmVwbyZsb2dpbj0ke2xvZ2lufWApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG1heC1sZW5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IFttZXNzYWdlLCAkc2V0XSA9IHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlKVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHNlc3Npb24uc2VuZChtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIGlmICgkc2V0KVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGNvbGxEYXRhLnVwZGF0ZU9uZSh7IF9pZDogcmVsYXRpdmVFdmVudC5faWQgfSwgeyAkc2V0IH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBzZXNzaW9uLnNlbmQoZS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbmV4dCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGFwcC5zZWxlY3QoJ2dyb3VwSWQnKS5jb21tYW5kKCdnaXRodWIubGlzdGVuIDxyZXBvPicsICfnm5HlkKzkuIDkuKpSZXBvc2l0b3J555qE5LqL5Lu2JylcclxuICAgICAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0sIHJlcG8pID0+IHtcclxuICAgICAgICAgICAgcmVwbyA9IHJlcG8udG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgaWYgKHJlcG8uc3BsaXQoJy8nKS5sZW5ndGggIT09IDIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+aXoOaViOWcsOWdgCc7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSBhd2FpdCBjb2xsLmZpbmRPbmUoeyBfaWQ6IHJlcG8gfSk7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBjb2xsLnVwZGF0ZU9uZSh7IF9pZDogcmVwbyB9LCB7ICRhZGRUb1NldDogeyB0YXJnZXQ6IGAke3Nlc3Npb24ucGxhdGZvcm19OiR7c2Vzc2lvbi5ncm91cElkfWAgfSB9LCB7IHVwc2VydDogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBgV2F0Y2hpbmcgJHtyZXBvfWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXdhaXQgY29sbC5pbnNlcnRPbmUoeyBfaWQ6IHJlcG8sIHRhcmdldDogW2Ake3Nlc3Npb24ucGxhdGZvcm19OiR7c2Vzc2lvbi5ncm91cElkfWBdIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gYFdhdGNoaW5nICR7cmVwb31cbijor7fliJvlu7ogd2ViaG9vayDmipXpgJLoh7MgaHR0cHM6Ly9naXRodWIudW5kZWZpbmVkLm1vZS93ZWJob29rIO+8jOagvOW8jyBhcHBsaWNhdGlvbi9qc29uIClgO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGFwcC5zZWxlY3QoJ2dyb3VwSWQnKS5jb21tYW5kKCdnaXRodWIubGlzdCcsICdMaXN0IHJlcG9zJylcclxuICAgICAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmVwb3MgPSBhd2FpdCBjb2xsLmZpbmQoeyB0YXJnZXQ6IGAke3Nlc3Npb24ucGxhdGZvcm19OiR7c2Vzc2lvbi5ncm91cElkfWAgfSkucHJvamVjdCh7IF9pZDogMSB9KS50b0FycmF5KCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXBvcy5tYXAoKGRvYykgPT4gZG9jLl9pZCkuam9pbignXFxuJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYXBwLnNlbGVjdCgnZ3JvdXBJZCcpLmNvbW1hbmQoJ2dpdGh1Yi5jYW5jZWwgPHJlcG8+JywgJ+WPlua2iOS4gOS4qlJlcG9zaXRvcnnnmoTkuovku7YnKVxyXG4gICAgICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSwgcmVwbykgPT4ge1xyXG4gICAgICAgICAgICBhd2FpdCBjb2xsLnVwZGF0ZU9uZSh7IF9pZDogcmVwby50b0xvd2VyQ2FzZSgpIH0sIHsgJHB1bGw6IHsgdGFyZ2V0OiBgJHtzZXNzaW9uLnBsYXRmb3JtfToke3Nlc3Npb24uZ3JvdXBJZH1gIH0gfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBgQ2FuY2VsbGVkICR7cmVwb30uYDtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59O1xyXG5leHBvcnRzLmFwcGx5ID0gYXBwbHk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdpdGh1Yi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmFwcGx5ID0gdm9pZCAwO1xyXG5jb25zdCBjaGlsZF9wcm9jZXNzXzEgPSByZXF1aXJlKFwiY2hpbGRfcHJvY2Vzc1wiKTtcclxuY29uc3QgcGF0aF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJwYXRoXCIpKTtcclxuY29uc3Qgb3NfMSA9IHJlcXVpcmUoXCJvc1wiKTtcclxuY29uc3Qga29pc2hpX3V0aWxzXzEgPSByZXF1aXJlKFwia29pc2hpLXV0aWxzXCIpO1xyXG5jb25zdCBmc19leHRyYV8xID0gcmVxdWlyZShcImZzLWV4dHJhXCIpO1xyXG5jb25zdCBhcHBseSA9IChjdHgpID0+IHtcclxuICAgIGN0eC5jb21tYW5kKCdnbGFkb3MgPG1lc3NhZ2U6dGV4dD4nLCAnR2xhZG9zJywgeyBtaW5JbnRlcnZhbDogMzAwMDAgfSlcclxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSwgdGV4dCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGlkID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygpO1xyXG4gICAgICAgIGNvbnN0IHdhdiA9IHBhdGhfMS5kZWZhdWx0LnJlc29sdmUob3NfMS50bXBkaXIoKSwgYCR7aWR9LndhdmApO1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgIGNoaWxkX3Byb2Nlc3NfMS5leGVjKGB3Z2V0IC0tdHJpZXM9NTAgLU8gJHt3YXZ9IGh0dHBzOi8vZ2xhZG9zLmMtbmV0Lm9yZy9nZW5lcmF0ZT90ZXh0PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHRleHQpfWAsIChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlcnIpXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShlcnIpO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAocmVzKSB7XHJcbiAgICAgICAgICAgIHNlc3Npb24uc2VuZCgn6K+35rGC5q2j5Zyo5aSE55CG5Lit77yM6K+356iN5ZCO77yI6L+Z5Y+v6IO96ZyA6KaB5pWw5YiG6ZKf77yJJyk7XHJcbiAgICAgICAgICAgIGF3YWl0IGtvaXNoaV91dGlsc18xLnNsZWVwKDEwMDAwMCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlczEgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2hpbGRfcHJvY2Vzc18xLmV4ZWMoYHdnZXQgLS10cmllcz01MCAtTyAke3dhdn0gaHR0cHM6Ly9nbGFkb3MuYy1uZXQub3JnL2dlbmVyYXRlP3RleHQ9JHtlbmNvZGVVUklDb21wb25lbnQodGV4dCl9YCwgKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChyZXMxKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZXJ2aWNlIEVycm9yJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGF3YWl0IHNlc3Npb24uc2VuZChgW0NROnJlY29yZCxmaWxlPWZpbGU6Ly8ke3dhdn1dYCk7XHJcbiAgICAgICAgYXdhaXQgZnNfZXh0cmFfMS51bmxpbmsod2F2KTtcclxuICAgIH0pO1xyXG59O1xyXG5leHBvcnRzLmFwcGx5ID0gYXBwbHk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdsYWRvcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmFwcGx5ID0gdm9pZCAwO1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBnbG9iYWwtcmVxdWlyZSAqL1xyXG5jb25zdCBwYXRoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInBhdGhcIikpO1xyXG5jb25zdCBzdXBlcmFnZW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInN1cGVyYWdlbnRcIikpO1xyXG5jb25zdCBmc19leHRyYV8xID0gcmVxdWlyZShcImZzLWV4dHJhXCIpO1xyXG5jb25zdCBkYiA9IHt9O1xyXG50cnkge1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnJlc29sdmVkXHJcbiAgICBjb25zdCBjID0gcmVxdWlyZSgnLi4vLi4vLmNhY2hlL2hzX2NhcmRfemhDTi5qc29uJyk7XHJcbiAgICBmb3IgKGNvbnN0IGNhcmQgb2YgYykge1xyXG4gICAgICAgIGRiW2NhcmQuaWRdID0gY2FyZC5pZDtcclxuICAgICAgICBkYltjYXJkLm5hbWVdID0gY2FyZC5pZDtcclxuICAgIH1cclxufVxyXG5jYXRjaCAoZSkge1xyXG4gICAgLy8gSWdub3JlXHJcbn1cclxudHJ5IHtcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW5yZXNvbHZlZFxyXG4gICAgY29uc3QgYyA9IHJlcXVpcmUoJy4uLy4uLy5jYWNoZS9oc19jYXJkX2VuVVMuanNvbicpO1xyXG4gICAgZm9yIChjb25zdCBjYXJkIG9mIGMpIHtcclxuICAgICAgICBkYltjYXJkLm5hbWVdID0gY2FyZC5pZDtcclxuICAgIH1cclxufVxyXG5jYXRjaCAoZSkge1xyXG4gICAgLy8gSWdub3JlXHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gX2NhcmQoeyBzZXNzaW9uIH0sIGlkKSB7XHJcbiAgICBjb25zdCB1cmwgPSBpZC50cmltKCk7XHJcbiAgICBpZiAoIXVybClcclxuICAgICAgICByZXR1cm4gYXdhaXQgc2Vzc2lvbi5zZW5kKCfor7fovpPlhaXopoHmn6XnnIvnmoRDYXJkIElEL05hbWUnKTtcclxuICAgIGlmICghT2JqZWN0LmtleXMoZGIpLmxlbmd0aCkge1xyXG4gICAgICAgIC8vIExvYWQgQ05cclxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBzdXBlcmFnZW50XzEuZGVmYXVsdC5nZXQoJ2h0dHBzOi8vYXBpLmhlYXJ0aHN0b25lanNvbi5jb20vdjEvbGF0ZXN0L3poQ04vY2FyZHMuY29sbGVjdGlibGUuanNvbicpO1xyXG4gICAgICAgIGF3YWl0IGZzX2V4dHJhXzEud3JpdGVGaWxlKHBhdGhfMS5kZWZhdWx0LnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnLi4nLCAnLmNhY2hlJywgJ2hzX2NhcmRfemhDTi5qc29uJyksIEpTT04uc3RyaW5naWZ5KHJlcy5ib2R5KSk7XHJcbiAgICAgICAgZm9yIChjb25zdCBjYXJkIG9mIHJlcy5ib2R5KSB7XHJcbiAgICAgICAgICAgIGRiW2NhcmQuaWRdID0gY2FyZC5pZDtcclxuICAgICAgICAgICAgZGJbY2FyZC5uYW1lXSA9IGNhcmQuaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIExvYWQgRU5cclxuICAgICAgICBjb25zdCByZSA9IGF3YWl0IHN1cGVyYWdlbnRfMS5kZWZhdWx0LmdldCgnaHR0cHM6Ly9hcGkuaGVhcnRoc3RvbmVqc29uLmNvbS92MS9sYXRlc3QvZW5VUy9jYXJkcy5jb2xsZWN0aWJsZS5qc29uJyk7XHJcbiAgICAgICAgYXdhaXQgZnNfZXh0cmFfMS53cml0ZUZpbGUocGF0aF8xLmRlZmF1bHQucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICcuLicsICcuY2FjaGUnLCAnaHNfY2FyZF9lblVTLmpzb24nKSwgSlNPTi5zdHJpbmdpZnkocmUuYm9keSkpO1xyXG4gICAgICAgIGZvciAoY29uc3QgY2FyZCBvZiByZS5ib2R5KSB7XHJcbiAgICAgICAgICAgIGRiW2NhcmQubmFtZV0gPSBjYXJkLmlkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghZGJbaWRdKVxyXG4gICAgICAgIHJldHVybiBhd2FpdCBzZXNzaW9uLnNlbmQoJ05vdEZvdW5kJyk7XHJcbiAgICByZXR1cm4gc2Vzc2lvbi5zZW5kKGBbQ1E6aW1hZ2UsZmlsZT1odHRwczovL2FydC5oZWFydGhzdG9uZWpzb24uY29tL3YxL3JlbmRlci9sYXRlc3QvemhDTi81MTJ4LyR7ZGJbaWRdfS5wbmddYCk7XHJcbn1cclxuY29uc3QgYXBwbHkgPSAoYXBwKSA9PiB7XHJcbiAgICBhcHAuY29tbWFuZCgnY2FyZCA8bmFtZS9pZDp0ZXh0PicsICdHZXQgYSBjYXJkJykuYWN0aW9uKF9jYXJkKTtcclxufTtcclxuZXhwb3J0cy5hcHBseSA9IGFwcGx5O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWFydGhzdG9uZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmFwcGx5ID0gdm9pZCAwO1xyXG5jb25zdCBBTExPVyA9IFtcclxuICAgICcxMDAnLCAnMTAxJywgJzIwMCcsICcyMDEnLCAnMjAyJyxcclxuICAgICcyMDQnLCAnMjA2JywgJzIwNycsICczMDAnLCAnMzAxJyxcclxuICAgICczMDInLCAnMzAzJywgJzMwNCcsICczMDUnLCAnMzA3JyxcclxuICAgICc0MDAnLCAnNDAxJywgJzQwMicsICc0MDMnLCAnNDA0JyxcclxuICAgICc0MDUnLCAnNDA2JywgJzQwOCcsICc0MDknLCAnNDEwJyxcclxuICAgICc0MTEnLCAnNDEyJywgJzQxMycsICc0MTQnLCAnNDE1JyxcclxuICAgICc0MTYnLCAnNDE3JywgJzQxOCcsICc0MjAnLCAnNDIxJyxcclxuICAgICc0MjInLCAnNDIzJywgJzQyNCcsICc0MjUnLCAnNDI2JyxcclxuICAgICc0MjknLCAnNDMxJywgJzQ0NCcsICc0NTAnLCAnNDUxJyxcclxuICAgICc0OTknLCAnNTAwJywgJzUwMScsICc1MDInLCAnNTAzJyxcclxuICAgICc1MDQnLCAnNTA1JywgJzUwNicsICc1MDcnLCAnNTA4JyxcclxuICAgICc1MDknLCAnNTEwJywgJzUxMScsICc1OTknLFxyXG5dO1xyXG5mdW5jdGlvbiBhcHBseShhcHApIHtcclxuICAgIGFwcC5jb21tYW5kKCdjYXQgPGlkPicsICdodHRwLmNhdCcsIHsgbWluSW50ZXJ2YWw6IDEwMDAgfSlcclxuICAgICAgICAuYWN0aW9uKGFzeW5jIChfLCBpZCkgPT4ge1xyXG4gICAgICAgIGlmICghQUxMT1cuaW5jbHVkZXMoaWQpKVxyXG4gICAgICAgICAgICByZXR1cm4gYOS9oOWutmh0dHDljY/orq7kvJrov5Tlm54ke2lkfe+8n2A7XHJcbiAgICAgICAgcmV0dXJuIGBbQ1E6aW1hZ2UsZmlsZT1odHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvZ2gvaHR0cGNhdHMvaHR0cC5jYXQvcHVibGljL2ltYWdlcy8ke2lkfS5qcGddYDtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuYXBwbHkgPSBhcHBseTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHR0cGNhdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmFwcGx5ID0gdm9pZCAwO1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tZHluYW1pYy1yZXF1aXJlICovXHJcbmNvbnN0IHBhdGhfMSA9IHJlcXVpcmUoXCJwYXRoXCIpO1xyXG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XHJcbmNvbnN0IGtvaXNoaV9jb3JlXzEgPSByZXF1aXJlKFwia29pc2hpLWNvcmVcIik7XHJcbmNvbnN0IGpzX3lhbWxfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwianMteWFtbFwiKSk7XHJcbmNvbnN0IGF4aW9zXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImF4aW9zXCIpKTtcclxuY29uc3QgZnNfZXh0cmFfMSA9IHJlcXVpcmUoXCJmcy1leHRyYVwiKTtcclxuY29uc3Qgc2hhcnBfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwic2hhcnBcIikpO1xyXG5jb25zdCBsb2dnZXIgPSBuZXcga29pc2hpX2NvcmVfMS5Mb2dnZXIoJ2ltYWdldGFnJyk7XHJcbmNvbnN0IGltYWdlUkUgPSAvKFxcW0NROmltYWdlLGZpbGU9W14sXSssdXJsPVteXFxdXStcXF0pLztcclxuY29uc3QgY2hlY2tHcm91cEFkbWluID0gKHsgc2Vzc2lvbiB9KSA9PiAoKHNlc3Npb24udXNlci5hdXRob3JpdHkgPj0gNCB8fCBzZXNzaW9uLmF1dGhvci5yb2xlcy5pbmNsdWRlcygnYWRtaW4nKSB8fCBzZXNzaW9uLmF1dGhvci5yb2xlcy5pbmNsdWRlcygnb3duZXInKSlcclxuICAgID8gbnVsbFxyXG4gICAgOiAn5LuF566h55CG5ZGY5Y+v5omn6KGM6K+l5pON5L2c44CCJyk7XHJcbmZ1bmN0aW9uIE1ENShidWZmZXIpIHtcclxuICAgIGNvbnN0IGhhc2ggPSBjcnlwdG9fMS5jcmVhdGVIYXNoKCdtZDUnKTtcclxuICAgIGhhc2gudXBkYXRlKGJ1ZmZlcik7XHJcbiAgICByZXR1cm4gaGFzaC5kaWdlc3QoJ2hleCcpO1xyXG59XHJcbmNvbnN0IGFwcGx5ID0gYXN5bmMgKGN0eCwgY29uZmlnID0ge30pID0+IHtcclxuICAgIGNvbnN0IHRyYW5zZmlsZSA9IGF3YWl0IGZzX2V4dHJhXzEucmVhZEZpbGUocGF0aF8xLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnLi4nLCAnZGF0YWJhc2UnLCAnaW1hZ2UudGFncy50cmFuc2xhdGlvbi55YW1sJykpO1xyXG4gICAgY29uc3QgdHJhbnMgPSBqc195YW1sXzEuZGVmYXVsdC5zYWZlTG9hZCh0cmFuc2ZpbGUudG9TdHJpbmcoKSk7XHJcbiAgICBjb25zdCBuYW1lcyA9IHJlcXVpcmUoJy4uLy4uL2RhdGFiYXNlL2NsYXNzX25hbWVzXzYwMDAuanNvbicpO1xyXG4gICAgY3R4Lm9uKCdiZWZvcmUtYXR0YWNoLWNoYW5uZWwnLCAoXywgZmllbGRzKSA9PiB7XHJcbiAgICAgICAgZmllbGRzLmFkZCgnZW5hYmxlQXV0b1RhZycpO1xyXG4gICAgfSk7XHJcbiAgICBjdHgubWlkZGxld2FyZShhc3luYyAoc2Vzc2lvbiwgbmV4dCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNhcHR1cmUgPSBpbWFnZVJFLmV4ZWMoc2Vzc2lvbi5jb250ZW50KTtcclxuICAgICAgICBpZiAoY2FwdHVyZSkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGlmIChzZXNzaW9uLmNoYW5uZWwuZW5hYmxlQXV0b1RhZyA9PT0gMilcclxuICAgICAgICAgICAgICAgIHNlc3Npb24uZXhlY3V0ZVNpbGVudChgdGFnICR7Y2FwdHVyZVsxXX1gKTtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzZXNzaW9uLmNoYW5uZWwuZW5hYmxlQXV0b1RhZyA9PT0gMSlcclxuICAgICAgICAgICAgICAgIHNlc3Npb24uZXhlY3V0ZShgdGFnICR7Y2FwdHVyZVsxXX1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5leHQoKTtcclxuICAgIH0pO1xyXG4gICAgY3R4LmFwcC5vbignY29ubmVjdCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCBjb2xsID0gY3R4LmFwcC5kYXRhYmFzZS5tb25nby5jb2xsZWN0aW9uKCdpbWFnZS50YWcnKTtcclxuICAgICAgICBjb2xsLmNyZWF0ZUluZGV4KHsgbWQ1OiAxIH0sIHsgdW5pcXVlOiB0cnVlIH0pO1xyXG4gICAgICAgIGN0eC5jb21tYW5kKCd0YWcgW2ltYWdlXScsICdHZXQgaW1hZ2UgdGFnJywgeyBoaWRkZW46IHRydWUsIG1pbkludGVydmFsOiAyMDAwIH0pXHJcbiAgICAgICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9LCBpbWFnZSkgPT4ge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpbWFnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHNlc3Npb24uc2VuZCgn6K+35Y+R6YCB5Zu+54mH44CCJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2UgPSBhd2FpdCBzZXNzaW9uLnByb21wdCgzMDAwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsZXQgaWQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgdXJsID0gaW1hZ2U7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlID0ga29pc2hpX2NvcmVfMS5zZWdtZW50LmZyb20oaW1hZ2UpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZS50eXBlICE9PSAnaW1hZ2UnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+ayoeacieWPkeeOsOWbvueJh+OAgicpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVybCA9IGZpbGUuZGF0YS51cmw7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQgPSBmaWxlLmRhdGEuZmlsZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghdXJsLnN0YXJ0c1dpdGgoJ2h0dHAnKSlcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+ayoeacieWPkeeOsOWbvueJh+OAgicpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpZClcclxuICAgICAgICAgICAgICAgICAgICBpZCA9IEJ1ZmZlci5mcm9tKHVybCkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGMgPSBhd2FpdCBjb2xsLmZpbmRPbmUoeyBfaWQ6IGlkIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGMpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMudHh0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBheGlvc18xLmRlZmF1bHQuZ2V0KHVybCwgeyByZXNwb25zZVR5cGU6ICdhcnJheWJ1ZmZlcicgfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBidWYgPSBCdWZmZXIuYWxsb2MoZGF0YS5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgVWludDhBcnJheShkYXRhKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmLmxlbmd0aDsgKytpKVxyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZltpXSA9IHZpZXdbaV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZDUgPSBNRDUoYnVmKTtcclxuICAgICAgICAgICAgICAgIGMgPSBhd2FpdCBjb2xsLmZpbmRPbmUoeyBtZDUgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYylcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYy50eHQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbWcgPSAoYXdhaXQgc2hhcnBfMS5kZWZhdWx0KGJ1ZikucG5nKCkudG9CdWZmZXIoKSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ2Rvd25sb2FkZWQnKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YTogcHJvYnMgfSA9IGF3YWl0IGF4aW9zXzEuZGVmYXVsdC5wb3N0KCdodHRwOi8vMTI3LjAuMC4xOjEwMzc3LycsIHsgaW1nIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9icyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZXJybXNnID0gcHJvYnMuc3BsaXQoJ0hUVFAnKVswXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvYnMuaW5jbHVkZXMoJ291dHB1dCB3aXRoIHNoYXBlJykgfHwgcHJvYnMuaW5jbHVkZXMoJ3NpemUgb2YgdGVuc29yJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJybXNnID0gJ+S4jeaUr+aMgeeahOWbvueJh+agvOW8j++8iOivt+WwneivleaIquWbvuWPkemAge+8iSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGNvbGwuaW5zZXJ0T25lKHsgX2lkOiBpZCwgbWQ1LCB0eHQ6IGVycm1zZyB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm1zZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YWdzID0gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgdHh0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgcHJvYnMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWdzLnB1c2gobmFtZXNbaVswXV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHR4dCArPSBgJHt0cmFuc1tuYW1lc1tpWzBdXV0gfHwgbmFtZXNbaVswXV19OiR7TWF0aC5mbG9vcihpWzFdICogMTAwKX0lICBgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8odHh0KTtcclxuICAgICAgICAgICAgICAgIGlmIChjb25maWcudXJsICYmIGNvbmZpZy50YWdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0YWcgb2YgdGFncykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnLnRhZ3MuaW5jbHVkZXModGFnKSB8fCB0YWdzLmxlbmd0aCA+IDcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF4aW9zXzEuZGVmYXVsdC5nZXQoYCR7Y29uZmlnLnVybH0mc291cmNlPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHVybCl9JmZvcm1hdD1qc29uYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGF3YWl0IGNvbGwuaW5zZXJ0T25lKHsgX2lkOiBpZCwgbWQ1LCB0eHQgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHh0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZS50b1N0cmluZygpLnNwbGl0KCdcXG4nKVswXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGN0eC5jb21tYW5kKCd0YWcuZGlzYWJsZScsICflnKjnvqTlhoXnpoHnlKgnLCB7IG5vUmVkaXJlY3Q6IHRydWUgfSlcclxuICAgICAgICAgICAgLnVzZXJGaWVsZHMoWydhdXRob3JpdHknXSlcclxuICAgICAgICAgICAgLmNoZWNrKGNoZWNrR3JvdXBBZG1pbilcclxuICAgICAgICAgICAgLmNoYW5uZWxGaWVsZHMoWydlbmFibGVBdXRvVGFnJ10pXHJcbiAgICAgICAgICAgIC5hY3Rpb24oKHsgc2Vzc2lvbiB9KSA9PiB7XHJcbiAgICAgICAgICAgIHNlc3Npb24uY2hhbm5lbC5lbmFibGVBdXRvVGFnID0gMDtcclxuICAgICAgICAgICAgcmV0dXJuICdEaXNhYmxlZCc7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY3R4LmNvbW1hbmQoJ3RhZy5lbmFibGUnLCAn5Zyo576k5YaF5ZCv55SoJywgeyBub1JlZGlyZWN0OiB0cnVlIH0pXHJcbiAgICAgICAgICAgIC5vcHRpb24oJ3NpbGVudCcsICctcycpXHJcbiAgICAgICAgICAgIC51c2VyRmllbGRzKFsnYXV0aG9yaXR5J10pXHJcbiAgICAgICAgICAgIC5jaGVjayhjaGVja0dyb3VwQWRtaW4pXHJcbiAgICAgICAgICAgIC5jaGFubmVsRmllbGRzKFsnZW5hYmxlQXV0b1RhZyddKVxyXG4gICAgICAgICAgICAuYWN0aW9uKCh7IHNlc3Npb24sIG9wdGlvbnMgfSkgPT4ge1xyXG4gICAgICAgICAgICBzZXNzaW9uLmNoYW5uZWwuZW5hYmxlQXV0b1RhZyA9IG9wdGlvbnMuc2lsZW50ID8gMiA6IDE7XHJcbiAgICAgICAgICAgIHJldHVybiAnZW5hYmxlZCc7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufTtcclxuZXhwb3J0cy5hcHBseSA9IGFwcGx5O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbWFnZXRhZy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmFwcGx5ID0gdm9pZCAwO1xyXG5mdW5jdGlvbiBhcHBseShjdHgpIHtcclxuICAgIGN0eC5jb21tYW5kKCdqand6JywgJ+e7neWPpeaWh+eroCcpO1xyXG4gICAgY3R4LmNvbW1hbmQoJ2pqd3ouYWRkIDxjb250ZW50OnRleHQ+JywgJ+WIm+W7ui/mt7vliqAnKVxyXG4gICAgICAgIC5jaGFubmVsRmllbGRzKFsnamp3eiddKVxyXG4gICAgICAgIC51c2VyRmllbGRzKFsnaWQnXSlcclxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSwgY29udGVudCkgPT4ge1xyXG4gICAgICAgIGlmIChjb250ZW50Lmxlbmd0aCA+IDcpXHJcbiAgICAgICAgICAgIHJldHVybiAn5L2g5oCO5LmI5YaZ6L+Z5LmI6ZW/JztcclxuICAgICAgICBpZiAoIXNlc3Npb24uY2hhbm5lbC5qand6KVxyXG4gICAgICAgICAgICBzZXNzaW9uLmNoYW5uZWwuamp3eiA9IFtdO1xyXG4gICAgICAgIGVsc2UgaWYgKChzZXNzaW9uLmNoYW5uZWwuamp3eltzZXNzaW9uLmNoYW5uZWwuamp3ei5sZW5ndGggLSAxXSB8fCBbXSlbMF0gPT09ICtzZXNzaW9uLnVzZXIuaWQpXHJcbiAgICAgICAgICAgIHJldHVybiAn5L2g5LiN6IO96L+e57ut5re75YqgJztcclxuICAgICAgICBzZXNzaW9uLmNoYW5uZWwuamp3ei5wdXNoKFsrc2Vzc2lvbi51c2VyLmlkLCBjb250ZW50XSk7XHJcbiAgICAgICAgcmV0dXJuIGAke3Nlc3Npb24uY2hhbm5lbC5qand6Lm1hcCgoaSkgPT4gaVsxXSkuam9pbignJyl9Li4uYDtcclxuICAgIH0pO1xyXG4gICAgY3R4LmNvbW1hbmQoJ2pqd3ouZW5kJywgJ+e7k+adnycpXHJcbiAgICAgICAgLmNoYW5uZWxGaWVsZHMoWydqand6J10pXHJcbiAgICAgICAgLnVzZXJGaWVsZHMoWydpZCddKVxyXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9KSA9PiB7XHJcbiAgICAgICAgaWYgKCFzZXNzaW9uLmNoYW5uZWwuamp3eilcclxuICAgICAgICAgICAgcmV0dXJuICfov5jmnKrlvIDlp4snO1xyXG4gICAgICAgIHNlc3Npb24uY2hhbm5lbC5qand6ID0gbnVsbDtcclxuICAgICAgICByZXR1cm4gc2Vzc2lvbi5jaGFubmVsLmpqd3oubWFwKChpKSA9PiBpWzFdKS5qb2luKCcnKTtcclxuICAgIH0pO1xyXG4gICAgY3R4LmNvbW1hbmQoJ2pqd3ouZWRpdCA8Y29udGVudDp0ZXh0PicsICfnvJbovpEnKVxyXG4gICAgICAgIC5jaGFubmVsRmllbGRzKFsnamp3eiddKVxyXG4gICAgICAgIC51c2VyRmllbGRzKFsnaWQnXSlcclxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSwgY29udGVudCkgPT4ge1xyXG4gICAgICAgIGlmICghc2Vzc2lvbi5jaGFubmVsLmpqd3opXHJcbiAgICAgICAgICAgIHJldHVybiAn6L+Y5pyq5byA5aeLJztcclxuICAgICAgICBpZiAoY29udGVudC5sZW5ndGggPiA3KVxyXG4gICAgICAgICAgICByZXR1cm4gJ+S9oOaAjuS5iOWGmei/meS5iOmVvyc7XHJcbiAgICAgICAgaWYgKHNlc3Npb24uY2hhbm5lbC5qand6W3Nlc3Npb24uY2hhbm5lbC5qand6Lmxlbmd0aCAtIDFdWzBdICE9PSArc2Vzc2lvbi51c2VyLmlkKVxyXG4gICAgICAgICAgICByZXR1cm4gJ+S4iuS4gOadoeS4jeaYr+S9oOaJgOe8lui+kSc7XHJcbiAgICAgICAgc2Vzc2lvbi5jaGFubmVsLmpqd3pbc2Vzc2lvbi5jaGFubmVsLmpqd3oubGVuZ3RoIC0gMV1bMV0gPSBjb250ZW50O1xyXG4gICAgICAgIHJldHVybiBgJHtzZXNzaW9uLmNoYW5uZWwuamp3ei5tYXAoKGkpID0+IGlbMV0pLmpvaW4oJycpfS4uLmA7XHJcbiAgICB9KTtcclxuICAgIGN0eC5jb21tYW5kKCdqand6LmRlbCcsICfliKDpmaQnKVxyXG4gICAgICAgIC5jaGFubmVsRmllbGRzKFsnamp3eiddKVxyXG4gICAgICAgIC51c2VyRmllbGRzKFsnaWQnXSlcclxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSkgPT4ge1xyXG4gICAgICAgIGlmICghc2Vzc2lvbi5jaGFubmVsLmpqd3opXHJcbiAgICAgICAgICAgIHJldHVybiAn6L+Y5pyq5byA5aeLJztcclxuICAgICAgICBpZiAoc2Vzc2lvbi5jaGFubmVsLmpqd3pbc2Vzc2lvbi5jaGFubmVsLmpqd3oubGVuZ3RoIC0gMV1bMF0gIT09ICtzZXNzaW9uLnVzZXIuaWQpXHJcbiAgICAgICAgICAgIHJldHVybiAn5LiK5LiA5p2h5LiN5piv5L2g5omA57yW6L6RJztcclxuICAgICAgICBzZXNzaW9uLmNoYW5uZWwuamp3ei5wb3AoKTtcclxuICAgICAgICByZXR1cm4gYCR7c2Vzc2lvbi5jaGFubmVsLmpqd3oubWFwKChpKSA9PiBpWzFdKS5qb2luKCcnKX0uLi5gO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5hcHBseSA9IGFwcGx5O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1qand6LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuYXBwbHkgPSB2b2lkIDA7XHJcbmNvbnN0IG1vbmdvZGJfMSA9IHJlcXVpcmUoXCJtb25nb2RiXCIpO1xyXG5jb25zdCBtb21lbnRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibW9tZW50XCIpKTtcclxuY29uc3QgZXhwaXJlXzEgPSByZXF1aXJlKFwiLi4vbGliL2V4cGlyZVwiKTtcclxubW9tZW50XzEuZGVmYXVsdC5sb2NhbGUoJ3poLWNuJyk7XHJcbmNvbnN0IGRlZmF1bHRDb25maWcgPSB7XHJcbiAgICBleHBpcmVEYXlzOiA3LFxyXG4gICAgc2VydmljZUZlZTogMC4wMyxcclxuICAgIG1heEJ1eVBlckRheTogMTAsXHJcbn07XHJcbmNvbnN0IGFwcGx5ID0gKGFwcCwgY29uZmlnKSA9PiB7XHJcbiAgICBjb25maWcgPSB7IC4uLmRlZmF1bHRDb25maWcsIC4uLmNvbmZpZyB9O1xyXG4gICAgYXBwLm9uKCdjb25uZWN0JywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHByaWNlQ29sbCA9IGFwcC5kYXRhYmFzZS5tb25nby5jb2xsZWN0aW9uKCdrYWJ1LnByaWNlJyk7XHJcbiAgICAgICAgcHJpY2VDb2xsLmNyZWF0ZUluZGV4KCdleHBpcmUnLCB7IGV4cGlyZUFmdGVyU2Vjb25kczogMCB9KTtcclxuICAgICAgICBjb25zdCBzdG9ja0NvbGwgPSBhcHAuZGF0YWJhc2UubW9uZ28uY29sbGVjdGlvbigna2FidS5zdG9jaycpO1xyXG4gICAgICAgIHN0b2NrQ29sbC5jcmVhdGVJbmRleCh7IHVzZXJJZDogMSwgZXhwaXJlOiAxIH0pO1xyXG4gICAgICAgIHN0b2NrQ29sbC5jcmVhdGVJbmRleCgnZXhwaXJlJywgeyBleHBpcmVBZnRlclNlY29uZHM6IDAgfSk7XHJcbiAgICAgICAgYXN5bmMgZnVuY3Rpb24gcHJpY2VUb2RheShfaWQpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcHJpY2VDb2xsLmZpbmRPbmUoeyBfaWQgfSk7XHJcbiAgICAgICAgICAgIGlmIChyZXMpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW3Jlcy5wcmljZSwgcmVzLmJvdWdodCB8fCAwXTtcclxuICAgICAgICAgICAgY29uc3QgcHJpY2UgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgPCAwLjUgPyAxMCArIE1hdGguc3FydChNYXRoLnJhbmRvbSgpICogNDAwKSA6IDUwIC0gTWF0aC5zcXJ0KE1hdGgucmFuZG9tKCkgKiA0MDApKTtcclxuICAgICAgICAgICAgYXdhaXQgcHJpY2VDb2xsLmluc2VydE9uZSh7XHJcbiAgICAgICAgICAgICAgICBfaWQsIHByaWNlLCBleHBpcmU6IGV4cGlyZV8xLmVuZE9mVG9kYXkoKSwgYm91Z2h0OiAwLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIFtwcmljZSwgMF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFwcC5jb21tYW5kKCdrYWJ1LnF1ZXJ5JywgJ+afpeivouiHquW3seeahOW6k+WtmOS7peWPiuS7iuaXpeWkp+WktOiPnOS7t+agvCcpXHJcbiAgICAgICAgICAgIC5zaG9ydGN1dCgn5p+l6K+i5aSn5aS06I+cJywgeyBwcmVmaXg6IGZhbHNlIH0pXHJcbiAgICAgICAgICAgIC51c2VyRmllbGRzKFsnY29pbicsICdpZCddKVxyXG4gICAgICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBbcmVzLCBjb3VudF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXHJcbiAgICAgICAgICAgICAgICBzdG9ja0NvbGwuZmluZCh7IHVzZXJJZDogK3Nlc3Npb24udXNlci5pZCB9KS5zb3J0KCdleHBpcmUnLCAxKS5saW1pdCgxMCkudG9BcnJheSgpLFxyXG4gICAgICAgICAgICAgICAgc3RvY2tDb2xsLmZpbmQoeyB1c2VySWQ6ICtzZXNzaW9uLnVzZXIuaWQgfSkuY291bnQoKSxcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgIGxldCBzdG9ja0xpc3QgPSAnJztcclxuICAgICAgICAgICAgbGV0IHN1bSA9IDA7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgeyBudW1iZXIsIGJ1eVByaWNlLCBleHBpcmUgfSBvZiByZXMpIHtcclxuICAgICAgICAgICAgICAgIHN1bSArPSBudW1iZXI7XHJcbiAgICAgICAgICAgICAgICBzdG9ja0xpc3QgKz0gYOS9oOaciSAke251bWJlcn0g5qO15LulICR7YnV5UHJpY2V9IOS4quehrOW4geavj+ajteS5sOWFpeeahOWkp+WktOiPnO+8jOWug+S7rOS8muWcqCAke21vbWVudF8xLmRlZmF1bHQoZXhwaXJlKS5mcm9tTm93KCl9IOeDguaOieOAglxcbmA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgW3ByaWNlLCBib3VnaHRdID0gYXdhaXQgcHJpY2VUb2RheSgrc2Vzc2lvbi51c2VyLmlkKTtcclxuICAgICAgICAgICAgY29uc3QgY2FuQnV5ID0gY29uZmlnLm1heEJ1eVBlckRheSAtIGJvdWdodDtcclxuICAgICAgICAgICAgaWYgKCFzZXNzaW9uLnVzZXIuY29pbilcclxuICAgICAgICAgICAgICAgIHNlc3Npb24udXNlci5jb2luID0gMDtcclxuICAgICAgICAgICAgaWYgKGNvdW50ID09PSAwKVxyXG4gICAgICAgICAgICAgICAgc3RvY2tMaXN0ID0gYOS9oOeOsOWcqOaJi+S4iui/mOayoeacieWkp+WktOiPnCR7KHNlc3Npb24udXNlci5jb2luID49IHByaWNlICYmIGNhbkJ1eSkgPyAn77yM6KaB5p2l5Lmw54K55ZCX77yfJyA6ICfjgIInfWA7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNvdW50ID4gcmVzLmxlbmd0aClcclxuICAgICAgICAgICAgICAgIHN0b2NrTGlzdCArPSBg6ZqQ6JeP5LqGICR7Y291bnQgLSByZXMubGVuZ3RofSDkuKrmnaHnm67jgIJgO1xyXG4gICAgICAgICAgICByZXR1cm4gYOS9oOeOsOWcqOWFseaciSAke3N1bX0g5qO15aSn5aS06I+c5ZKMICR7c2Vzc2lvbi51c2VyLmNvaW59IOS4quehrOW4geOAglxu5LuK5aSp5Y2W57uZICR7c2Vzc2lvbi51c2VybmFtZX0g55qE5aSn5aS06I+c5Lu35qC85piv5q+P5qO1ICR7cHJpY2V9IOehrOW4geOAguaCqOS7iuWkqei/mOWPr+i0reWFpSR7Y2FuQnV5feS4quWkp+WktOiPnOOAglxuJHtzdG9ja0xpc3R9YDtcclxuICAgICAgICB9KTtcclxuICAgICAgICBhcHAuY29tbWFuZCgna2FidS5idXkgW251bWJlcl0nLCBg6LSt5Lmw5aSn5aS06I+c44CC6Iul5LiN5oyH5a6a5pWw6YeP5YiZ5bC96YeP5aSa5Zyw6LSt5Lmw44CC5omL57ut6LS5ICR7Y29uZmlnLnNlcnZpY2VGZWUgKiAxMDB9JeOAgmAsIHsgbm9SZWRpcmVjdDogdHJ1ZSB9KVxyXG4gICAgICAgICAgICAuc2hvcnRjdXQoJ+i0reS5sOWkp+WktOiPnCcsIHsgcHJlZml4OiBmYWxzZSwgZnV6enk6IHRydWUgfSlcclxuICAgICAgICAgICAgLnVzZXJGaWVsZHMoWydjb2luJywgJ2lkJ10pXHJcbiAgICAgICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiB9LCBhcmcpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgW3ByaWNlLCBib3VnaHRdID0gYXdhaXQgcHJpY2VUb2RheSgrc2Vzc2lvbi51c2VyLmlkKTtcclxuICAgICAgICAgICAgaWYgKCFzZXNzaW9uLnVzZXIuY29pbilcclxuICAgICAgICAgICAgICAgIHNlc3Npb24udXNlci5jb2luID0gMDtcclxuICAgICAgICAgICAgY29uc3QgbWF4TnVtYmVyID0gTWF0aC5mbG9vcihzZXNzaW9uLnVzZXIuY29pbiAvIHByaWNlIC8gKDEgKyBjb25maWcuc2VydmljZUZlZSkpO1xyXG4gICAgICAgICAgICBjb25zdCBudW1iZXIgPSBNYXRoLm1pbihjb25maWcubWF4QnV5UGVyRGF5IC0gYm91Z2h0LCArKGFyZyAhPT0gbnVsbCAmJiBhcmcgIT09IHZvaWQgMCA/IGFyZyA6IG1heE51bWJlcikpO1xyXG4gICAgICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIobnVtYmVyKSB8fCBudW1iZXIgPD0gMCB8fCBudW1iZXIgPiBtYXhOdW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBg6LSt5Lmw5pWw6YeP6ZyA6KaB5pivIDF+JHttYXhOdW1iZXJ9IOS5i+mXtOeahOato+aVtOaVsOOAgmA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgZXhwaXJlID0gbW9tZW50XzEuZGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBleHBpcmUuYWRkKGNvbmZpZy5leHBpcmVEYXlzLCAnZGF5cycpO1xyXG4gICAgICAgICAgICBhd2FpdCBzdG9ja0NvbGwuaW5zZXJ0T25lKHtcclxuICAgICAgICAgICAgICAgIF9pZDogbmV3IG1vbmdvZGJfMS5PYmplY3RJRCgpLFxyXG4gICAgICAgICAgICAgICAgdXNlcklkOiArc2Vzc2lvbi51c2VyLmlkLFxyXG4gICAgICAgICAgICAgICAgbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgYnV5UHJpY2U6IHByaWNlLFxyXG4gICAgICAgICAgICAgICAgZXhwaXJlOiBleHBpcmUudG9EYXRlKCksXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjb25zdCBjb3N0ID0gTWF0aC5jZWlsKCgxICsgY29uZmlnLnNlcnZpY2VGZWUpICogcHJpY2UgKiBudW1iZXIpO1xyXG4gICAgICAgICAgICBzZXNzaW9uLnVzZXIuY29pbiAtPSBjb3N0O1xyXG4gICAgICAgICAgICBhd2FpdCBwcmljZUNvbGwudXBkYXRlT25lKHsgX2lkOiArc2Vzc2lvbi51c2VyLmlkIH0sIHsgJHNldDogeyBib3VnaHQ6IG51bWJlciArIGJvdWdodCB9IH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gYOS9oOiKseS6hiAke2Nvc3R9IOS4quehrOW4ge+8iOWQqyAke2Nvc3QgLSBwcmljZSAqIG51bWJlcn0g5Liq56Gs5biB55qE5omL57ut6LS577yJ5LulICR7cHJpY2V9IOavj+ajteeahOS7t+agvOi0reS5sOS6hiAke251bWJlcn0g5qO15aSn5aS06I+c44CCXG7opoHmmK/kvaDmsqHmnInlnKggJHtjb25maWcuZXhwaXJlRGF5c30g5aSp5YaF5oqK5aSn5aS06I+c5Y2W5o6J77yM5a6D5Lus5bCx5Lya5YWo6YOo54OC5o6J77yM5a6z5L2g5aSn5LqP5pys77yB5LiA5a6a6KaB5rOo5oSP6L+Z5LiA54K55ZaU44CCYDtcclxuICAgICAgICB9KTtcclxuICAgICAgICBhcHAuY29tbWFuZCgna2FidS5zZWxsIFtudW1iZXJdJywgYOWNluWHuuacgOaXqei0reS5sO+8iOacgOWFiOeDguaOie+8ieeahOWkp+WktOiPnOOAguiLpeS4jeaMh+WumuaVsOmHj+WImeWFqOmDqOWNluWHuuOAguaJi+e7rei0uSAke2NvbmZpZy5zZXJ2aWNlRmVlICogMTAwfSXjgIJgLCB7IG5vUmVkaXJlY3Q6IHRydWUgfSlcclxuICAgICAgICAgICAgLnNob3J0Y3V0KCfljZblh7rlpKflpLToj5wnLCB7IHByZWZpeDogZmFsc2UsIGZ1enp5OiB0cnVlIH0pXHJcbiAgICAgICAgICAgIC51c2VyRmllbGRzKFsnY29pbicsICdpZCddKVxyXG4gICAgICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSwgYXJnKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGxOdW1iZXIgPSArKGFyZyAhPT0gbnVsbCAmJiBhcmcgIT09IHZvaWQgMCA/IGFyZyA6IEluZmluaXR5KTtcclxuICAgICAgICAgICAgaWYgKHNlbGxOdW1iZXIgIT09IEluZmluaXR5ICYmICghTnVtYmVyLmlzSW50ZWdlcihzZWxsTnVtYmVyKSB8fCBzZWxsTnVtYmVyIDw9IDApKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICfljZblh7rnmoTmlbDph4/pnIDopoHmmK/kuIDkuKrmraPmlbTmlbAnO1xyXG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBzdG9ja0NvbGwuZmluZCh7IHVzZXJJZDogK3Nlc3Npb24udXNlci5pZCB9KS5zb3J0KCdleHBpcmUnLCAxKS50b0FycmF5KCk7XHJcbiAgICAgICAgICAgIGxldCBzdW0gPSAwO1xyXG4gICAgICAgICAgICBsZXQgdXBkYXRlID0gbnVsbDtcclxuICAgICAgICAgICAgY29uc3QgZGVsZXRlSWRzID0gW107XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiByZXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdW0gKyBpdGVtLm51bWJlciA8PSBzZWxsTnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VtICs9IGl0ZW0ubnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZUlkcy5wdXNoKGl0ZW0uX2lkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN1bSA8IHNlbGxOdW1iZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGUgPSB7IF9pZDogaXRlbS5faWQsIG5ld051bWJlcjogaXRlbS5udW1iZXIgLSAoc2VsbE51bWJlciAtIHN1bSkgfTtcclxuICAgICAgICAgICAgICAgICAgICBzdW0gPSBzZWxsTnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzdW0gPT09IDAgfHwgKHNlbGxOdW1iZXIgIT09IEluZmluaXR5ICYmIHN1bSAhPT0gc2VsbE51bWJlcikpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S9oOayoeaciei2s+Wkn+WkmueahOWkp+WktOiPnOadpeWNluWHuu+8gSc7XHJcbiAgICAgICAgICAgIGNvbnN0IFtwcmljZV0gPSBhd2FpdCBwcmljZVRvZGF5KCtzZXNzaW9uLnVzZXIuaWQpO1xyXG4gICAgICAgICAgICBpZiAoIXNlc3Npb24udXNlci5jb2luKVxyXG4gICAgICAgICAgICAgICAgc2Vzc2lvbi51c2VyLmNvaW4gPSAwO1xyXG4gICAgICAgICAgICBjb25zdCBnYWluID0gTWF0aC5mbG9vcigoMSAtIGNvbmZpZy5zZXJ2aWNlRmVlKSAqIHN1bSAqIHByaWNlKTtcclxuICAgICAgICAgICAgc2Vzc2lvbi51c2VyLmNvaW4gKz0gZ2FpbjtcclxuICAgICAgICAgICAgaWYgKGRlbGV0ZUlkcy5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICBhd2FpdCBzdG9ja0NvbGwuZGVsZXRlTWFueSh7IF9pZDogeyAkaW46IGRlbGV0ZUlkcyB9IH0pO1xyXG4gICAgICAgICAgICBpZiAodXBkYXRlKVxyXG4gICAgICAgICAgICAgICAgYXdhaXQgc3RvY2tDb2xsLnVwZGF0ZU9uZSh7IF9pZDogdXBkYXRlLl9pZCB9LCB7ICRzZXQ6IHsgbnVtYmVyOiB1cGRhdGUubmV3TnVtYmVyIH0gfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBg5L2g5bey5oiQ5Yqf5Y2W5Ye6ICR7c3VtfSDmo7XlpKflpLToj5zvvIzojrflvpfkuoYgJHtnYWlufSDkuKrnoazluIHvvIjlt7LmiaPpmaQgJHtzdW0gKiBwcmljZSAtIGdhaW59IOS4quehrOW4geeahOaJi+e7rei0ue+8ie+8gWA7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGFwcC5jb21tYW5kKCdrYWJ1JywgJ+Wkp+WktOiPnCcpO1xyXG59O1xyXG5leHBvcnRzLmFwcGx5ID0gYXBwbHk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWthYnUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5hcHBseSA9IHZvaWQgMDtcclxuY29uc3Qgc3VwZXJhZ2VudF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJzdXBlcmFnZW50XCIpKTtcclxuY29uc3Qga29pc2hpX2NvcmVfMSA9IHJlcXVpcmUoXCJrb2lzaGktY29yZVwiKTtcclxuY29uc3QgbG9nZ2VyID0gbmV3IGtvaXNoaV9jb3JlXzEuTG9nZ2VyKCdsdW9ndScpO1xyXG5jb25zdCBhcHBseSA9IChjdHgpID0+IHtcclxuICAgIGN0eC5jb21tYW5kKCdvaScsICdPSSByZWxhdGVkJyk7XHJcbiAgICBjdHguY29tbWFuZCgnb2kvbHVvZ3UnLCAnTHVvZ3UnKTtcclxuICAgIGN0eC5jb21tYW5kKCdvaS9sdW9ndS5wcm9ibGVtIDxwaWQ+JywgJ+iOt+WPlkx1b2d16aKY55uuJylcclxuICAgICAgICAuYWN0aW9uKGFzeW5jIChfLCBpZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHBhZ2UgPSBhd2FpdCBjdHguYXBwLmJyb3dzZXIubmV3UGFnZSgpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHBhZ2UuZ290byhgaHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vJHtpZH1gLCB7XHJcbiAgICAgICAgICAgICAgICB3YWl0VW50aWw6ICduZXR3b3JraWRsZTAnLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHBhZ2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgcmV0dXJuICfor7fmsYLotoXml7bjgIInO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gYXdhaXQgcGFnZS4kKCcucHJvYmxlbS1jYXJkJyk7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuc2NyZWVuc2hvdCh7fSkudGhlbihhc3luYyAoYnVmZmVyKSA9PiB7XHJcbiAgICAgICAgICAgIHBhZ2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGBbQ1E6aW1hZ2UsZmlsZT1iYXNlNjQ6Ly8ke2J1ZmZlci50b1N0cmluZygnYmFzZTY0Jyl9XWA7XHJcbiAgICAgICAgfSwgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIHBhZ2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuICfmiKrlm77lpLHotKXjgIInO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBjdHguY29tbWFuZCgnb2kvbHVvZ3UudXNlciA8dWlkPicsICfmn6Xor6LnlKjmiLcnKVxyXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKF8sIGlkKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgc3VwZXJhZ2VudF8xLmRlZmF1bHQuZ2V0KGBodHRwczovL3d3dy5sdW9ndS5jb20uY24vdXNlci8ke2lkfT9fY29udGVudE9ubHk9MWApXHJcbiAgICAgICAgICAgIC5zZXQoJ1VzZXItQWdlbnQnLCAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IFRyaWRlbnQvNy4wOyBydjoxMS4wKSBsaWtlIEdlY2tvJyk7XHJcbiAgICAgICAgaWYgKHJlcy5ib2R5LmNvZGUgPT09ICc0MDQnKVxyXG4gICAgICAgICAgICByZXR1cm4gJ+ayoei/meS4quS6uiEnO1xyXG4gICAgICAgIGNvbnN0IHVkb2MgPSByZXMuYm9keS5jdXJyZW50RGF0YS51c2VyO1xyXG4gICAgICAgIGNvbnN0IGxldmVsID0gdWRvYy5jY2ZMZXZlbCA9PT0gMFxyXG4gICAgICAgICAgICA/ICfml6Av6JeP5LqG5Lul5pa55L6/5YGHJ1xyXG4gICAgICAgICAgICA6IHVkb2MuY2NmTGV2ZWw7XHJcbiAgICAgICAgcmV0dXJuIGAke3Vkb2MubmFtZX1cbuWFs+azqDogJHt1ZG9jLmZvbGxvd2luZ0NvdW50fVxu57KJ5LidOiAke3Vkb2MuZm9sbG93ZXJDb3VudH0ke3Vkb2MucGFzc2VkUHJvYmxlbUNvdW50ID8gYFxuQUNzL1N1Ym1pdHM6ICR7dWRvYy5wYXNzZWRQcm9ibGVtQ291bnR9LyR7dWRvYy5zdWJtaXR0ZWRQcm9ibGVtQ291bnR9YCA6ICcnfVxu6aKc6ImyOiAke3Vkb2MuY29sb3J9XG5DQ0bor4Tnuqc6JHtsZXZlbH1gO1xyXG4gICAgfSk7XHJcbn07XHJcbmV4cG9ydHMuYXBwbHkgPSBhcHBseTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bHVvZ3UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5hcHBseSA9IHZvaWQgMDtcclxuY29uc3QgYXhpb3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYXhpb3NcIikpO1xyXG5jb25zdCBhcHBseSA9IChjdHgpID0+IHtcclxuICAgIGN0eC5taWRkbGV3YXJlKGFzeW5jIChzZXNzaW9uLCBuZXh0KSA9PiB7XHJcbiAgICAgICAgaWYgKHNlc3Npb24uY29udGVudC5pbmNsdWRlcygnaHR0cHM6Ly9ib3QtYXBpLmx4bnMubmV0L2JvdC1tZXNzYWdlLycpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zXzEuZGVmYXVsdC5nZXQoYGh0dHBzOi8vJHtzZXNzaW9uLmNvbnRlbnQuc3BsaXQoJ2h0dHBzOi8vJylbMV19YCk7XHJcbiAgICAgICAgICAgIHNlc3Npb24uY29udGVudCA9IHJlcy5kYXRhLnJlcGxhY2UoLzwuKj8+L2csICcnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXdhaXQgbmV4dCgpO1xyXG4gICAgfSwgdHJ1ZSk7XHJcbn07XHJcbmV4cG9ydHMuYXBwbHkgPSBhcHBseTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bHhib3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5hcHBseSA9IHZvaWQgMDtcclxuY29uc3Qga29pc2hpX2NvcmVfMSA9IHJlcXVpcmUoXCJrb2lzaGktY29yZVwiKTtcclxuY29uc3Qgc3VwZXJhZ2VudF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJzdXBlcmFnZW50XCIpKTtcclxuZnVuY3Rpb24gYXBwbHkoYXBwKSB7XHJcbiAgICBhcHAuY29tbWFuZCgndG9vbHMnLCAn5a6e55So5bel5YW3Jyk7XHJcbiAgICBhcHAuY29tbWFuZCgndG9vbHMvb2NyIFtpbWFnZV0nLCB7IG1pbkludGVydmFsOiAzMDAwIH0pXHJcbiAgICAgICAgLmFjdGlvbihhc3luYyAoeyBzZXNzaW9uIH0sIGltYWdlKSA9PiB7XHJcbiAgICAgICAgaWYgKCFpbWFnZSkge1xyXG4gICAgICAgICAgICBhd2FpdCBzZXNzaW9uLnNlbmRRdWV1ZWQoJ+ivt+WPkemAgeWbvueJh+OAgicpO1xyXG4gICAgICAgICAgICBpbWFnZSA9IGF3YWl0IHNlc3Npb24ucHJvbXB0KDMwMDAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpbWFnZSlcclxuICAgICAgICAgICAgcmV0dXJuICfmsqHmnInmo4DmtYvliLDlm77niYfjgIInO1xyXG4gICAgICAgIGNvbnN0IGltZyA9IGtvaXNoaV9jb3JlXzEuc2VnbWVudC5mcm9tKGltYWdlKTtcclxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBzdXBlcmFnZW50XzEuZGVmYXVsdC5nZXQoYGh0dHBzOi8vYWkucXEuY29tL2NnaS1iaW4vYXBwZGVtb19pbWFnZXRyYW5zbGF0ZT9pbWFnZV91cmw9JHtpbWcuZGF0YS51cmx9YCk7XHJcbiAgICAgICAgaWYgKHJlcy5ib2R5LnJldCAhPT0gMClcclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5ib2R5Lm1zZztcclxuICAgICAgICByZXR1cm4gcmVzLmJvZHkuZGF0YS5pbWFnZV9yZWNvcmRzLm1hcCgobm9kZSkgPT4gbm9kZS5zb3VyY2VfdGV4dCkuam9pbignJyk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmFwcGx5ID0gYXBwbHk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9jci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmFwcGx5ID0gdm9pZCAwO1xyXG5jb25zdCBzdXBlcmFnZW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInN1cGVyYWdlbnRcIikpO1xyXG5jb25zdCBsb2Rhc2hfMSA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XHJcbmNvbnN0IEdFTkRFUiA9IHtcclxuICAgICctMSc6ICflpbMnLFxyXG4gICAgMDogJ+acquefpScsXHJcbiAgICAxOiAn55S3JyxcclxufTtcclxuZnVuY3Rpb24gYXBwbHkoYXBwKSB7XHJcbiAgICBhcHAuY29tbWFuZCgnb2knLCAnT0kgUmVsYXRlZCcpO1xyXG4gICAgYXBwLmNvbW1hbmQoJ29pL29pZXIgPHF1ZXJ5PicsICfmn6Xor6JvaWVyJywgeyBtaW5JbnRlcnZhbDogMzAwMDAgfSlcclxuICAgICAgICAuYWN0aW9uKGFzeW5jIChfLCBxdWVyeSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHN1cGVyYWdlbnRfMS5kZWZhdWx0LmdldChgaHR0cHM6Ly9ieXRldy5uZXQvT0llci9zZWFyY2gucGhwP21ldGhvZD1ub3JtYWwmcT0ke2VuY29kZVVSSUNvbXBvbmVudChxdWVyeSl9YCk7XHJcbiAgICAgICAgY29uc3QgeyByZXN1bHQ6IHJlc3VsdHMgfSA9IEpTT04ucGFyc2UocmVzLnRleHQpO1xyXG4gICAgICAgIGxldCBtZXNzYWdlID0gJyc7XHJcbiAgICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgbG9kYXNoXzEudGFrZShyZXN1bHRzLCAzKSkge1xyXG4gICAgICAgICAgICBjb25zdCBhd2FyZHMgPSBKU09OLnBhcnNlKHJlc3VsdC5hd2FyZHMucmVwbGFjZSgvJy9nbWksICdcIicpKTtcclxuICAgICAgICAgICAgbWVzc2FnZSArPSBg5aeT5ZCN77yaJHtyZXN1bHQubmFtZX0gIOeUn+eQhuaAp+WIq++8miR7R0VOREVSW3Jlc3VsdC5zZXhdfVxcbmA7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgYXdhcmQgb2YgbG9kYXNoXzEudGFrZShhd2FyZHMsIDUpKSB7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlICs9IGDkuo4ke2F3YXJkLmdyYWRlfeaXtuWcqCR7YXdhcmQucHJvdmluY2V9JHthd2FyZC5zY2hvb2x95Y+C5YqgJHthd2FyZC5pZGVudGl0eX3vvIxgO1xyXG4gICAgICAgICAgICAgICAgaWYgKGF3YXJkLnNjb3JlKVxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gYOS7pSR7YXdhcmQuc2NvcmV955qE5oiQ57upYDtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gYOWPluW+lyR7YXdhcmQuYXdhcmRfdHlwZX3vvIzmjpLlkI0ke2F3YXJkLnJhbmt944CCXFxuYDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYXdhcmRzLmxlbmd0aCA+IDUpXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlICs9IGAke2F3YXJkcy5sZW5ndGggLSA1feS4quWllumhueiiq+makOiXj+OAglxcbmA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA+IDMpXHJcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gYCR7cmVzdWx0cy5sZW5ndGggLSAzfeS4quaQnOe0oue7k+aenOiiq+makOiXj+OAgmA7XHJcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmFwcGx5ID0gYXBwbHk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9pZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5hcHBseSA9IHZvaWQgMDtcclxuY29uc3Qga29pc2hpX2NvcmVfMSA9IHJlcXVpcmUoXCJrb2lzaGktY29yZVwiKTtcclxuY29uc3QgYXBwbHkgPSAoY3R4KSA9PiB7XHJcbiAgICBjdHguY29tbWFuZCgncHJveHkgPGNvbW1hbmQ6dGV4dD4nLCAnUHJveHkgYSBjb21tYW5kJywgeyBoaWRkZW46IHRydWUsIGF1dGhvcml0eTogNCB9KVxyXG4gICAgICAgIC5vcHRpb24oJ3VzZXInLCAnLXUgPHVzZXJJZD4nKVxyXG4gICAgICAgIC5vcHRpb24oJ3NlbGYnLCAnLXMgPHNlbGZJZD4nKVxyXG4gICAgICAgIC5vcHRpb24oJ2dyb3VwJywgJy1nIDxncm91cElkPicpXHJcbiAgICAgICAgLm9wdGlvbignbGVuZ3RoJywgJy1sIDxsZW5ndGg+JywgeyBmYWxsYmFjazogMSB9KVxyXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiwgb3B0aW9ucyB9LCBjb21tYW5kKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbmV3U2Vzc2lvbiA9IG5ldyBrb2lzaGlfY29yZV8xLlNlc3Npb24oY3R4LmFwcCwgc2Vzc2lvbik7XHJcbiAgICAgICAgZGVsZXRlIG5ld1Nlc3Npb24uZ3JvdXBJZDtcclxuICAgICAgICBpZiAob3B0aW9ucy5ncm91cCkge1xyXG4gICAgICAgICAgICBuZXdTZXNzaW9uLmdyb3VwSWQgPSBvcHRpb25zLmdyb3VwO1xyXG4gICAgICAgICAgICBuZXdTZXNzaW9uLnN1YnR5cGUgPSAnZ3JvdXAnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbmV3U2Vzc2lvbi5ncm91cElkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBuZXdTZXNzaW9uLnN1YnR5cGUgPSAncHJpdmF0ZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnNlbGYpXHJcbiAgICAgICAgICAgIG5ld1Nlc3Npb24uc2VsZklkID0gb3B0aW9ucy5zZWxmO1xyXG4gICAgICAgIGlmIChvcHRpb25zLnVzZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgaWQgPSBvcHRpb25zLnVzZXI7XHJcbiAgICAgICAgICAgIGlmICghaWQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+acquaMh+Wumuebruagh+OAgic7XHJcbiAgICAgICAgICAgIG5ld1Nlc3Npb24udXNlcklkID0gaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGF3YWl0IG5ld1Nlc3Npb24uc2VuZChjb21tYW5kKTtcclxuICAgICAgICBsZXQgbWVzc2FnZSA9ICcnO1xyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hd2FpdC1pbi1sb29wXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gb3B0aW9ucy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgbWVzc2FnZSArPSBhd2FpdCBuZXdTZXNzaW9uLnByb21wdCgzMDAwMCk7XHJcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XHJcbiAgICB9KTtcclxufTtcclxuZXhwb3J0cy5hcHBseSA9IGFwcGx5O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm94eS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmFwcGx5ID0gZXhwb3J0cy5kZWZhdWx0Q29uZmlnID0gdm9pZCAwO1xyXG5jb25zdCBrb2lzaGlfdXRpbHNfMSA9IHJlcXVpcmUoXCJrb2lzaGktdXRpbHNcIik7XHJcbmNvbnN0IHBuZ2pzXzEgPSByZXF1aXJlKFwicG5nanNcIik7XHJcbmNvbnN0IGtvaXNoaV9wbHVnaW5fcHVwcGV0ZWVyXzEgPSByZXF1aXJlKFwia29pc2hpLXBsdWdpbi1wdXBwZXRlZXJcIik7XHJcbmV4cG9ydHMuZGVmYXVsdENvbmZpZyA9IHtcclxuICAgIGxvYWRUaW1lb3V0OiAxMDAwMCxcclxuICAgIGlkbGVUaW1lb3V0OiAzMDAwMCxcclxuICAgIG1heExlbmd0aDogMTAwMDAwMCwgLy8gMU1CXHJcbn07XHJcbmNvbnN0IGFsbG93ZWRQcm90b2NvbHMgPSBbJ2h0dHAnLCAnaHR0cHMnXTtcclxuY29uc3QgbG9nZ2VyID0gbmV3IGtvaXNoaV91dGlsc18xLkxvZ2dlcigncHVwcGV0ZWVyJyk7XHJcbmZ1bmN0aW9uIGFwcGx5KGFwcCwgY29uZmlnKSB7XHJcbiAgICBjb25maWcgPSB7IC4uLmV4cG9ydHMuZGVmYXVsdENvbmZpZywgLi4uY29uZmlnIH07XHJcbiAgICBhcHAucGx1Z2luKGtvaXNoaV9wbHVnaW5fcHVwcGV0ZWVyXzEuYXBwbHksIGNvbmZpZyk7XHJcbiAgICBhcHAuY29tbWFuZCgnc2hvdCcpLmRpc3Bvc2UoKTtcclxuICAgIGFwcC5jb21tYW5kKCdwYWdlIDx1cmw6dGV4dD4nLCAnR2V0IHBhZ2UnLCB7IGF1dGhvcml0eTogMywgbWluSW50ZXJ2YWw6IDMwMDAgfSlcclxuICAgICAgICAuYWxpYXMoJ3NjcmVlbnNob3QnLCAnc2hvdCcpXHJcbiAgICAgICAgLm9wdGlvbignZnVsbCcsICctZiBGdWxsIHBhZ2UnKVxyXG4gICAgICAgIC5vcHRpb24oJ2VsZW1lbnQnLCAnLWUsIC0tZWxlbWVudCA8c2VsZWN0b3I6c3RyaW5nPiBFbGVtZW50IFNlbGVjdG9yJylcclxuICAgICAgICAub3B0aW9uKCd2aWV3cG9ydCcsICc8dmlld3BvcnQ+IOaMh+WumlZpZXdwb3J0JywgeyBmYWxsYmFjazogJzE2MDB4OTAwJyB9KVxyXG4gICAgICAgIC5hY3Rpb24oYXN5bmMgKHsgc2Vzc2lvbiwgb3B0aW9ucyB9LCBtZXNzYWdlID0gJycpID0+IHtcclxuICAgICAgICBsZXQgdXJsID0gbWVzc2FnZS50cmltKCk7XHJcbiAgICAgICAgaWYgKCF1cmwpXHJcbiAgICAgICAgICAgIHJldHVybiAn6K+36L6T5YWl572R5Z2A44CCJztcclxuICAgICAgICBjb25zdCB0ID0gb3B0aW9ucy52aWV3cG9ydC5zcGxpdCgneCcpO1xyXG4gICAgICAgIGlmICh0Lmxlbmd0aCAhPT0gMilcclxuICAgICAgICAgICAgcmV0dXJuICdJbnZhbGlkIHZpZXdwb3J0JztcclxuICAgICAgICBjb25zdCBzY2hlbWUgPSAvXihcXHcrKTpcXC9cXC8vLmV4ZWModXJsKTtcclxuICAgICAgICBpZiAoIXNjaGVtZSlcclxuICAgICAgICAgICAgdXJsID0gYGh0dHA6Ly8ke3VybH1gO1xyXG4gICAgICAgIGVsc2UgaWYgKCFhbGxvd2VkUHJvdG9jb2xzLmluY2x1ZGVzKHNjaGVtZVsxXSkpXHJcbiAgICAgICAgICAgIHJldHVybiAn6K+36L6T5YWl5q2j56Gu55qE572R5Z2A44CCJztcclxuICAgICAgICBjb25zdCBwYWdlID0gYXdhaXQgYXBwLmJyb3dzZXIubmV3UGFnZSgpO1xyXG4gICAgICAgIGxldCBsb2FkZWQgPSBmYWxzZTtcclxuICAgICAgICBwYWdlLm9uKCdsb2FkJywgKCkgPT4gbG9hZGVkID0gdHJ1ZSk7XHJcbiAgICAgICAgYXdhaXQgcGFnZS5zZXRWaWV3cG9ydCh7XHJcbiAgICAgICAgICAgIHdpZHRoOiBwYXJzZUludCh0WzBdLCAxMCksXHJcbiAgICAgICAgICAgIGhlaWdodDogcGFyc2VJbnQodFsxXSwgMTApLFxyXG4gICAgICAgICAgICBkZXZpY2VTY2FsZUZhY3RvcjogMSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4gKGxvYWRlZFxyXG4gICAgICAgICAgICAgICAgICAgID8gc2Vzc2lvbi5zZW5kKCfmraPlnKjliqDovb3kuK3vvIzor7fnqI3nrYnniYfliLt+JylcclxuICAgICAgICAgICAgICAgICAgICA6IHJlamVjdChuZXcgRXJyb3IoJ25hdmlnYXRpb24gdGltZW91dCcpKSksIGNvbmZpZy5sb2FkVGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBfcmVzb2x2ZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBwYWdlLmdvdG8odXJsLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FpdFVudGlsOiAnbmV0d29ya2lkbGUwJyxcclxuICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiBjb25maWcuaWRsZVRpbWVvdXQsXHJcbiAgICAgICAgICAgICAgICB9KS50aGVuKF9yZXNvbHZlLCAoKSA9PiAobG9hZGVkID8gX3Jlc29sdmUoKSA6IHJlamVjdChuZXcgRXJyb3IoJ25hdmlnYXRpb24gdGltZW91dCcpKSkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHBhZ2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuICfml6Dms5XmiZPlvIDpobXpnaLjgIInO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gb3B0aW9ucy5lbGVtZW50ID8gYXdhaXQgcGFnZS4kKG9wdGlvbnMuZWxlbWVudCkgOiBwYWdlO1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50LnNjcmVlbnNob3Qoe1xyXG4gICAgICAgICAgICBmdWxsUGFnZTogb3B0aW9ucy5mdWxsLFxyXG4gICAgICAgIH0pLnRoZW4oYXN5bmMgKGJ1ZmZlcikgPT4ge1xyXG4gICAgICAgICAgICBwYWdlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIGlmIChidWZmZXIuYnl0ZUxlbmd0aCA+IGNvbmZpZy5tYXhMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwbmcgPSBuZXcgcG5nanNfMS5QTkcoKTtcclxuICAgICAgICAgICAgICAgICAgICBwbmcucGFyc2UoYnVmZmVyLCAoZXJyb3IsIGRhdGEpID0+IChlcnJvciA/IHJlamVjdChlcnJvcikgOiByZXNvbHZlKGRhdGEpKSk7XHJcbiAgICAgICAgICAgICAgICB9KS50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBkYXRhLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IChkYXRhLmhlaWdodCAqIGNvbmZpZy5tYXhMZW5ndGgpIC8gYnVmZmVyLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcG5nID0gbmV3IHBuZ2pzXzEuUE5HKHsgd2lkdGgsIGhlaWdodCB9KTtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLmJpdGJsdChwbmcsIDAsIDAsIHdpZHRoLCBoZWlnaHQsIDAsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IHBuZ2pzXzEuUE5HLnN5bmMud3JpdGUocG5nKTtcclxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGtvaXNoaV91dGlsc18xLm5vb3ApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBgW0NROmltYWdlLGZpbGU9YmFzZTY0Oi8vJHtidWZmZXIudG9TdHJpbmcoJ2Jhc2U2NCcpfV1gO1xyXG4gICAgICAgIH0sIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICBwYWdlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhlcnJvcik7XHJcbiAgICAgICAgICAgIHJldHVybiAn5oiq5Zu+5aSx6LSl44CCJztcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuYXBwbHkgPSBhcHBseTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVwcGV0ZWVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuYXBwbHkgPSB2b2lkIDA7XHJcbmNvbnN0IGF4aW9zXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImF4aW9zXCIpKTtcclxuY29uc3QgZ3JhcGhfMSA9IHJlcXVpcmUoXCIuLi9saWIvZ3JhcGhcIik7XHJcbmNvbnN0IExBTkdTID0ge1xyXG4gICAgYzoge1xyXG4gICAgICAgIHR5cGU6ICdjb21waWxlcicsXHJcbiAgICAgICAgY29tcGlsZTogWycvdXNyL2Jpbi9nY2MnLCAnLU8yJywgJy1XYWxsJywgJy1zdGQ9Yzk5JywgJy1vJywgJ2NvZGUnLCAnZm9vLmMnLCAnLWxtJywgJy1mZGlhZ25vc3RpY3MtY29sb3I9YWx3YXlzJ10sXHJcbiAgICAgICAgY29kZV9maWxlOiAnZm9vLmMnLFxyXG4gICAgICAgIGV4ZWN1dGU6IFsnL3cvY29kZSddLFxyXG4gICAgfSxcclxuICAgIGNjOiB7XHJcbiAgICAgICAgdHlwZTogJ2NvbXBpbGVyJyxcclxuICAgICAgICBjb21waWxlOiBbJy91c3IvYmluL2crKy03JywgJy1PMicsICctV2FsbCcsICctc3RkPWMrKzExJywgJy1vJywgJ2NvZGUnLCAnZm9vLmNjJywgJy1sbScsICctZmRpYWdub3N0aWNzLWNvbG9yPWFsd2F5cyddLFxyXG4gICAgICAgIGNvZGVfZmlsZTogJ2Zvby5jYycsXHJcbiAgICAgICAgZXhlY3V0ZTogWycvdy9jb2RlJ10sXHJcbiAgICB9LFxyXG4gICAgcGFzOiB7XHJcbiAgICAgICAgdHlwZTogJ2NvbXBpbGVyJyxcclxuICAgICAgICBjb21waWxlOiBbJy91c3IvYmluL2ZwYycsICctTzInLCAnLW8vdy9jb2RlJywgJ2Zvby5wYXMnXSxcclxuICAgICAgICBjb2RlX2ZpbGU6ICdmb28ucGFzJyxcclxuICAgICAgICBleGVjdXRlOiBbJy93L2NvZGUnXSxcclxuICAgIH0sXHJcbiAgICBweToge1xyXG4gICAgICAgIHR5cGU6ICdpbnRlcnByZXRlcicsXHJcbiAgICAgICAgY29kZV9maWxlOiAnZm9vLnB5JyxcclxuICAgICAgICBleGVjdXRlOiBbJy91c3IvYmluL3B5dGhvbicsICdmb28ucHknXSxcclxuICAgIH0sXHJcbiAgICBweTI6IHtcclxuICAgICAgICB0eXBlOiAnaW50ZXJwcmV0ZXInLFxyXG4gICAgICAgIGNvZGVfZmlsZTogJ2Zvby5weScsXHJcbiAgICAgICAgZXhlY3V0ZTogWycvdXNyL2Jpbi9weXRob24nLCAnZm9vLnB5J10sXHJcbiAgICB9LFxyXG4gICAgcHkzOiB7XHJcbiAgICAgICAgdHlwZTogJ2ludGVycHJldGVyJyxcclxuICAgICAgICBjb2RlX2ZpbGU6ICdmb28ucHknLFxyXG4gICAgICAgIGV4ZWN1dGU6IFsnL3Vzci9iaW4vcHl0aG9uMycsICdmb28ucHknXSxcclxuICAgIH0sXHJcbiAgICBqYXZhOiB7XHJcbiAgICAgICAgdHlwZTogJ2NvbXBpbGVyJyxcclxuICAgICAgICBjb21waWxlOiBbJy91c3IvYmluL2phdmFjJywgJy1kJywgJy93JywgJy1lbmNvZGluZycsICd1dGY4JywgJy4vTWFpbi5qYXZhJ10sXHJcbiAgICAgICAgY29kZV9maWxlOiAnTWFpbi5qYXZhJyxcclxuICAgICAgICBjb3B5T3V0OiAnTWFpbi5jbGFzcycsXHJcbiAgICAgICAgZXhlY3V0ZTogWycvdXNyL2Jpbi9qYXZhJywgJ01haW4nXSxcclxuICAgIH0sXHJcbiAgICBwaHA6IHtcclxuICAgICAgICB0eXBlOiAnaW50ZXJwcmV0ZXInLFxyXG4gICAgICAgIGNvZGVfZmlsZTogJ2Zvby5waHAnLFxyXG4gICAgICAgIGV4ZWN1dGU6IFsnL3Vzci9iaW4vcGhwJywgJ2Zvby5waHAnXSxcclxuICAgIH0sXHJcbiAgICBqczoge1xyXG4gICAgICAgIHR5cGU6ICdpbnRlcnByZXRlcicsXHJcbiAgICAgICAgY29kZV9maWxlOiAnZm9vLmpzJyxcclxuICAgICAgICBleGVjdXRlOiBbJy91c3IvYmluL2pzYycsICcvdy9mb28uanMnXSxcclxuICAgIH0sXHJcbiAgICBnbzoge1xyXG4gICAgICAgIHR5cGU6ICdjb21waWxlcicsXHJcbiAgICAgICAgY29tcGlsZTogWycvdXNyL2Jpbi9nbycsICdidWlsZCcsICctbycsICdmb28nLCAnZm9vLmdvJ10sXHJcbiAgICAgICAgY29kZV9maWxlOiAnZm9vLmdvJyxcclxuICAgICAgICBleGVjdXRlOiBbJy93L2ZvbyddLFxyXG4gICAgfSxcclxuICAgIHNoOiB7XHJcbiAgICAgICAgdHlwZTogJ2ludGVycHJldGVyJyxcclxuICAgICAgICBjb2RlX2ZpbGU6ICdmb28uc2gnLFxyXG4gICAgICAgIGV4ZWN1dGU6IFsnL2Jpbi9iYXNoJywgJ2Zvby5zaCddLFxyXG4gICAgfSxcclxuICAgIGNzOiB7XHJcbiAgICAgICAgdHlwZTogJ2NvbXBpbGVyJyxcclxuICAgICAgICBjb21waWxlOiBbJy91c3IvYmluL21jcycsICctb3B0aW1pemUrJywgJy1vdXQ6L3cvZm9vJywgJy93L2Zvby5jcyddLFxyXG4gICAgICAgIGNvZGVfZmlsZTogJ2Zvby5jcycsXHJcbiAgICAgICAgZXhlY3V0ZTogWycvdXNyL2Jpbi9tb25vJywgJ2ZvbyddLFxyXG4gICAgfSxcclxufTtcclxuY29uc3QgZW52ID0gWydQQVRIPS91c3IvbG9jYWwvc2JpbjovdXNyL2xvY2FsL2JpbjovdXNyL3NiaW46L3Vzci9iaW46L3NiaW46L2JpbicsICdIT01FPS93J107XHJcbmNvbnN0IGF4aW9zID0gYXhpb3NfMS5kZWZhdWx0LmNyZWF0ZSh7IGJhc2VVUkw6ICdodHRwOi8vbG9jYWxob3N0OjUwNTAnIH0pO1xyXG5hc3luYyBmdW5jdGlvbiBfcG9zdChhcmdzLCB7IHRpbWVfbGltaXRfbXMgPSA1MDAwLCBtZW1vcnlfbGltaXRfbWIgPSAyNTYsIHByb2Nlc3NfbGltaXQgPSAzMiwgc3RkaW4gPSAnJywgY29weUluID0ge30sIGNvcHlPdXQgPSBbXSwgY29weU91dENhY2hlZCA9IG51bGwsIH0gPSB7fSkge1xyXG4gICAgbGV0IHJlc3VsdDtcclxuICAgIGxldCBib2R5O1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBib2R5ID0ge1xyXG4gICAgICAgICAgICBjbWQ6IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJncyxcclxuICAgICAgICAgICAgICAgICAgICBlbnYsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsZXM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RkaW4gPyB7IGNvbnRlbnQ6IHN0ZGluIH0gOiB7IGNvbnRlbnQ6ICcnIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgbmFtZTogJ3N0ZG91dCcsIG1heDogMjA0ODAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiAnc3RkZXJyJywgbWF4OiAyMDQ4MCB9LFxyXG4gICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgY3B1TGltaXQ6IHRpbWVfbGltaXRfbXMgKiAxMDAwICogMTAwMCxcclxuICAgICAgICAgICAgICAgICAgICByZWFkQ3B1TGltaXQ6IHRpbWVfbGltaXRfbXMgKiAxMjAwICogMTAwMCxcclxuICAgICAgICAgICAgICAgICAgICBtZW1vcnlMaW1pdDogbWVtb3J5X2xpbWl0X21iICogMTAyNCAqIDEwMjQsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvY0xpbWl0OiBwcm9jZXNzX2xpbWl0LFxyXG4gICAgICAgICAgICAgICAgICAgIGNvcHlJbixcclxuICAgICAgICAgICAgICAgICAgICBjb3B5T3V0LFxyXG4gICAgICAgICAgICAgICAgICAgIGNvcHlPdXRDYWNoZWQsXHJcbiAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLnBvc3QoJy9ydW4nLCBib2R5KTtcclxuICAgICAgICByZXN1bHQgPSByZXMuZGF0YVswXTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxuICAgIGNvbnN0IHJldCA9IHtcclxuICAgICAgICBzdGF0dXM6IHJlc3VsdC5zdGF0dXMsXHJcbiAgICAgICAgdGltZV91c2FnZV9tczogcmVzdWx0LnRpbWUgLyAxMDAwMDAwLFxyXG4gICAgICAgIG1lbW9yeV91c2FnZV9rYjogcmVzdWx0Lm1lbW9yeSAvIDEwMjQsXHJcbiAgICAgICAgZmlsZXM6IHJlc3VsdC5maWxlcyxcclxuICAgIH07XHJcbiAgICByZXN1bHQuZmlsZXMgPSByZXN1bHQuZmlsZXMgfHwge307XHJcbiAgICByZXQuc3Rkb3V0ID0gcmVzdWx0LmZpbGVzLnN0ZG91dCB8fCAnJztcclxuICAgIHJldC5zdGRlcnIgPSByZXN1bHQuZmlsZXMuc3RkZXJyIHx8ICcnO1xyXG4gICAgaWYgKHJlc3VsdC5lcnJvcikge1xyXG4gICAgICAgIHJldC5lcnJvciA9IHJlc3VsdC5lcnJvcjtcclxuICAgIH1cclxuICAgIHJldC5maWxlcyA9IHJlc3VsdC5maWxlcztcclxuICAgIGlmIChyZXN1bHQuZmlsZUlkcylcclxuICAgICAgICByZXQuZmlsZUlkcyA9IHJlc3VsdC5maWxlSWRzO1xyXG4gICAgcmV0dXJuIHJldDtcclxufVxyXG5hc3luYyBmdW5jdGlvbiBfcnVuKGNvZGUsIGxhbmcsIGlucHV0KSB7XHJcbiAgICBjb25zdCBjb3B5SW4gPSB7fTtcclxuICAgIGNvbnN0IGluZm8gPSBMQU5HU1tsYW5nXTtcclxuICAgIGlmICghTEFOR1NbbGFuZ10pIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzdGF0dXM6ICdTeXN0ZW1FcnJvcicsXHJcbiAgICAgICAgICAgIHN0ZG91dDogJ+S4jeaUr+aMgeeahOivreiogCcsXHJcbiAgICAgICAgICAgIHN0ZGVycjogJ+ebruWJjeaUr+aMgXNoLGMsY2MscGFzLHB5MixweTMsanMsY3MsZ28scGhwLGphdmEnLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjb3B5SW5baW5mby5jb2RlX2ZpbGVdID0geyBjb250ZW50OiBjb2RlIH07XHJcbiAgICBpZiAoaW5mby50eXBlID09PSAnY29tcGlsZXInKSB7XHJcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIHN0ZG91dCwgc3RkZXJyLCBmaWxlSWRzLCB9ID0gYXdhaXQgX3Bvc3QoaW5mby5jb21waWxlLCB7IGNvcHlJbiwgY29weU91dENhY2hlZDogW2luZm8uY29weU91dCB8fCAnY29kZSddIH0pO1xyXG4gICAgICAgIGlmIChzdGF0dXMgIT09ICdBY2NlcHRlZCcpXHJcbiAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogYENvbXBpbGUgRXJyb3I6JHtzdGF0dXN9YCwgc3Rkb3V0LCBzdGRlcnIgfTtcclxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBfcG9zdChpbmZvLmV4ZWN1dGUsIHsgY29weUluOiB7IFtpbmZvLmNvcHlPdXQgfHwgJ2NvZGUnXTogeyBmaWxlSWQ6IGZpbGVJZHNbaW5mby5jb3B5T3V0IHx8ICdjb2RlJ10gfSB9IH0pO1xyXG4gICAgICAgIGF3YWl0IGF4aW9zLmRlbGV0ZShgL2ZpbGUvJHtmaWxlSWRzW2luZm8uY29weU91dCB8fCAnY29kZSddfWApO1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcbiAgICBpZiAoaW5mby50eXBlID09PSAnaW50ZXJwcmV0ZXInKSB7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IF9wb3N0KGluZm8uZXhlY3V0ZSwgeyBjb3B5SW4sIHN0ZGluOiBpbnB1dCB9KTtcclxuICAgIH1cclxufVxyXG5hc3luYyBmdW5jdGlvbiBydW4oY29kZSwgbGFuZywgaW5wdXQpIHtcclxuICAgIGNvbnN0IHsgc3RhdHVzLCBzdGRvdXQsIHN0ZGVyciB9ID0gYXdhaXQgX3J1bihjb2RlLCBsYW5nLCBpbnB1dCkuY2F0Y2goKGUpID0+ICh7XHJcbiAgICAgICAgc3RhdHVzOiAnU3lzdGVtRXJyb3InLFxyXG4gICAgICAgIHN0ZG91dDogZS50b1N0cmluZygpLFxyXG4gICAgICAgIHN0ZGVycjogJycsXHJcbiAgICB9KSk7XHJcbiAgICByZXR1cm4gKHN0YXR1cyA9PT0gJ0FjY2VwdGVkJylcclxuICAgICAgICA/IGBFeGVjdXRlIHJlc3VsdDogXFxuJHtzdGRvdXR9XFxuJHtzdGRlcnJ9YFxyXG4gICAgICAgIDogYEVycm9yOiAke3N0YXR1c31cXG4ke3N0ZG91dH1cXG4ke3N0ZGVycn1gO1xyXG59XHJcbmNvbnN0IGFwcGx5ID0gKGFwcCkgPT4ge1xyXG4gICAgYXBwLmNvbW1hbmQoJ3Rvb2xzJywgJ+WunueUqOW3peWFtycpO1xyXG4gICAgYXBwLmNvbW1hbmQoJ3Rvb2xzL3J1biA8bGFuZ3VhZ2U+IDxjb2RlOnRleHQ+JywgJ+i/kOihjOeoi+W6jycsIHsgbWluSW50ZXJ2YWw6IDEwMDAgfSlcclxuICAgICAgICAuYWxpYXMoJ2NvZGUnKVxyXG4gICAgICAgIC5vcHRpb24oJ2lucHV0JywgJ+WQr+eUqHN0ZGluJylcclxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24sIG9wdGlvbnMgfSwgbGFuZywgY29kZSkgPT4ge1xyXG4gICAgICAgIGlmIChvcHRpb25zLmlucHV0KVxyXG4gICAgICAgICAgICBzZXNzaW9uLnNlbmQoJ1BsZWFzZSBpbnB1dDonKTtcclxuICAgICAgICBjb25zdCBpbnB1dCA9IChvcHRpb25zLmlucHV0KVxyXG4gICAgICAgICAgICA/IGF3YWl0IHNlc3Npb24ucHJvbXB0KDEwMDAwKVxyXG4gICAgICAgICAgICA6ICcnO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcnVuKGNvZGUucmVwbGFjZSgvXFxyL2dtaSwgJycpLmRlY29kZSgpLCBsYW5nLCBpbnB1dC5kZWNvZGUoKSk7XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLmxlbmd0aCA+IDI1NiB8fCByZXNwb25zZS5zcGxpdCgnXFxuJykubGVuZ3RoID4gMTApIHtcclxuICAgICAgICAgICAgY29uc3QgcGFnZSA9IGF3YWl0IGFwcC5icm93c2VyLm5ld1BhZ2UoKTtcclxuICAgICAgICAgICAgY29uc3QgaW1nID0gYXdhaXQgZ3JhcGhfMS50ZXh0MnBuZyhwYWdlLCByZXNwb25zZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBgW0NROmltYWdlLGZpbGU9YmFzZTY0Oi8vJHtpbWd9XWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgIH0pO1xyXG59O1xyXG5leHBvcnRzLmFwcGx5ID0gYXBwbHk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ1bi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmFwcGx5ID0gdm9pZCAwO1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBuby10ZW1wbGF0ZS1jdXJseS1pbi1zdHJpbmcgKi9cclxuY29uc3Qgb3NfMSA9IHJlcXVpcmUoXCJvc1wiKTtcclxuY29uc3Qga29pc2hpX3BsdWdpbl9zdGF0dXNfMSA9IHJlcXVpcmUoXCJrb2lzaGktcGx1Z2luLXN0YXR1c1wiKTtcclxuY29uc3QgbW9tZW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIm1vbWVudFwiKSk7XHJcbmFzeW5jIGZ1bmN0aW9uIGFwcGx5KGN0eCwgY29uZmlnKSB7XHJcbiAgICBjdHgucGx1Z2luKGtvaXNoaV9wbHVnaW5fc3RhdHVzXzEuYXBwbHksIHtcclxuICAgICAgICAuLi5jb25maWcsXHJcbiAgICAgICAgZm9ybWF0OiBbXHJcbiAgICAgICAgICAgICd7eyBib3RzIH19JyxcclxuICAgICAgICAgICAgJz09PT09PT09PT0nLFxyXG4gICAgICAgICAgICAn55So5oi35pWw6YeP77yae3sgYWN0aXZlVXNlcnMgfX0nLFxyXG4gICAgICAgICAgICAn576k5pWw6YeP77yae3sgYWN0aXZlR3JvdXBzIH19JyxcclxuICAgICAgICAgICAgJ0NQVSDkvb/nlKjnjofvvJp7eyAoY3B1WzFdICogMTAwKS50b0ZpeGVkKCkgfX0lJyxcclxuICAgICAgICAgICAgJ+WGheWtmOS9v+eUqOmHj++8mnt7IHVzZWRtZW0gfX1NIC8ge3sgdG90YWxtZW0gfX1NJyxcclxuICAgICAgICAgICAgJ+S7iuaXpeaUtuWPkea2iOaBr+mHjyB7eyB0b3RhbFJlY2VpdmVDb3VudCB9fS97eyB0b3RhbFNlbmRDb3VudCB9fScsXHJcbiAgICAgICAgXS5qb2luKCdcXG4nKSxcclxuICAgIH0pO1xyXG4gICAgY3R4LmFwcC5vbignY29ubmVjdCcsICgpID0+IHtcclxuICAgICAgICBjb25zdCBjID0gY3R4LmFwcC5kYXRhYmFzZS5tb25nby5jb2xsZWN0aW9uKCdtZXNzYWdlJyk7XHJcbiAgICAgICAga29pc2hpX3BsdWdpbl9zdGF0dXNfMS5leHRlbmQoYXN5bmMgKHN0YXR1cykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB1ZG9jcyA9IGF3YWl0IFByb21pc2UuYWxsKHN0YXR1cy5ib3RzLm1hcCgoYm90KSA9PiBjdHguYXBwLmRhdGFiYXNlLmdldFVzZXIoYm90LnBsYXRmb3JtLCBib3Quc2VsZklkLnRvU3RyaW5nKCkpKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkcyA9IHVkb2NzLm1hcCgoaSkgPT4gaS5pZCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRpbWUgPSB7IHRpbWU6IHsgJGd0OiBtb21lbnRfMS5kZWZhdWx0KCkuYWRkKC0xLCAnZGF5JykudG9EYXRlKCkgfSB9O1xyXG4gICAgICAgICAgICBzdGF0dXMuYWN0aXZlVXNlcnMgPSBhd2FpdCBjdHguYXBwLmRhdGFiYXNlLm1vbmdvLnVzZXIuZmluZCh7fSkuY291bnQoKTtcclxuICAgICAgICAgICAgc3RhdHVzLnRvdGFsU2VuZENvdW50ID0gYXdhaXQgYy5maW5kKHsgLi4udGltZSwgc2VuZGVyOiB7ICRpbjogaWRzLm1hcChwYXJzZUludCkgfSB9KS5jb3VudCgpO1xyXG4gICAgICAgICAgICBzdGF0dXMudG90YWxSZWNlaXZlQ291bnQgPSBhd2FpdCBjLmZpbmQoeyAuLi50aW1lLCBzZW5kZXI6IHsgJG5pbjogaWRzLm1hcChwYXJzZUludCkgfSB9KS5jb3VudCgpO1xyXG4gICAgICAgICAgICBzdGF0dXMudXNlZG1lbSA9IE1hdGguZmxvb3IoKG9zXzEudG90YWxtZW0oKSAtIG9zXzEuZnJlZW1lbSgpKSAvIDEwMjQgLyAxMDI0KTtcclxuICAgICAgICAgICAgc3RhdHVzLnRvdGFsbWVtID0gTWF0aC5mbG9vcihvc18xLnRvdGFsbWVtKCkgLyAxMDI0IC8gMTAyNCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmFwcGx5ID0gYXBwbHk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXR1cy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmFwcGx5ID0gdm9pZCAwO1xyXG5mdW5jdGlvbiBhcHBseShjdHgpIHtcclxuICAgIGN0eC5jb21tYW5kKCdzdWRvIDxjb21tYW5kOnRleHQ+JywgeyBoaWRkZW46IHRydWUsIG5vUmVkaXJlY3Q6IHRydWUgfSlcclxuICAgICAgICAudXNlckZpZWxkcyhbJ3N1ZG9lcicsICdhdXRob3JpdHknXSlcclxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSwgY29tbWFuZCkgPT4ge1xyXG4gICAgICAgIGlmICghc2Vzc2lvbi51c2VyLnN1ZG9lcilcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgYXJlIG5vdCBpbiB0aGUgc3Vkb2VycyBmaWxlLicpO1xyXG4gICAgICAgIGNvbnN0IG9sZCA9IHNlc3Npb24udXNlci5hdXRob3JpdHk7XHJcbiAgICAgICAgc2Vzc2lvbi51c2VyLmF1dGhvcml0eSA9IDU7XHJcbiAgICAgICAgc2Vzc2lvbi5fc3VkbyA9IHRydWU7XHJcbiAgICAgICAgYXdhaXQgc2Vzc2lvbi5leGVjdXRlKGNvbW1hbmQpO1xyXG4gICAgICAgIHNlc3Npb24udXNlci5hdXRob3JpdHkgPSBvbGQ7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmFwcGx5ID0gYXBwbHk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1ZG8uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5hcHBseSA9IHZvaWQgMDtcclxuY29uc3Qga29pc2hpX3BsdWdpbl90ZWFjaF8xID0gcmVxdWlyZShcImtvaXNoaS1wbHVnaW4tdGVhY2hcIik7XHJcbmNvbnN0IGF4aW9zXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImF4aW9zXCIpKTtcclxuY29uc3QgbW9uZ29kYl8xID0gcmVxdWlyZShcIm1vbmdvZGJcIik7XHJcbmNvbnN0IGltYWdlUkUgPSAvXFxbQ1E6aW1hZ2UsZmlsZT0oW14sXSspLHVybD0oW15cXF1dKylcXF0vO1xyXG5jb25zdCBSRWltYWdlID0gL1xcW0NROmltYWdlLGZpbGU9aW1hZ2U6XFwvXFwvKFteLF0rKVxcXS87XHJcbmNvbnN0IGFwcGx5ID0gKGN0eCwgY29uZmlnKSA9PiB7XHJcbiAgICBjb25zdCBsb2dnZXIgPSBjdHgubG9nZ2VyKCd0ZWFjaCcpO1xyXG4gICAgY3R4LnBsdWdpbihrb2lzaGlfcGx1Z2luX3RlYWNoXzEuYXBwbHksIGNvbmZpZyk7XHJcbiAgICBjdHguY29tbWFuZCgndGVhY2gnLCB7IGNoZWNrQXJnQ291bnQ6IGZhbHNlIH0pO1xyXG4gICAgY3R4Lm9uKCdiZWZvcmUtY29tbWFuZCcsIGFzeW5jICh7IHNlc3Npb24sIGNvbW1hbmQgfSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5vUmVkaXJlY3QgPSBjb21tYW5kLmdldENvbmZpZygnbm9SZWRpcmVjdCcsIHNlc3Npb24pO1xyXG4gICAgICAgIGlmIChub1JlZGlyZWN0ICYmIHNlc3Npb24uX3JlZGlyZWN0ZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgY3JlYXRvciA9IGF3YWl0IGN0eC5hcHAuZGF0YWJhc2UuZ2V0VXNlcignaWQnLCBzZXNzaW9uLl9kaWFsb2d1ZS53cml0ZXIsIFsnYXV0aG9yaXR5J10pO1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGlmIChjcmVhdG9yLmF1dGhvcml0eSA8IDUgJiYgIWNyZWF0b3Iuc3Vkb2VyKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuI3mlK/mjIHlnKjmj5LlgLzkuK3osIPnlKjor6Xlkb3ku6TjgIInO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgY3R4Lm9uKCdjb25uZWN0JywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNvbGwgPSBjdHguYXBwLmRhdGFiYXNlLm1vbmdvLmNvbGxlY3Rpb24oJ2ltYWdlJyk7XHJcbiAgICAgICAgY29uc3QgZG93bmxvYWRGaWxlID0gYXN5bmMgKGZpbGUsIHVybCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYXdhaXQgY29sbC5maW5kT25lKHsgX2lkOiBmaWxlIH0pKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IGF4aW9zXzEuZGVmYXVsdC5nZXQodXJsLCB7IHJlc3BvbnNlVHlwZTogJ2FycmF5YnVmZmVyJyB9KTtcclxuICAgICAgICAgICAgY29uc3QgYnVmID0gQnVmZmVyLmFsbG9jKGRhdGEuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgVWludDhBcnJheShkYXRhKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWYubGVuZ3RoOyArK2kpXHJcbiAgICAgICAgICAgICAgICBidWZbaV0gPSB2aWV3W2ldO1xyXG4gICAgICAgICAgICBhd2FpdCBjb2xsLmluc2VydE9uZSh7IF9pZDogZmlsZSwgZGF0YTogbmV3IG1vbmdvZGJfMS5CaW5hcnkoYnVmKSB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGN0eC5vbignZGlhbG9ndWUvZGV0YWlsJywgYXN5bmMgKGRpYWxvZ3VlLCBvdXRwdXQpID0+IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBpbiBvdXRwdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjYXB0dXJlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25kLWFzc2lnblxyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChjYXB0dXJlID0gUkVpbWFnZS5leGVjKG91dHB1dFtpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW3RleHQsIGZpbGVdID0gY2FwdHVyZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdCArPSBvdXRwdXRbaV0uc2xpY2UoMCwgY2FwdHVyZS5pbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtpXSA9IG91dHB1dFtpXS5zbGljZShjYXB0dXJlLmluZGV4ICsgdGV4dC5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBjb2xsLmZpbmRPbmUoeyBfaWQ6IGZpbGUgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgKz0gYFtDUTppbWFnZSxmaWxlPWJhc2U2NDovLyR7cmVzLmRhdGEuYnVmZmVyLnRvU3RyaW5nKCdiYXNlNjQnKX1dYDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0W2ldID0gdCArIG91dHB1dFtpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfkuIvovb3lm77niYfml7blj5HnlJ/plJnor6/jgIInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGN0eC5vbignZGlhbG9ndWUvYmVmb3JlLXNlbmQnLCBhc3luYyAoc3RhdGUpID0+IHtcclxuICAgICAgICAgICAgbGV0IHsgYW5zd2VyIH0gPSBzdGF0ZTtcclxuICAgICAgICAgICAgaWYgKCFhbnN3ZXIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgb3V0cHV0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2FwdHVyZTtcclxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25kLWFzc2lnblxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGNhcHR1cmUgPSBSRWltYWdlLmV4ZWMoYW5zd2VyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFt0ZXh0LCBmaWxlXSA9IGNhcHR1cmU7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9IGFuc3dlci5zbGljZSgwLCBjYXB0dXJlLmluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICBhbnN3ZXIgPSBhbnN3ZXIuc2xpY2UoY2FwdHVyZS5pbmRleCArIHRleHQubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBjb2xsLmZpbmRPbmUoeyBfaWQ6IGZpbGUgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9IGBbQ1E6aW1hZ2UsZmlsZT1iYXNlNjQ6Ly8ke3Jlcy5kYXRhLmJ1ZmZlci50b1N0cmluZygnYmFzZTY0Jyl9XWA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5hbnN3ZXIgPSBvdXRwdXQgKyBhbnN3ZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBsb2dnZXIud2FybihlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign5LiL6L295Zu+54mH5pe25Y+R55Sf6ZSZ6K+v44CCJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBjdHgub24oJ2RpYWxvZ3VlL2JlZm9yZS1tb2RpZnknLCBhc3luYyAoeyBvcHRpb25zIH0pID0+IHtcclxuICAgICAgICAgICAgbGV0IHsgYW5zd2VyIH0gPSBvcHRpb25zO1xyXG4gICAgICAgICAgICBpZiAoIWFuc3dlcilcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGxldCBvdXRwdXQgPSAnJztcclxuICAgICAgICAgICAgICAgIGxldCBjYXB0dXJlO1xyXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbmQtYXNzaWduXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoY2FwdHVyZSA9IGltYWdlUkUuZXhlYyhhbnN3ZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW3RleHQsIGZpbGUsIHVybF0gPSBjYXB0dXJlO1xyXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCArPSBhbnN3ZXIuc2xpY2UoMCwgY2FwdHVyZS5pbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5zd2VyID0gYW5zd2VyLnNsaWNlKGNhcHR1cmUuaW5kZXggKyB0ZXh0Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgZG93bmxvYWRGaWxlKGZpbGUsIHVybCk7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9IGBbQ1E6aW1hZ2UsZmlsZT1pbWFnZTovLyR7ZmlsZX1dYDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYW5zd2VyID0gb3V0cHV0ICsgYW5zd2VyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4iuS8oOWbvueJh+aXtuWPkeeUn+mUmeivr+OAgic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59O1xyXG5leHBvcnRzLmFwcGx5ID0gYXBwbHk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlYWNoLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuYXBwbHkgPSB2b2lkIDA7XHJcbi8qIGVzbGludC1kaXNhYmxlIG5vLWF3YWl0LWluLWxvb3AgKi9cclxuY29uc3Qgc3VwZXJhZ2VudF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJzdXBlcmFnZW50XCIpKTtcclxuY29uc3QgYXhpb3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYXhpb3NcIikpO1xyXG5jb25zdCBzaGFycF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJzaGFycFwiKSk7XHJcbmNvbnN0IGxvZGFzaF8xID0gcmVxdWlyZShcImxvZGFzaFwiKTtcclxuY29uc3Qga29pc2hpX3BsdWdpbl9pbWFnZV9zZWFyY2hfMSA9IHJlcXVpcmUoXCJrb2lzaGktcGx1Z2luLWltYWdlLXNlYXJjaFwiKTtcclxuY29uc3Qga29pc2hpX3BsdWdpbl90b29sc18xID0gcmVxdWlyZShcImtvaXNoaS1wbHVnaW4tdG9vbHNcIik7XHJcbmNvbnN0IGZzXzEgPSByZXF1aXJlKFwiZnNcIik7XHJcbmNvbnN0IGdyYXBoXzEgPSByZXF1aXJlKFwiLi4vbGliL2dyYXBoXCIpO1xyXG5jb25zdCBzaGVsbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9saWIvc2hlbGxcIikpO1xyXG5jb25zdCBhcHBseSA9IChjdHgpID0+IHtcclxuICAgIGN0eC5wbHVnaW4oa29pc2hpX3BsdWdpbl90b29sc18xLmFwcGx5LCB7XHJcbiAgICAgICAgYmlsaWJpbGk6IGZhbHNlLFxyXG4gICAgICAgIG1hZ2k6IGZhbHNlLFxyXG4gICAgICAgIG9laXM6IGZhbHNlLFxyXG4gICAgfSk7XHJcbiAgICBjdHgucGx1Z2luKGtvaXNoaV9wbHVnaW5faW1hZ2Vfc2VhcmNoXzEuYXBwbHkpO1xyXG4gICAgY3R4LmNvbW1hbmQoJ3NlYXJjaCcsICcnLCB7IG1heFVzYWdlOiA1LCBtaW5JbnRlcnZhbDogNjAwMDAgfSk7XHJcbiAgICBjdHguY29tbWFuZCgndG9vbHMvdGV4IDxjb2RlOnRleHQ+JywgJ0thVGVYIOa4suafkycsIHsgbWluSW50ZXJ2YWw6IDEwMDAgfSlcclxuICAgICAgICAuYWxpYXMoJ2thdGV4IDxjb2RlOnRleHQ+JylcclxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IHNlc3Npb24gfSwgdGV4KSA9PiB7XHJcbiAgICAgICAgbGV0IHsgZGF0YTogc3ZnIH0gPSBhd2FpdCBheGlvc18xLmRlZmF1bHQuZ2V0KGBodHRwczovL3d3dy56aGlodS5jb20vZXF1YXRpb24/dGV4PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHRleCl9YCk7XHJcbiAgICAgICAgY29uc3QgdGV4dCA9IHN2Zy5tYXRjaCgvPihbXjxdKyk8XFwvdGV4dD4vKTtcclxuICAgICAgICBpZiAodGV4dClcclxuICAgICAgICAgICAgcmV0dXJuIHNlc3Npb24uc2VuZCh0ZXh0WzFdKTtcclxuICAgICAgICBjb25zdCB2aWV3Qm94ID0gc3ZnLm1hdGNoKC8gdmlld0JveD1cIjAgKC0/XFxkKiguXFxkKyk/KSAtP1xcZCooLlxcZCspPyAtP1xcZCooLlxcZCspP1wiIC8pO1xyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXHJcbiAgICAgICAgaWYgKHZpZXdCb3gpXHJcbiAgICAgICAgICAgIHN2ZyA9IHN2Zy5yZXBsYWNlKCdcXG4nLCBgXFxuPHJlY3QgeD1cIjBcIiB5PVwiJHt2aWV3Qm94WzFdfVwiIHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjEwMCVcIiBmaWxsPVwid2hpdGVcIj48L3JlY3Q+XFxuYCk7IC8vIGxndG0gW2pzL2luY29tcGxldGUtc2FuaXRpemF0aW9uXVxyXG4gICAgICAgIGNvbnN0IHBuZyA9IGF3YWl0IHNoYXJwXzEuZGVmYXVsdChCdWZmZXIuZnJvbShzdmcpKS5wbmcoKS50b0J1ZmZlcigpO1xyXG4gICAgICAgIHJldHVybiBzZXNzaW9uLnNlbmQoYFtDUTppbWFnZSxmaWxlPWJhc2U2NDovLyR7cG5nLnRvU3RyaW5nKCdiYXNlNjQnKX1dYCk7XHJcbiAgICB9KTtcclxuICAgIGN0eC5jb21tYW5kKCd0b29scy9pcCA8aXA+JywgJ+afpeivomlwJylcclxuICAgICAgICAuYWN0aW9uKGFzeW5jIChfLCBhcmdzKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gYGh0dHA6Ly9mcmVlYXBpLmlwaXAubmV0LyR7YXJnc31gO1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHN1cGVyYWdlbnRfMS5kZWZhdWx0LmdldCh1cmwpO1xyXG4gICAgICAgIHJldHVybiByZXMuYm9keS5qb2luKCcgJyk7XHJcbiAgICB9KTtcclxuICAgIGN0eC5jb21tYW5kKCd0b29scy9vZWlzIDxzZXF1ZW5jZT4nLCAn5L2/55SoIE9FSVMg6L+b6KGM5pWw5YiX5p+l6K+iJywgeyBtYXhVc2FnZTogMTAgfSlcclxuICAgICAgICAub3B0aW9uKCdzdGFydCcsICctcyA8c3RhcnQ+IOiuvue9rui1t+Wni+mhteeggScsIHsgZmFsbGJhY2s6IDAgfSlcclxuICAgICAgICAudXNhZ2UoJ+i+k+WFpeeUqOmAl+WPt+malOW8gOeahOaVsOS9nOS4uuimgeafpeivoueahOaVsOWIl+eahOWJjeWHoOmhue+8jOaIluiAheebtOaOpei+k+WFpeS7pSBpZDpBIOaJk+WktOeahOaVsOWIl+e8luWPt+OAgicpXHJcbiAgICAgICAgLmV4YW1wbGUoJ29laXMgMSwyLDMsNiwxMSwyMyw0NywxMDYsMjM1JylcclxuICAgICAgICAuZXhhbXBsZSgnb2VpcyBpZDpBMDAwMDU1JylcclxuICAgICAgICAuYWN0aW9uKGFzeW5jICh7IG9wdGlvbnMsIHNlc3Npb24gfSwgc2VxdWVuY2UpID0+IHtcclxuICAgICAgICBjb25zdCB7IGJvZHkgfSA9IGF3YWl0IHN1cGVyYWdlbnRfMS5kZWZhdWx0LmdldChgaHR0cHM6Ly9vZWlzLm9yZy9zZWFyY2g/Zm10PWpzb24mcT0ke3NlcXVlbmNlfSZzdGFydD0ke29wdGlvbnMuc3RhcnR9YCk7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IGxvZGFzaF8xLmZpbHRlcihib2R5LnJlc3VsdHMsIChyZXN1bHQpID0+ICFyZXN1bHQubmFtZS5zdGFydHNXaXRoKCdEdXBsaWNhdGUnKSk7XHJcbiAgICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgbG9kYXNoXzEudGFrZShyZXN1bHRzLCAzKSkge1xyXG4gICAgICAgICAgICBhd2FpdCBzZXNzaW9uLnNlbmRRdWV1ZWQoW1xyXG4gICAgICAgICAgICAgICAgYGh0dHBzOi8vb2Vpcy5vcmcvQSR7U3RyaW5nKHJlc3VsdC5udW1iZXIpLnBhZFN0YXJ0KDYsICcwJyl9YCxcclxuICAgICAgICAgICAgICAgIGAke3Jlc3VsdC5uYW1lfSR7cmVzdWx0LmlkID8gYCAoJHtyZXN1bHQuaWR9KWAgOiAnJ31gLFxyXG4gICAgICAgICAgICAgICAgYCR7bG9kYXNoXzEudGFrZShyZXN1bHQuZGF0YS5zcGxpdCgnLCcpLCAxMCkuam9pbignLCcpfWAsXHJcbiAgICAgICAgICAgIF0uam9pbignXFxuJykpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgaWYgKGZzXzEuZXhpc3RzU3luYygnL3Vzci9iaW4vd2QnKSkge1xyXG4gICAgICAgIGN0eC5jb21tYW5kKCd0b29scy9kaWN0IDx3b3JkPicsICfkvb/nlKjml6DpgZPor43lhbjmn6Xor40nKVxyXG4gICAgICAgICAgICAuZXhhbXBsZSgnZGljdCBoZWxsbycpXHJcbiAgICAgICAgICAgIC5hbGlhcygnd2QnKVxyXG4gICAgICAgICAgICAuYWN0aW9uKGFzeW5jIChfLCB3b3JkKSA9PiB7XHJcbiAgICAgICAgICAgIHdvcmQgPSB3b3JkLnNwbGl0KCcnKS5maWx0ZXIoKHcpID0+IC9bLWEtekEtWjAtOV0vLnRlc3QodykpLmpvaW4oJycpO1xyXG4gICAgICAgICAgICBjb25zdCBwID0gYXdhaXQgc2hlbGxfMS5kZWZhdWx0KGAvdXNyL2Jpbi93ZCAke3dvcmR9YCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhZ2UgPSBhd2FpdCBjdHguYXBwLmJyb3dzZXIubmV3UGFnZSgpO1xyXG4gICAgICAgICAgICBjb25zdCBpbWcgPSBhd2FpdCBncmFwaF8xLnRleHQycG5nKHBhZ2UsIHApO1xyXG4gICAgICAgICAgICBwYWdlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBgW0NROmltYWdlLGZpbGU9YmFzZTY0Oi8vJHtpbWd9XWA7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn07XHJcbmV4cG9ydHMuYXBwbHkgPSBhcHBseTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9vbHMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5hcHBseSA9IHZvaWQgMDtcclxuY29uc3QgZ2V0Rmlyc3RQaW55aW4gPSAoZGF0YSkgPT4gKGRhdGEucGlueWluLnNwbGl0KC9cXHMrLykuc2hpZnQoKSB8fCAnJylcclxuICAgIC5yZXBsYWNlKC9bxIHDoceOw6BdL2csICdhJykucmVwbGFjZSgvW8WNw7PHksOyXS9nLCAnbycpLnJlcGxhY2UoL1vEk8OpxJvDqMOqXS9nLCAnZScpXHJcbiAgICAucmVwbGFjZSgvW8Srw63HkMOsXS9nLCAnaScpXHJcbiAgICAucmVwbGFjZSgvW8Wrw7rHlMO5XS9nLCAndScpXHJcbiAgICAucmVwbGFjZSgvW8eWx5jHmsecw7xdL2csICd2Jyk7XHJcbmNvbnN0IGdldExhc3RQaW55aW4gPSAoZGF0YSkgPT4gKGRhdGEucGlueWluLnNwbGl0KC9cXHMrLykucG9wKCkgfHwgJycpXHJcbiAgICAucmVwbGFjZSgvW8SBw6HHjsOgXS9nLCAnYScpLnJlcGxhY2UoL1vFjcOzx5LDsl0vZywgJ28nKS5yZXBsYWNlKC9bxJPDqcSbw6jDql0vZywgJ2UnKVxyXG4gICAgLnJlcGxhY2UoL1vEq8Otx5DDrF0vZywgJ2knKVxyXG4gICAgLnJlcGxhY2UoL1vFq8O6x5TDuV0vZywgJ3UnKVxyXG4gICAgLnJlcGxhY2UoL1vHlseYx5rHnMO8XS9nLCAndicpO1xyXG5jb25zdCBmaXggPSAoZGF0YSkgPT4ge1xyXG4gICAgaWYgKGRhdGEud29yZCA9PT0gJ+WRs+WQjOWavOicoScpXHJcbiAgICAgICAgZGF0YS5waW55aW4gPSBkYXRhLnBpbnlpbi5yZXBsYWNlKCdjw7knLCAnbMOgJyk7XHJcbiAgICBpZiAoZGF0YS53b3JkLmVuZHNXaXRoKCfkv6knKSlcclxuICAgICAgICBkYXRhLnBpbnlpbiA9IGRhdGEucGlueWluLnJlcGxhY2UoJ2xpx45uZycsICdsaceOJyk7XHJcbiAgICBkYXRhLnBpbnlpbiA9IGRhdGEucGlueWluLnJlcGxhY2UoL3lpKFvEk8OpxJvDqMOqZV0pL2csICd5JDEnKTtcclxuICAgIHJldHVybiBkYXRhO1xyXG59O1xyXG5jb25zdCBpbmRleGVkID0gKGpzb24pID0+IHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IHsgZmlyc3RQaW55aW46IHt9LCBsYXN0UGlueWluOiB7fSwgd29yZDoge30gfTtcclxuICAgIGZvciAoY29uc3QgZGF0YSBvZiBqc29uKSB7XHJcbiAgICAgICAgZml4KGRhdGEpO1xyXG4gICAgICAgIGlmIChkYXRhLndvcmQubGVuZ3RoID09PSA0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleTEgPSBnZXRMYXN0UGlueWluKGRhdGEpO1xyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZXMxID0gcmVzdWx0Lmxhc3RQaW55aW5ba2V5MV0gfHwgW107XHJcbiAgICAgICAgICAgIHJlc3VsdC5sYXN0UGlueWluW2tleTFdID0gdmFsdWVzMTtcclxuICAgICAgICAgICAgdmFsdWVzMS5wdXNoKGRhdGEpO1xyXG4gICAgICAgICAgICBjb25zdCBrZXkyID0gZ2V0Rmlyc3RQaW55aW4oZGF0YSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlczIgPSByZXN1bHQuZmlyc3RQaW55aW5ba2V5Ml0gfHwgW107XHJcbiAgICAgICAgICAgIHJlc3VsdC5maXJzdFBpbnlpbltrZXkyXSA9IHZhbHVlczI7XHJcbiAgICAgICAgICAgIHZhbHVlczIucHVzaChkYXRhKTtcclxuICAgICAgICAgICAgcmVzdWx0LndvcmRbZGF0YS53b3JkXSA9IGRhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbGV0IHBpbnlpbnMgPSBuZXcgU2V0KFsneWknXSk7XHJcbiAgICBmb3IgKGxldCBsZXZlbCA9IDE7IHBpbnlpbnMuc2l6ZSA+IDA7ICsrbGV2ZWwpIHtcclxuICAgICAgICBjb25zdCBuZXdwaW55aW5zID0gbmV3IFNldCgpO1xyXG4gICAgICAgIHBpbnlpbnMuZm9yRWFjaCgocGlueWluKSA9PiB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZGF0YSBvZiByZXN1bHQubGFzdFBpbnlpbltwaW55aW5dIHx8IFtdKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWRhdGEubGV2ZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLmxldmVsID0gbGV2ZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3cGlueWlucy5hZGQoZ2V0Rmlyc3RQaW55aW4oZGF0YSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcGlueWlucyA9IG5ld3BpbnlpbnM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5jb25zdCBkYiA9IGluZGV4ZWQocmVxdWlyZSgnLi4vLi4vZGF0YWJhc2UveWlHZURpbmdMaWEuanNvbicpKTtcclxuY29uc3QgaGFuZGxlID0gKGlucHV0KSA9PiB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuICAgIGxldCBkYXRhID0gZGIud29yZFtpbnB1dF07XHJcbiAgICB3aGlsZSAoZGF0YSAmJiBkYXRhLmxldmVsKSB7XHJcbiAgICAgICAgY29uc3QgeyBsZXZlbCB9ID0gZGF0YTtcclxuICAgICAgICByZXN1bHQucHVzaChkYXRhKTtcclxuICAgICAgICBpZiAobGV2ZWwgPiAxKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHQgPSBkYi5maXJzdFBpbnlpbltnZXRMYXN0UGlueWluKGRhdGEpXTtcclxuICAgICAgICAgICAgY29uc3QgZmlsdGVyZWQgPSBuZXh0LmZpbHRlcigoZCkgPT4gZC5sZXZlbCAmJiBkLmxldmVsIDwgbGV2ZWwpO1xyXG4gICAgICAgICAgICBkYXRhID0gZmlsdGVyZWRbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZmlsdGVyZWQubGVuZ3RoKV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaCh7IHdvcmQ6ICfkuIDkuKrpobbkv6knLCBwaW55aW46ICd5xKsgZ8OoIGTHkG5nIGxpx44nIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn07XHJcbmNvbnN0IGFwcGx5ID0gKGFwcCkgPT4ge1xyXG4gICAgYXBwLmNvbW1hbmQoJ+aIkOivreaOpem+mSA85oiQ6K+tPicsICfmiJDor63mjqXpvpknLCB7IG1pbkludGVydmFsOiAxMDAwLCBjaGVja0FyZ0NvdW50OiBmYWxzZSB9KVxyXG4gICAgICAgIC5hY3Rpb24oKF8sIGFyZ3MpID0+IHtcclxuICAgICAgICBpZiAoIWFyZ3MpXHJcbiAgICAgICAgICAgIHJldHVybiAn6K+36L6T5YWl5oiQ6K+t44CCJztcclxuICAgICAgICBjb25zdCBkID0gaGFuZGxlKGFyZ3MpO1xyXG4gICAgICAgIGlmIChkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCByZXMgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBpIGluIGQpXHJcbiAgICAgICAgICAgICAgICByZXMucHVzaChkW2ldLndvcmQsICcgJyk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXMuam9pbignJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn07XHJcbmV4cG9ydHMuYXBwbHkgPSBhcHBseTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9eWdkbC5qcy5tYXAiLCJ2YXIgbWFwID0ge1xuXHRcIi4vYXV0b2tpY2tcIjogMjYxNSxcblx0XCIuL2F1dG9raWNrLmRcIjogOTc0MCxcblx0XCIuL2F1dG9raWNrLmQudHNcIjogOTc0MCxcblx0XCIuL2F1dG9raWNrLmpzXCI6IDI2MTUsXG5cdFwiLi9hdXRva2ljay5qcy5tYXBcIjogNDEzNCxcblx0XCIuL2JpbGliaWxpXCI6IDM2NCxcblx0XCIuL2JpbGliaWxpLmRcIjogMTIwMCxcblx0XCIuL2JpbGliaWxpLmQudHNcIjogMTIwMCxcblx0XCIuL2JpbGliaWxpLmpzXCI6IDM2NCxcblx0XCIuL2JpbGliaWxpLmpzLm1hcFwiOiA5MTQ3LFxuXHRcIi4vYm90dGxlXCI6IDE0MTMsXG5cdFwiLi9ib3R0bGUuZFwiOiA5Nzk0LFxuXHRcIi4vYm90dGxlLmQudHNcIjogOTc5NCxcblx0XCIuL2JvdHRsZS5qc1wiOiAxNDEzLFxuXHRcIi4vYm90dGxlLmpzLm1hcFwiOiA3MDI4LFxuXHRcIi4vYnVzeWJveFwiOiA3MTEzLFxuXHRcIi4vYnVzeWJveC5kXCI6IDEwNTAsXG5cdFwiLi9idXN5Ym94LmQudHNcIjogMTA1MCxcblx0XCIuL2J1c3lib3guanNcIjogNzExMyxcblx0XCIuL2J1c3lib3guanMubWFwXCI6IDE5MjcsXG5cdFwiLi9jYWxjXCI6IDcyMjksXG5cdFwiLi9jYWxjLmRcIjogODgyNSxcblx0XCIuL2NhbGMuZC50c1wiOiA4ODI1LFxuXHRcIi4vY2FsYy5qc1wiOiA3MjI5LFxuXHRcIi4vY2FsYy5qcy5tYXBcIjogODMxMCxcblx0XCIuL2NvZGVmb3JjZXNcIjogNzkwMSxcblx0XCIuL2NvZGVmb3JjZXMuZFwiOiA0MjgwLFxuXHRcIi4vY29kZWZvcmNlcy5kLnRzXCI6IDQyODAsXG5cdFwiLi9jb2RlZm9yY2VzLmpzXCI6IDc5MDEsXG5cdFwiLi9jb2RlZm9yY2VzLmpzLm1hcFwiOiA3NzA0LFxuXHRcIi4vZHJlc3NcIjogNTY3MSxcblx0XCIuL2RyZXNzLmRcIjogNjE0NSxcblx0XCIuL2RyZXNzLmQudHNcIjogNjE0NSxcblx0XCIuL2RyZXNzLmpzXCI6IDU2NzEsXG5cdFwiLi9kcmVzcy5qcy5tYXBcIjogNDE1OCxcblx0XCIuL2Vjb25vbXlcIjogMjQ0LFxuXHRcIi4vZWNvbm9teS5kXCI6IDgzNzIsXG5cdFwiLi9lY29ub215LmQudHNcIjogODM3Mixcblx0XCIuL2Vjb25vbXkuanNcIjogMjQ0LFxuXHRcIi4vZWNvbm9teS5qcy5tYXBcIjogMjk4Myxcblx0XCIuL2V2YWxcIjogMTQ2NSxcblx0XCIuL2V2YWwuZFwiOiAzMDE5LFxuXHRcIi4vZXZhbC5kLnRzXCI6IDMwMTksXG5cdFwiLi9ldmFsLmpzXCI6IDE0NjUsXG5cdFwiLi9ldmFsLmpzLm1hcFwiOiA4MTA5LFxuXHRcIi4vZ2l0aHViXCI6IDkwMjgsXG5cdFwiLi9naXRodWIuZFwiOiA0ODMwLFxuXHRcIi4vZ2l0aHViLmQudHNcIjogNDgzMCxcblx0XCIuL2dpdGh1Yi5qc1wiOiA5MDI4LFxuXHRcIi4vZ2l0aHViLmpzLm1hcFwiOiA1NzM1LFxuXHRcIi4vZ2xhZG9zXCI6IDY1NTIsXG5cdFwiLi9nbGFkb3MuZFwiOiAyMDMwLFxuXHRcIi4vZ2xhZG9zLmQudHNcIjogMjAzMCxcblx0XCIuL2dsYWRvcy5qc1wiOiA2NTUyLFxuXHRcIi4vZ2xhZG9zLmpzLm1hcFwiOiAzNTY1LFxuXHRcIi4vaGVhcnRoc3RvbmVcIjogMjEwNSxcblx0XCIuL2hlYXJ0aHN0b25lLmRcIjogNTQ4Nixcblx0XCIuL2hlYXJ0aHN0b25lLmQudHNcIjogNTQ4Nixcblx0XCIuL2hlYXJ0aHN0b25lLmpzXCI6IDIxMDUsXG5cdFwiLi9oZWFydGhzdG9uZS5qcy5tYXBcIjogNzcxMSxcblx0XCIuL2h0dHBjYXRcIjogMTAyMSxcblx0XCIuL2h0dHBjYXQuZFwiOiA5Mzc1LFxuXHRcIi4vaHR0cGNhdC5kLnRzXCI6IDkzNzUsXG5cdFwiLi9odHRwY2F0LmpzXCI6IDEwMjEsXG5cdFwiLi9odHRwY2F0LmpzLm1hcFwiOiA5NjY2LFxuXHRcIi4vaW1hZ2V0YWdcIjogMTI5MCxcblx0XCIuL2ltYWdldGFnLmRcIjogNDU5OSxcblx0XCIuL2ltYWdldGFnLmQudHNcIjogNDU5OSxcblx0XCIuL2ltYWdldGFnLmpzXCI6IDEyOTAsXG5cdFwiLi9pbWFnZXRhZy5qcy5tYXBcIjogNTg5MSxcblx0XCIuL2pqd3pcIjogMzE5Nixcblx0XCIuL2pqd3ouZFwiOiA4NzM0LFxuXHRcIi4vamp3ei5kLnRzXCI6IDg3MzQsXG5cdFwiLi9qand6LmpzXCI6IDMxOTYsXG5cdFwiLi9qand6LmpzLm1hcFwiOiA3NjE3LFxuXHRcIi4va2FidVwiOiA5OTgyLFxuXHRcIi4va2FidS5kXCI6IDkxODYsXG5cdFwiLi9rYWJ1LmQudHNcIjogOTE4Nixcblx0XCIuL2thYnUuanNcIjogOTk4Mixcblx0XCIuL2thYnUuanMubWFwXCI6IDM0OTAsXG5cdFwiLi9sdW9ndVwiOiA5MDAxLFxuXHRcIi4vbHVvZ3UuZFwiOiAzNjU1LFxuXHRcIi4vbHVvZ3UuZC50c1wiOiAzNjU1LFxuXHRcIi4vbHVvZ3UuanNcIjogOTAwMSxcblx0XCIuL2x1b2d1LmpzLm1hcFwiOiA5NDI1LFxuXHRcIi4vbHhib3RcIjogOTQzOCxcblx0XCIuL2x4Ym90LmRcIjogNDM4LFxuXHRcIi4vbHhib3QuZC50c1wiOiA0MzgsXG5cdFwiLi9seGJvdC5qc1wiOiA5NDM4LFxuXHRcIi4vbHhib3QuanMubWFwXCI6IDc4NjcsXG5cdFwiLi9vY3JcIjogMTE5Nixcblx0XCIuL29jci5kXCI6IDIzMTUsXG5cdFwiLi9vY3IuZC50c1wiOiAyMzE1LFxuXHRcIi4vb2NyLmpzXCI6IDExOTYsXG5cdFwiLi9vY3IuanMubWFwXCI6IDYzNzQsXG5cdFwiLi9vaWVyXCI6IDU2OTUsXG5cdFwiLi9vaWVyLmRcIjogMjk4OSxcblx0XCIuL29pZXIuZC50c1wiOiAyOTg5LFxuXHRcIi4vb2llci5qc1wiOiA1Njk1LFxuXHRcIi4vb2llci5qcy5tYXBcIjogOTQwOCxcblx0XCIuL3Byb3h5XCI6IDcyNjksXG5cdFwiLi9wcm94eS5kXCI6IDMyMTksXG5cdFwiLi9wcm94eS5kLnRzXCI6IDMyMTksXG5cdFwiLi9wcm94eS5qc1wiOiA3MjY5LFxuXHRcIi4vcHJveHkuanMubWFwXCI6IDUzMDksXG5cdFwiLi9wdXBwZXRlZXJcIjogMTI4MSxcblx0XCIuL3B1cHBldGVlci5kXCI6IDkwMzcsXG5cdFwiLi9wdXBwZXRlZXIuZC50c1wiOiA5MDM3LFxuXHRcIi4vcHVwcGV0ZWVyLmpzXCI6IDEyODEsXG5cdFwiLi9wdXBwZXRlZXIuanMubWFwXCI6IDM2MDksXG5cdFwiLi9ydW5cIjogNjc1Nixcblx0XCIuL3J1bi5kXCI6IDQyMCxcblx0XCIuL3J1bi5kLnRzXCI6IDQyMCxcblx0XCIuL3J1bi5qc1wiOiA2NzU2LFxuXHRcIi4vcnVuLmpzLm1hcFwiOiAxNzA3LFxuXHRcIi4vc3RhdHVzXCI6IDcxMzMsXG5cdFwiLi9zdGF0dXMuZFwiOiAxNzI5LFxuXHRcIi4vc3RhdHVzLmQudHNcIjogMTcyOSxcblx0XCIuL3N0YXR1cy5qc1wiOiA3MTMzLFxuXHRcIi4vc3RhdHVzLmpzLm1hcFwiOiA4Nzk1LFxuXHRcIi4vc3Vkb1wiOiA5MDE5LFxuXHRcIi4vc3Vkby5kXCI6IDIxMzcsXG5cdFwiLi9zdWRvLmQudHNcIjogMjEzNyxcblx0XCIuL3N1ZG8uanNcIjogOTAxOSxcblx0XCIuL3N1ZG8uanMubWFwXCI6IDIxMSxcblx0XCIuL3RlYWNoXCI6IDE1NTgsXG5cdFwiLi90ZWFjaC5kXCI6IDI1NjMsXG5cdFwiLi90ZWFjaC5kLnRzXCI6IDI1NjMsXG5cdFwiLi90ZWFjaC5qc1wiOiAxNTU4LFxuXHRcIi4vdGVhY2guanMubWFwXCI6IDU0NzEsXG5cdFwiLi90b29sc1wiOiAzNzE0LFxuXHRcIi4vdG9vbHMuZFwiOiA4NzQ0LFxuXHRcIi4vdG9vbHMuZC50c1wiOiA4NzQ0LFxuXHRcIi4vdG9vbHMuanNcIjogMzcxNCxcblx0XCIuL3Rvb2xzLmpzLm1hcFwiOiAxNjY1LFxuXHRcIi4vd29yZGNsb3VkXCI6IDQxMzIsXG5cdFwiLi93b3JkY2xvdWQuZFwiOiAzMzMyLFxuXHRcIi4vd29yZGNsb3VkLmQudHNcIjogMzMzMixcblx0XCIuL3dvcmRjbG91ZC5qc1wiOiA0MTMyLFxuXHRcIi4vd29yZGNsb3VkLmpzLm1hcFwiOiA4NjY5LFxuXHRcIi4veWdkbFwiOiA1MjA1LFxuXHRcIi4veWdkbC5kXCI6IDkzMDgsXG5cdFwiLi95Z2RsLmQudHNcIjogOTMwOCxcblx0XCIuL3lnZGwuanNcIjogNTIwNSxcblx0XCIuL3lnZGwuanMubWFwXCI6IDM1Nzlcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSA4MDg1OyIsImZ1bmN0aW9uIHdlYnBhY2tFbXB0eUNvbnRleHQocmVxKSB7XG5cdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHR0aHJvdyBlO1xufVxud2VicGFja0VtcHR5Q29udGV4dC5rZXlzID0gKCkgPT4gKFtdKTtcbndlYnBhY2tFbXB0eUNvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tFbXB0eUNvbnRleHQ7XG53ZWJwYWNrRW1wdHlDb250ZXh0LmlkID0gODg0NTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0VtcHR5Q29udGV4dDsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uY2FjaGUvaHNfY2FyZF9lblVTLmpzb25cIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy5jYWNoZS9oc19jYXJkX3poQ04uanNvblwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vZGF0YWJhc2UvY2xhc3NfbmFtZXNfNjAwMC5qc29uXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9kYXRhYmFzZS95aUdlRGluZ0xpYS5qc29uXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJhbnNpX3VwXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJheGlvc1wiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY2hpbGRfcHJvY2Vzc1wiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY3J5cHRvXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJmc1wiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZnMtZXh0cmFcIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImpzLXlhbWxcIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImtvaXNoaS1hZGFwdGVyLW9uZWJvdFwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwia29pc2hpLWFkYXB0ZXItdGVsZWdyYW1cIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImtvaXNoaS1jb3JlXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJrb2lzaGktcGx1Z2luLWNvbW1vblwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwia29pc2hpLXBsdWdpbi1ldmFsXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJrb2lzaGktcGx1Z2luLWltYWdlLXNlYXJjaFwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwia29pc2hpLXBsdWdpbi1tb25nb1wiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwia29pc2hpLXBsdWdpbi1wdXBwZXRlZXJcIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImtvaXNoaS1wbHVnaW4tc3RhdHVzXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJrb2lzaGktcGx1Z2luLXRlYWNoXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJrb2lzaGktcGx1Z2luLXRvb2xzXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJrb2lzaGktdXRpbHNcIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImxvZGFzaFwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibW9tZW50XCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJtb25nb2RiXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJvc1wiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicGF0aFwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicG5nanNcIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInNoYXJwXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJzdXBlcmFnZW50XCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJzdXBlcmFnZW50LXByb3h5XCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ1dGlsXCIpOzsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MzI2KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=